<?xml version="1.0" encoding="UTF-8" standalone="no"?><xccdf:Benchmark xmlns:xccdf="http://checklists.nist.gov/xccdf/1.1" xmlns="http://www.w3.org/1999/xhtml" xmlns:ecl="http://cisecurity.org/check" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cis_suse_linux_enterprise_server_10_benchmark" xsi:schemaLocation="http://checklists.nist.gov/xccdf/1.1 ../misc/xsd/xccdf-1.1.4.xsd http://cisecurity.org/check ../misc/xsd/ecl.xsd">
  <xccdf:status date="2008-02-15">accepted</xccdf:status>
  <xccdf:title>CIS SuSE Linux Enterprise Server 10.0 SP1 Benchmark</xccdf:title>
  <xccdf:description>This benchmark was developed and tested on SUSE Linux Enterprise Server (SLES) 10 SP1. It is likely to work for other versions of SUSE Linux as well (such as openSUSE). The scoring tool may yield inaccurate results on non-SUSE systems.</xccdf:description>
  <xccdf:notice id="terms-of-use" xml:lang="en">
  BACKGROUND.
  
  The Center for Internet Security ("CIS") provides benchmarks, scoring tools, software, data, information, suggestions, ideas, and other services and materials from the CIS website or elsewhere ("Products") as a public service to Internet users worldwide.  Recommendations contained in the Products ("Recommendations") result from a consensus-building process that involves many security experts and are generally generic in nature.  The Recommendations are intended to provide helpful information to organizations attempting to evaluate or improve the security of their networks, systems, and devices.  Proper use of the Recommendations requires careful analysis and adaptation to specific user requirements.  The Recommendations are not in any way intended to be a "quick fix" for anyone's information security needs.
  
  NO REPRESENTATIONS, WARRANTIES, OR COVENANTS.
  
  CIS makes no representations, warranties, or covenants whatsoever as to (i) the positive or negative effect of the Products or the Recommendations on the operation or the security of any particular network, computer system, network device, software, hardware, or any component of any of the foregoing or (ii) the accuracy, reliability, timeliness, or completeness of  the Products or the Recommendations.  CIS is providing the Products and the Recommendations "as is" and "as available" without representations, warranties, or covenants of any kind.  
  
  USER AGREEMENTS.
  
  By using the Products and/or the Recommendations, I and/or my organization ("We") agree and acknowledge that:
  
  1.	No network, system, device, hardware, software, or component can be made fully secure;
  2.	We are using the Products and the Recommendations solely at our own risk;
  3.	We are not compensating CIS to assume any liabilities associated with our use of the Products or the Recommendations, even risks that result from 		CIS's negligence or failure to perform; 
  4.	We have the sole responsibility to evaluate the risks and benefits of the Products and Recommendations to us and to adapt the Products and the 			Recommendations to our particular circumstances and requirements;
  5.	Neither CIS, nor any CIS Party (defined below) has any responsibility to make any corrections, updates, upgrades, or bug fixes; or to notify us of 		the need for any such corrections, updates, upgrades, or bug fixes; and
  6.	Neither CIS nor any CIS Party has or will have any liability to us whatsoever (whether based in contract, tort, strict liability or otherwise) for 		any direct, indirect, incidental, consequential, or special damages (including without limitation loss of profits, loss of sales, loss of or damage 		to reputation,loss of customers, loss of software, data, information or emails, loss of privacy, loss of use of any computer or other equipment, 	business interruption, wasted management or other staff resources or claims of any kind against us from third parties) arising out of or in any way 	Connected with our use of or our inability to use any of the Products or Recommendations (even if CIS has been advised of the possibility of such 	damages), including without limitation any liability associated with infringement of intellectual property, defects, bugs, errors, omissions, 	viruses, worms, backdoors, Trojan horses or other harmful items.
  
  GRANT OF LIMITED RIGHTS.
  
  CIS hereby grants each user the following rights, but only so long as the user complies with all of the terms of these Agreed Terms of Use:
  
  1.	Except to the extent that we may have received additional authorization pursuant to a written agreement with CIS, each user may download, install and 	use each of the Products on a single computer;
  2.	Each user may print one or more copies of any Product or any component of a Product that is in a .txt, .pdf, .doc, .mcw, or .rtf format, provided 		that all such copies are printed in full and are kept intact, including without limitation the text of this Agreed Terms of Use in its entirety.
  
  RETENTION OF INTELLECTUAL PROPERTY RIGHTS; LIMITATIONS ON DISTRIBUTION.
  
  The Products are protected by copyright and other intellectual property laws and by international treaties.  We acknowledge and agree that we are not acquiring title to any intellectual property rights in the Products and that full title and all ownership rights to the Products will remain the exclusive property of CIS or CIS Parties.  CIS reserves all rights not expressly granted to users in the preceding section entitled "Grant of limited rights."
  Subject to the paragraph entitled "Special Rules" (which includes a waiver, granted to some classes of CIS Members, of certain limitations in this paragraph), and except as we may have otherwise agreed in a written agreement with CIS, we agree that we will not (i) decompile, disassemble, reverse engineer, or otherwise attempt to derive the source code for any software Product that is not already in the form of source code; (ii) distribute, redistribute, encumber, sell, rent, lease, lend, sublicense, or otherwise transfer or exploit rights to any Product or any component of a Product; (iii) post any Product or any component of a Product on any website, bulletin board, ftp server, newsgroup, or other similar mechanism or device, without regard to whether such mechanism or device is internal or external, (iv) remove or alter trademark, logo, copyright or other proprietary notices, legends, symbols or labels in any Product or any component of a Product; (v) remove these Agreed Terms of Use from, or alter these Agreed Terms of Use as they appear in, any Product or any component of a Product; (vi) use any Product or any component of a Product with any derivative works based directly on a Product or any component of a Product; (vii) use any Product or any component of a Product with other products or applications that are directly and specifically dependent on such Product or any component for any part of their functionality, or (viii) represent or claim a particular level of compliance with a CIS Benchmark, scoring tool or other Product.  We will not facilitate or otherwise aid other individuals or entities in any of the activities listed in this paragraph.
  We hereby agree to indemnify, defend, and hold CIS and all of its officers, directors, members, contributors, employees, authors, developers, agents, affiliates, licensors, information and service providers, software suppliers, hardware suppliers, and all other persons who aided CIS in the creation, development, or maintenance of the Products or Recommendations ("CIS Parties") harmless from and against any and all liability, losses, costs, and expenses (including attorneys' fees and court costs) incurred by CIS or any CIS Party in connection with any claim arising out of any violation by us of the preceding paragraph, including without limitation CIS's right, at our expense, to assume the exclusive defense and control of any matter subject to this indemnification, and in such case, we agree to cooperate with CIS in its defense of such claim.  We further agree that all CIS Parties are third-party beneficiaries of our undertakings in these Agreed Terms of Use. 
  
  SPECIAL RULES.
  
  CIS has created and will from time to time create, special rules for its members and for other persons and organizations with which CIS has a written contractual relationship.  Those special rules will override and supersede these Agreed Terms of Use with respect to the users who are covered by the special rules.
  CIS hereby grants each CIS Security Consulting or Software Vendor Member and each CIS Organizational User Member, but only so long as such Member remains in good standing with CIS and complies with all of the terms of these Agreed Terms of Use, the right to distribute the Products and Recommendations within such Member's own organization, whether by manual or electronic means.  Each such Member acknowledges and agrees that the foregoing grant is subject to the terms of such Member's membership arrangement with CIS and may, therefore, be modified or terminated by CIS at any time.
  CHOICE OF LAW; JURISDICTION; VENUE.
  
  We acknowledge and agree that these Agreed Terms of Use will be governed by and construed in accordance with the laws of the State of Maryland, that any action at law or in equity arising out of or relating to these Agreed Terms of Use shall be filed only in the courts located in the State of Maryland, that we hereby consent and submit to the personal jurisdiction of such courts for the purposes of litigating any such action.  If any of these Agreed Terms of Use shall be determined to be unlawful, void, or for any reason unenforceable, then such terms shall be deemed severable and shall not affect the validity and enforceability of any remaining provisions.
  
  BY USING THE PRODUCTS I(WE) ACKNOWLEDGE THAT WE HAVE READ THESE AGREED TERMS OF USE IN THEIR ENTIRETY, UNDERSTAND THEM, AND I(WE) AGREE TO BE BOUND BY THEM IN ALL RESPECTS.      
  </xccdf:notice>
  <xccdf:front-matter>
    <div class="front-matter">
      <p style="margin-top: 0.17in; page-break-after: avoid">CIS SuSE Linux Enterprise Server Benchmark </p>
      <h3>Applicability</h3>
      <p>This benchmark was developed and tested on SuSE Linux Enterprise Server (SLES) 9.0. It is likely to work for
        other versions of SuSE Linux as well (such as SuSE Linux Professional). The scoring tool may yield inaccurate
        results on non-SuSE systems. </p>
      <h3>Conventions</h3>
      <p>The following typographical conventions are used in this document:</p>
      <table border="0" cellpadding="0" cellspacing="0" width="530">
        <col span="1" width="138"/>
        <col span="1" width="392"/>
        <tr>
          <td colspan="1" rowspan="1">
            <p>Roman font</p>
          </td>
          <td colspan="1" rowspan="1">
            <p>normal text</p>
          </td>
        </tr>
        <tr>
          <td colspan="1" rowspan="1">
            <p>Courier </p>
          </td>
          <td colspan="1" rowspan="1">
            <p>used to indicate either a command or a standard Unix parameter or a file</p>
          </td>
        </tr>
        <tr>
          <td colspan="1" rowspan="1">
            <p>
              <i>Italics</i>
            </p>
          </td>
          <td colspan="1" rowspan="1">
            <p>used for a question that you must evaluate before continuing</p>
          </td>
        </tr>
      </table>
      <h3 style="background: #c0c0c0">Root Shell Environment Assumed </h3>
      <p>The actions listed in this document are written with the assumption that they will be executed by the root user
        running the bash shell and without noclobber set. Also, the following directories are assumed to be in root's
        path: <br/> /bin:/sbin:/usr/bin:/usr/sbin </p>
      <h3>Executing Actions </h3>
      <p>The actions listed in this document are written with the assumption that they will be executed in the order
        presented here. Some actions may need to be modified if the order is changed. Actions are written so that they
        may be copied directly from this document into a root shell window with a "cut-and-paste" operation. You may
        find that many of the "chkconfig" actions, which activate or deactivate services, produce the message
        "&lt;service name&gt;: unknown service" These messages are quite normal and should not cause alarm –
        they simply indicate that the program being referenced was not installed on your machine. As SuSE Linux installs
        allow a great deal of flexibility in what software you choose to install, these messages are unavoidable. </p>
      <h3>Reboot Required </h3>
      <p>Rebooting the system is required after completing all of the actions below in order to complete the
        re-configuration of the system. In many cases, the changes made in the steps below will not take effect until
        this reboot is performed. If substantial operating system updates are performed after the initial OS load, you
        may have to reboot more than once. </p>
      <h3>Vulnerabilities</h3>
      <p style="margin-bottom: 0in">In addition to any specific issues presented by a particular service or protocol, <b><i>every </i></b>service has the potential of being an entry point into a system if a vulnerability is found. This is why we
        recommend that some services are disabled even though there is no clear way to exploit them, and there has never
        been a problem with the service. If you are running an un-needed service, you could have a problem if a hole is
        found. </p>
      <h3>Backup Key Files </h3>
      <p>Before performing the steps of this benchmark it is strongly recommended that administrators make backup copies
        of critical configuration files that may get modified by various benchmark items. If this step is not performed,
        then the site may have no reasonable back-out strategy for reversing system modifications made as a result of
        this document. The script provided in Appendix B of this document will automatically back up all files that may
        be modified by the actions below. Note that an executable copy of this script is also provided in the archive
        containing the PDF version of this document and the CIS scoring tool. Assuming the administrator is in the
        directory where the archive has been unpacked, the command to execute the backup script would be: </p>
      <p style="margin-left: 0.49in">
        <b>./do-backup.sh</b>
      </p>
      <p>One of the byproducts of the do-backup.sh script is /root/do-restore.sh, which is dynamically generated based
        on the results of the do-backup.sh script. To roll back the changes performed by this benchmark, first run
          <b>RevertBastille</b> followed by <b>do-restore.sh</b>, and all changes will be backed out. Since not all
        Linux installations are identical, the do-restore.sh script is created based on the files that actually existed
        at the time do-backup.sh was run. </p>
      <p>Note: If you make any changes manually to any of the files that were preserved by do-backup.sh, those changes
        will be lost when do-restore.sh is executed. It may be prudent to delete the do-restore.sh script once you have
        validated the changes to prevent inadvertently undoing the changes. </p>
      <h3>Build Considerations </h3>
      <p>If you have not done so already, plan out a partitioned hard drive. The default partitioning for Suse Linux
        Enterprise Server is similar to this: </p>
      <p style="margin-bottom: 0in">/ 1 GB</p>
      <p style="margin-bottom: 0in">swap 1xRAM</p>
      <p style="margin-bottom: 0in">/var 1 GB</p>
      <p style="margin-bottom: 0in">/usr 4 GB</p>
      <p style="margin-bottom: 0in">/opt 4 GB</p>
      <p style="margin-bottom: 0in">/home remaining disk space</p>
      <p>
        <br/>It is important to keep /var and /home on their own partitions. Some applications have a tendency to crash
        when the / or /usr filesystem reaches 100%. This could happen if users were to store considerable amounts of
        data (developers storing jar files or copies of application logs, for example) or logs were to fill up their
        partition. Some Enterprises define a /logs partition and store application logs there. </p>
      <p>For additional security, an additional and separate partition may be created for /boot which creates the kernel
        binaries and boot loader configuration. A /boot partition may be mounted read-only to avoid accidental damage
        and to make malicious changes a little bit more difficult (e.g. less space for backdoors in malicious kernel
        patches). A read-only /boot partition however will require special procedures for a valid kernel patch (or
        update). </p>
      <p>To limit the inconveniences caused by filling up /home, consider implementing user and group quotas on the
        /home filesystem. Quotas will limit how much a single user (or single group) can store on a given filesystem.
        More information is available in the Suse Linux manuals (see the installation CDs). </p>
      <h3>Software Package Removal</h3>
      <p>There is considerable debate over the maintenance of unused software packages. Some people feel that as long as
        the software is not being used, leaving it installed poses no appreciable risk. Others feel that unused software
        presents another attack vector and increases the maintenance effort for the administrators. This Benchmark makes
        no recommendation for the removal of unused software. If vulnerable software is present on a system, that
        vulnerability may be exploitable by a local attacker, and the reader is advised to consider the effort in either
        its removal or maintenance and the risks thereof. </p>
      <h3>Software Package Installation</h3>
      <p>Throughout this Benchmark, you may be directed to enable software package init scripts using the chkconfig
        command. This assumes you already installed said package(s). If the chkconfig command fails, verify you actually
        installed the software required. </p>
      <h3>
        <xccdf:sub idref="Bastille"/>Notes About Bastille </h3>
      <p>Throughout this Benchmark, you will see the Bastille castle in the left margin. This indicates a section that
        is addressed by Bastille. If you installed Bastille and ran it with the configuration file provided, this area
        will already be taken care of for you. </p>
      <p>It is still worth walking through that section to ensure your system is configured properly. In some cases
        where the logo appears, that section is addressed by Bastille, but it is the script provided does not address it
        as manual intervention is required. Setting a LILO/GRUB password is an example of this case. Bastille addresses
        setting the password, however, that must be set per system. In those cases, a note will appear in <b><i>bold italics</i></b> regarding Bastille. </p>
      <p>
        <br/>
        <br/>
      </p>
      <h1>
        <br/>
        <br/>
      </h1>
    </div>
  </xccdf:front-matter>
  <xccdf:rear-matter>
    <div id="appendix-a">
      <h1>Appendix A Additional Security Notes</h1>
      <p>The items in this section are security configuration settings that have been suggested by several other
        resources and system hardening tools. However, given the other settings in the benchmark document, the settings
        presented here provide relatively little incremental security benefit. Nevertheless, none of these settings
        should have a significant impact on the functionality of the system, and some sites may feel that the slight
        security enhancement of these settings outweighs the (sometimes minimal) administrative cost of performing them. </p>
      <p>None of these settings will be checked by the automated scoring tool provided with the benchmark document. They
        are purely optional and may be applied or not at the discretion of local site administrators. </p>
      <h2>SN.1 Create Symlinks For Dangerous Files </h2>
      <h3>Action: </h3>
      <p>for FILE in /root/.rhosts /root/.shosts /etc/hosts.equiv \<br/> /etc/shosts.equiv; do<br/> rm -f $FILE<br/> ln
        -s /dev/null $FILE<br/>done </p>
      <h3>Discussion: </h3>
      <p>The /root/.rhosts, /root/.shosts, and /etc/hosts.equiv files enable a weak form of access control (see the
        discussion of .rhosts files above). Attackers will often target these files as part of their exploit scripts. By
        linking these files to /dev/null, any data that an attacker writes to these files is simply discarded (though an
        astute attacker can still remove the link prior to writing their malicious data). </p>
      <h2>SN.2 Change Default Greeting String For sendmail</h2>
      <h2 style="font-weight: medium">Not applicable to SuSE as SuSE does not ship with sendmail.</h2>
      <p>
        <br/>
        <br/>
      </p>
      <h2>SN.3 Enable TCP SYN Cookie Protection</h2>
      <h3>Action:</h3>
      <p>echo "echo 1 &gt; /proc/sys/net/ipv4/tcp_syncookies" \<br/>&gt;&gt; /etc/init.d/boot.local </p>
      <h3>Discussion:</h3>
      <p>A "SYN Attack" is a denial of service (DoS) attack that consumes resources on your system forcing you to
        reboot. This particular attack is performed by beginning the TCP connection handshake (sending the SYN packet),
        and then never completing the process to open the connection. This leaves your system with several (hundreds or
        thousands) of half-open connections. This is a fairly simple attack and should be blocked. </p>
      <h2>
        <!-- Redundant – already handled by changes to kernel settings. -->SN.4 Additional LILO/GRUB Security </h2>
      <h3>Action:</h3>
      <p style="margin-bottom: 0in">chattr +i /etc/lilo.conf </p>
      <p style="margin-bottom: 0in">chattr +i /boot/grub/menu.lst </p>
      <h3>Discussion:</h3>
      <p>Setting the immutable flag on the LILO and GRUB config files will prevent any changes (accidental or otherwise)
        to the lilo.conf or menu.lst files. If you wish to modify either file you will need to unset the immutable flag
        using the chattr command with -i instead of +i. </p>
      <h2>SN.5 Evaluate Packages Associated With Startup Scripts</h2>
      <h3>Question: </h3>
      <p>How many of the startup script do you really need? </p>
      <p>Perform the action below. </p>
      <h3>Action: </h3>
      <p>cd /etc/init.d<br/>ls </p>
      <h3>Discussion: </h3>
      <p>The most effective way to get rid of the much of the unused software is to look in the startup directory
        /etc/init.d and evaluate which of these remaining services are not necessary. Use rpm -qf
        &lt;scriptname&gt; to determine the package it belongs to, use rpm -qi &lt;packagename&gt; to
        read about it, then use rpm -e &lt;packagename&gt; to remove it. For example, this server may not use
        Broadcom NIC drivers, and therefore will not need the bcm5820 package. rpm -qf bcm5820 shows us bcm5820 belongs
        to bcm5820-1.17-6. rpm -qi bcm5820 proves we do not need this package. rpm -e bcm5820 takes care of it. </p>
      <p>In some cases, you will not be able to remove a script/package – kdcrotate is a good example: it belongs to
        package krb5-libs, which is required by several packages, including sendmail and nss_ldap. In cases like this,
        you may just want to use chkconfig &lt;sccriptname&gt; off to keep it from running. </p>
      <p>You should consider configuring iptables to act as a server-level firewall. There is controversy over this
        technique as some organizations feel all they need is the perimeter firewall and others feel the perimeter is
        just the first line of defense. </p>
      <h2>SN.6 Evaluate Every Installed Package</h2>
      <h3>Question: </h3>
      <p>How much unused software was installed on your system? </p>
      <p>Perform the action below. </p>
      <h3>Action: </h3>
      <p>See Discussion</p>
      <h3>Discussion: </h3>
      <p>SuSE Linux installation includes many packages that are usually not necessary in an Enterprise server
        environment (dosfstools, for example). Computer Security Industry Best Practices recommend removing unused
        services and software to minimize attack vectors on a system. The following references suggest removing unused
        software: </p>
      <ul>
        <li>
          <p>Common Sense Guide to Cyber Security for Small Businesses – Recommended Actions for Information Security,
            1st Edition, March 2004, <a href="http://www.us-cert.gov/reading_room/CSG-small-business.pdf" shape="rect">http://www.us-cert.gov/reading_room/CSG-small-business.pdf</a></p>
        </li>
      </ul>
      <ul>
        <li>
          <p>IUP System Administrator Security Guidelines and Best Practices, <a href="http://www.iup.edu/tsc/security/" shape="rect">http://www.iup.edu/tsc/security/</a>; </p>
        </li>
        <li>
          <p>Security Engineering Awareness for Systems Engineers , <a href="http://www.software.org/pub/externalpapers/SecEngAwareness.doc" shape="rect">http://www.software.org/pub/externalpapers/SecEngAwareness.doc</a>. </p>
        </li>
      </ul>
      <p>This task can be performed fairly quickly by logging in twice and running</p>
      <p style="margin-left: 0.49in">rpm -qa | sort | less </p>
      <p>in one shell, and then using the other shell to remove the packages. You will find some packages are dependent
        upon others and you will have to remove several packages at once. In some cases, an unused package will be
        required by another useful package, and it will have to remain installed – for example, dateconfig may rely upon
        audiofile. If the features of dateconfig are required, then audiofile will have to remain. One may think that
        the functionality of dateconfig is not necessary, however, this tool is used to adjust the date, timezone and
        NTP settings of the server, and some Enterprises will have problems making system changes to servers without
        using the vendor-recommended tools. </p>
      <p>Also note that if the service is disabled, the relevant software should be removed for the following reasons:</p>
      <ol>
        <li>
          <p>Less software to maintain and monitor for security issues.</p>
        </li>
        <li>
          <p>The service cannot be inadvertently enabled by an errant administrator.</p>
        </li>
        <li>
          <p>Minimize damage in an attack should the attacker gain (or already have) access to the server.</p>
        </li>
      </ol>
      <p>Removed software can always be reinstalled using the Enterprise procedures.</p>
      <p>By using this methodology on a test server, a still functional basic server was produced with less than 230
        packages installed (down from the original 350 packages) taking up under 350MB of disk storage. This was
        performed in under an hour.. </p>
      <h2>SN.7 Install and Configure sudo</h2>
      <h3>Action: </h3>
      <p>Using your Enterprise process, install sudo.</p>
      <h3>Discussion: </h3>
      <p>sudo is a package that allows the System Administrator to delegate activities to groups of users. These
        activities are normally beyond the administrative capability of that user – restarting the web server, for
        example. If frequent web server configuration changes are taking place (or you have a bug and the web server
        keeps crashing), it becomes very cumbersome to continually engage the SysAdmin just to restart the web server.
        sudo allows the Administrator to delegate just that one task using root authority without allowing that group of
        users any other root capability. </p>
      <p>Once sudo is installed, configure it using visudo – do not vi the config file. visudo has error checking built
        in. Experience has shown that if /etc/sudoers gets botched (from using vi without visudo's error checking
        feature), recovery may become very difficult. </p>
      <h2>SN.8 Additional Kernel Tunings</h2>
      <h3>Action: </h3>
      <p>cat &lt;&lt;END_SCRIPT &gt;&gt; /etc/sysctl.conf<br/># Following 2 lines added by CISecurity
        Benchmark sec SN.9<br/>net.ipv4.tcp_max_orphans = 256<br/>net.ipv4.conf.all.log_martians =
        1<br/>END_SCRIPT<br/>chown root:root /etc/sysctl.conf<br/>chmod 0600 /etc/sysctl.conf<br/>printf
        "/etc/sysctl.conf \troot.root\t600\n" &gt;&gt; \<br/> /etc/permissions.local<br/><br/><br/></p>
      <h3>Discussion: </h3>
      <p>Before implementing these changes, please review them with your environment in mind. The above value for
        tcp_max_orphans is much lower than the default 16,384, and may be too low, depending on the server's use and
        environment. </p>
      <p>Also be aware that logging all martians may generate an excessive amount of logs, especially on multi-homed
        servers with at least one network interface on a hostile network (i.e, your border firewalls). You should ensure
        you have plenty of log space available as well as sending your logs to a remote logging host. </p>
      <h2>
        <xccdf:sub idref="Bastille"/>SN.9 Remove All Compilers and Assemblers </h2>
      <p>
        <i>
          <b>Note: Bastille configuration set to remove c compiler only.</b>
        </i>
      </p>
      <h3>Question: </h3>
      <p>Is there a mission-critical reason to have a compiler or assembler on this machine?</p>
      <p>If the answer is no, perform the action below. </p>
      <h3>Action: </h3>
      <p>Remove the following packages if they exist on your system: </p>
      <p style="margin-left: 0.49in">gcc gcc3 gcc3-c++ gcc3-g77 gcc3-java gcc3-objc gcc-c++ gcc-chill gcc-g77 gcc-java
        gcc-objc bin86 dev86 nasm. </p>
      <h3>Discussion: </h3>
      <p style="margin-bottom: 0.1in">C compilers pose a credible threat to production systems and should not be
        installed. Compilers should be installed on select development systems – those systems that have a Business need
        for a compiler – and the resulting output binaries deployed onto other development and production systems using
        the existing Enterprise change processes. </p>
      <h2>
        <br/>
        <br/>
      </h2>
      <h1>
        <br/>
        <br/>
      </h1>
    </div>
    <div id="appendix-b">
      <h1>Appendix B File Backup Script</h1>
      <p>#!/bin/bash</p>
      <p>
        <br/>
        <br/>
      </p>
      <p># Create /root/do-restore.sh</p>
      <p>cat &lt;&lt;EOF &gt; /root/do-restore.sh</p>
      <p>#!/bin/bash</p>
      <p>
        <br/>
        <br/>
      </p>
      <p># This script restores the files changed by the CISecurity </p>
      <p># Linux Benchmark do-backup.sh script. </p>
      <p>unalias rm mv cp</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>sed -n "31,9999p" /root/do-restore.sh | while read LINE; do</p>
      <p> FILE=\`echo \$LINE | awk '{print \$1}'\`</p>
      <p> PERMS=\`echo \$LINE | awk '{print \$2}'\`</p>
      <p> echo "Restoring \$FILE with \$PERMS permissions"</p>
      <p> [ -f \${FILE}-preCIS ] &amp;&amp; /bin/cp -p \${FILE}-preCIS \${FILE}</p>
      <p> /bin/chmod \${PERMS} \${FILE}</p>
      <p> [ -f \${FILE}-preCIS ] &amp;&amp; /bin/rm \${FILE}-preCIS</p>
      <p>done</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>echo "Completed file restoration - restoring directories"</p>
      <p>for DIR in \</p>
      <p> /etc/xinetd.d /etc/rc.d \</p>
      <p> /var/spool/cron /etc/cron.* \</p>
      <p>
        <span lang="fr-CA">/etc/pam.d /etc/skel</span>
      </p>
      <p lang="fr-CA">do</p>
      <p> if [ -d \${DIR}-preCIS ]; then</p>
      <p> echo "Restoring \${DIR}"</p>
      <p> /bin/cp -pr \${DIR}-preCIS \${DIR}</p>
      <p> /bin/rm -rf \${DIR}-preCIS</p>
      <p> fi</p>
      <p>done</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>echo "If you installed Bastille, please run "</p>
      <p>echo "/usr/sbin/RevertBastille and examine its list of changed files."</p>
      <p>exit 0</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>### END OF SCRIPT. DYNAMIC DATA FOLLOWS. ###</p>
      <p>EOF</p>
      <p>/bin/chmod 700 /root/do-restore.sh</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>echo "Backing up individual files"</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>for FILE in \</p>
      <p>/etc/ssh/ssh_config /etc/ssh/sshd_config /etc/hosts.deny \</p>
      <p lang="fr-CA">/etc/hosts.allow /etc/rc.status \</p>
      <p lang="fr-CA">/etc/inittab /etc/sysctl.conf /etc/syslog.conf /etc/ftpaccess \</p>
      <p lang="fr-CA">/etc/vsftpd.conf /etc/vsftpd/vsftpd.conf /etc/syslog.conf /etc/fstab \</p>
      <p lang="fr-CA">/etc/security/console.perms /etc/passwd /etc/shadow /etc/ftpusers \</p>
      <p lang="fr-CA">/etc/vsftpd.ftpusers /etc/X11/xdm/Xservers /etc/X11/gdm/gdm.conf \</p>
      <p lang="fr-CA">/etc/X11/xinit/xserverrc /etc/cron.deny /etc/at.deny /etc/crontab \</p>
      <p lang="fr-CA">/etc/securetty /etc/lilo.conf /boot/grub/menu.lst /etc/exports \</p>
      <p lang="fr-CA">/etc/init.d/syslog /etc/profile /etc/csh.login /etc/csh.cshrc \</p>
      <p>/etc/bashrc /root/.bash_profile /root/.bashrc /root/.cshrc \</p>
      <p lang="fr-CA">/root/.tcshrc /etc/security/limits.conf /etc/issue /etc/motd \</p>
      <p lang="fr-CA">/etc/issue.net /etc/X11/xdm/Xresources /etc/X11/xdm/kdmrc \</p>
      <p lang="fr-CA">/etc/sysctl.conf /var/spool/cron/allow /var/spool/cron/deny </p>
      <p lang="fr-CA">/etc/login.defs /etc/bash.bashrc /etc/default/useradd /etc/pam.d/su </p>
      <p lang="fr-CA">/at.allow /etc/permissions.local /etc/postfix/master.cf; do</p>
      <p> if [ -f ${FILE} ]; then </p>
      <p> # Backup file</p>
      <p> /bin/cp -p ${FILE} ${FILE}-preCIS</p>
      <p> # Add it to the do-restore script</p>
      <p> echo ${FILE} `find ${FILE} -printf "%m"` &gt;&gt; /root/do-restore.sh</p>
      <p> fi</p>
      <p>done</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>echo "Completed file backups - backing up directories"</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>for DIR in \</p>
      <p> /etc/xinetd.d /etc/init.d \</p>
      <p> /var/spool/cron /etc/cron.* \</p>
      <p>
        <span lang="fr-CA">/etc/pam.d /etc/skel</span>
      </p>
      <p lang="fr-CA">do </p>
      <p lang="fr-CA"> echo ${DIR}</p>
      <p lang="fr-CA"> [ -d ${DIR} ] &amp;&amp; /bin/cp -pr ${DIR} ${DIR}-preCIS</p>
      <p>done</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>echo "Recording log permissions"</p>
      <p>find /var/log -printf "%h/%f %m\n" &gt;&gt; /root/do-restore.sh</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>echo "Backup complete."</p>
      <p>
        <br/>
        <br/>
      </p>
      <p>
        <br/>
        <br/>
      </p>
      <h1>
        <br/>
        <br/>
      </h1>
    </div>
    <div id="appendix-c">
      <h1>Appendix C Bastille Configuration</h1>
      <p>Here is the recommended Bastille configuration.</p>
      <p>Note: Bastille has the ability to set the GRUB/LILO boot passwords but it is not used here to ensure the
        password is unique to the Enterprise implementing this Benchmark. Setting this password is covered in section
        7.8 of the Benchmark. </p>
      <p>Points to note where the CISecurity Benchmark differ from Bastille'e defaults:</p>
      <p>Q: What umask would you like to set for users on the system? <b>027</b></p>
      <p>See the umask discussion in sections 3.1 and 8.10. Do not just blindly change the umask without fully
        understanding the ramifications of doing so. Read the umask discussion in sections 3.1 and 8.10. </p>
      <p>Q: Would you like to disable the gcc compiler? <b>Yes</b></p>
      <p>Removing compilers unless absolutely necessary is a long-standing industry best practice.</p>
      <p>Q: Would you like to run sendmail via cron to process the queue? <b>Yes</b></p>
      <p>Allowing sendmail to process the mail queue is a good idea as important alerts may have been generated and will
        be sitting in the queue, waiting to be processed. </p>
      <p>Q: Would you like to deactivate the Apache web server? Yes</p>
      <p>Note: All answers regarding Apache configuration are non-intrusive answers as configuring Apache is outside of
        the scope of a Level 1 Operating System Benchmark. </p>
      <p>Q: Would you like to bind the web server to listen only to the localhost? No</p>
      <p>Q: Would you like to bind the web server to a particular interface? No</p>
      <p>Q: Would you like to deactivate the following of symbolic links? <b>No</b></p>
      <p>Q: Would you like to deactivate server-side includes? <b>No</b></p>
      <p>Q: Would you like to disable CGI scripts, at least for now? <b>No</b></p>
      <p>Q: Would you like to disable indexes? No</p>
      <p>Q: Would you like to disable printing? <b>Yes</b></p>
      <p>Q: Would you like to disable printing? <b>Yes</b></p>
      <p>Note: This question is asked twice to account for both types of printing systems – BSD lpr and cups. Most
        servers will not need to print. If they do need to print, the printing functionality will be restored in section
        3.14. </p>
      <p>Q: Would you like to disable user privileges on the FTP daemon? No</p>
      <p>Note: All answers regarding FTP configuration are non-intrusive answers as configuring the FTP daemon is
        outside of the scope of a Level 1 Operating System Benchmark. </p>
      <p>Q: Would you like to disable anonymous download? No</p>
      <p>Q: Would you like to install TMPDIR/TMP scripts? No</p>
      <p>Q: Would you like to run the packet filtering script? No</p>
      <p>Note that use of host-based firewalls may interfere with existing Enterprise practices and the Level 1
        benchmark makes no recommendation for enabling or disabling the host-based packet filter. </p>
      <h2>CIS Bastille Configuration File</h2>
      <p>Note that this configuration file is also provided in the archive containing the PDF version of this document
        and the CIS scoring tool. </p>
      <p>file: bastille.CIS.conf</p>
      <p># Q: Would you like to set more restrictive permissions on the administration utilities?
        [N]<br/>FilePermissions.generalperms_1_1="N"<br/># Q: Would you like to disable SUID status for
        mount/umount?<br/>FilePermissions.suidmount="Y"<br/># Q: Would you like to disable SUID status for ping?
        [Y]<br/>FilePermissions.suidping="Y"<br/># Q: Would you like to disable SUID status for dump and restore?
        [Y]<br/>FilePermissions.suiddump="Y"<br/># Q: Would you like to disable SUID status for cardctl?
        [Y]<br/>FilePermissions.suidcard="Y"<br/># Q: Would you like to disable SUID status for at?
        [Y]<br/>FilePermissions.suidat="Y"<br/># Q: Would you like to disable SUID status for DOSEMU?
        [Y]<br/>FilePermissions.suiddos="Y"<br/># Q: Would you like to disable SUID status for news server tools?
        [Y]<br/>FilePermissions.suidnews="Y"<br/># Q: Would you like to disable SUID status for printing utilities?
        [N]<br/>FilePermissions.suidprint="N"<br/># Q: Would you like to disable the r-tools?
        [Y]<br/>FilePermissions.suidrtool="Y"<br/># Q: Would you like to disable SUID status for usernetctl?
        [Y]<br/>FilePermissions.suidusernetctl="Y"<br/># Q: Would you like to disable SUID status for traceroute?
        [Y]<br/>FilePermissions.suidtrace="Y"<br/># Q: Would you like to disable SUID status for Xwrapper?
        [N]<br/>FilePermissions.suidXwrapper="N"<br/># Q: Would you like to disable SUID status for XFree86?
        [N]<br/>FilePermissions.suidXFree86="N"<br/># Q: Should Bastille disable clear-text r-protocols that use
        IP-based authentication? [Y]<br/>AccountSecurity.protectrhost="Y"<br/># Q: Would you like to enforce password
        aging? [Y]<br/>AccountSecurity.passwdage="Y"<br/># Q: Would you like to restrict the use of cron to
        administrative accounts? [Y]<br/>AccountSecurity.cronuser="Y"<br/># Q: Do you want to set the default umask?
        [Y]<br/>AccountSecurity.umaskyn="Y"<br/># Q: What umask would you like to set for users on the system?
        [077]<br/>AccountSecurity.umask="027"<br/># Q: Should we disallow root login on tty's 1-6?
        [N]<br/>AccountSecurity.rootttylogins="N"<br/># Q: Would you like to password-protect the GRUB prompt?
        [N]<br/>BootSecurity.protectgrub="N"<br/># Q: Would you like to password-protect the LILO prompt?
        [N]<br/>BootSecurity.protectlilo="N"<br/># Q: Would you like to reduce the LILO delay time to zero?
        [N]<br/>BootSecurity.lilodelay="N"<br/># Q: Do you ever boot Linux from the hard drive?
        [Y]<br/>BootSecurity.lilosub_drive="Y"<br/># Q: Would you like to write the LILO changes to a boot floppy?
        [N]<br/>BootSecurity.lilosub_floppy="N"<br/># Q: Would you like to disable CTRL-ALT-DELETE rebooting?
        [N]<br/>BootSecurity.secureinittab="N"<br/># Q: Would you like to password protect single-user mode?
        [Y]<br/>BootSecurity.passsum="Y"<br/># Q: Would you like to set a default-deny on TCP Wrappers and xinetd?
        [N]<br/>SecureInetd.tcpd_default_deny="N"<br/># Q: Should Bastille ensure the telnet service does not run on
        this system? [y]<br/>SecureInetd.deactivate_telnet="Y"<br/># Q: Should Bastille ensure inetd's FTP service does
        not run on this system? [y]<br/>SecureInetd.deactivate_ftp="Y"<br/># Q: Would you like to display "Authorized
        Use" messages at log-in time? [Y]<br/>SecureInetd.banners="Y"<br/># Q: Who is responsible for granting
        authorization to use this machine?<br/>SecureInetd.owner="its owner"<br/># Q: Would you like to disable the gcc
        compiler? [N]<br/>DisableUserTools.compiler="Y"<br/># Q: Would you like to put limits on system resource usage?
        [N]<br/>ConfigureMiscPAM.limitsconf="N"<br/># Q: Should we restrict console access to a small group of user
        accounts? [N]<br/>ConfigureMiscPAM.consolelogin="N"<br/># Q: Would you like to add additional logging?
        [Y]<br/>Logging.morelogging="Y"<br/># Q: Do you have a remote logging host? [N]<br/>Logging.remotelog="N"<br/>#
        Q: Would you like to set up process accounting? [N]<br/>Logging.pacct="N"<br/># Q: Would you like to disable
        apmd? [Y]<br/>MiscellaneousDaemons.apmd="Y"<br/># Q: Would you like to deactivate NFS and Samba?
        [Y]<br/>MiscellaneousDaemons.remotefs="Y"<br/># Q: Would you like to disable PCMCIA services?
        [Y]<br/>MiscellaneousDaemons.pcmcia="Y"<br/># Q: Would you like to disable the DHCP daemon?
        [Y]<br/>MiscellaneousDaemons.dhcpd="Y"<br/># Q: Would you like to disable GPM?
        [Y]<br/>MiscellaneousDaemons.gpm="Y"<br/># Q: Would you like to disable the news server daemon?
        [Y]<br/>MiscellaneousDaemons.innd="Y"<br/># Q: Would you like to deactivate routed?
        [Y]<br/>MiscellaneousDaemons.disable_routed="Y"<br/># Q: Would you like to deactivate gated?
        [Y]<br/>MiscellaneousDaemons.disable_gated="Y"<br/># Q: Would you like to deactivate NIS server programs?
        [Y]<br/>MiscellaneousDaemons.nis_server="Y"<br/># Q: Would you like to deactivate NIS client programs?
        [Y]<br/>MiscellaneousDaemons.nis_client="Y"<br/># Q: Would you like to disable SNMPD?
        [Y]<br/>MiscellaneousDaemons.snmpd="Y"<br/># Q: Do you want to stop sendmail from running in daemon mode?
        [Y]<br/>Sendmail.sendmaildaemon="Y"<br/># Q: Would you like to run sendmail via cron to process the queue?
        [N]<br/>Sendmail.sendmailcron="Y"<br/># Q: Would you like to disable the VRFY and EXPN sendmail commands?
        [Y]<br/>Sendmail.vrfyexpn="Y"<br/># Q: Would you like to chroot named and set it to run as a non-root user?
        [N]<br/>DNS.chrootbind="N"<br/># Q: Would you like to deactivate named, at least for now?
        [Y]<br/>DNS.namedoff="Y"<br/># Q: Would you like to deactivate the Apache web server?
        [Y]<br/>Apache.apacheoff="Y"<br/># Q: Would you like to bind the web server to listen only to the localhost?
        [N]<br/>Apache.bindapachelocal="N"<br/># Q: Would you like to bind the web server to a particular interface?
        [N]<br/>Apache.bindapachenic="N"<br/># Q: Would you like to deactivate the following of symbolic links?
        [Y]<br/>Apache.symlink="N"<br/># Q: Would you like to deactivate server-side includes?
        [Y]<br/>Apache.ssi="N"<br/># Q: Would you like to disable CGI scripts, at least for now?
        [Y]<br/>Apache.cgi="N"<br/># Q: Would you like to disable indexes? [N]<br/>Apache.apacheindex="N"<br/># Q: Would
        you like to disable printing? [N]<br/>Printing.printing="Y"<br/># Q: Would you like to disable printing?
        [N]<br/>Printing.printing_cups="Y"<br/># Q: Would you like to disable user privileges on the FTP daemon?
        [N]<br/>FTP.userftp="N"<br/># Q: Would you like to disable anonymous download? [N]<br/>FTP.anonftp="N"<br/># Q:
        Would you like to install TMPDIR/TMP scripts? [N]<br/>TMPDIR.tmpdir="N"<br/># Q: Would you like to run the
        packet filtering script? [N]<br/>Firewall.ip_intro="N" </p>
      <h1>
        <br/>
        <br/>
      </h1>
    </div>
    <div id="appendix-d">
      <h1>Appendix D Change History</h1>
      <p>January 3, 2006 – Version 1.0</p>
      <ul>
        <li>
          <p>Original conversion from the Red Hat Linux Benchmark. This Benchmark is a fork of the RHEL Benchmark,
            version 1.0.3, and updated concurrently with version 1.0.4 of the RHEL Benchmark. </p>
        </li>
      </ul>
      <p>
        <br/>
        <br/>
      </p>
      <h1>
        <br/>
        <br/>
      </h1>
    </div>
    <div id="references">
      <h1>References </h1>
      <p>
        <i>
          <b>The Center for Internet Security</b>
        </i>
      </p>
      <p>
        <i>Free benchmark documents and security tools for various OS platforms and applications:</i>
      </p>
      <p>
        <a href="http://www.cisecurity.org/" shape="rect">http://www.cisecurity.org/</a>
      </p>
      <p>
        <br/>
        <br/>
      </p>
      <p>
        <i>
          <b>SuSE Linux Enterprise Server Administration Guide</b>
        </i>
      </p>
      <p>
        <i>
          <b>SuSE Linux Enterprise Server User Guide</b>
        </i>
      </p>
      <p>
        <br/>
        <br/>
      </p>
      <p>
        <i>
          <b>Other Misc Documentation</b>
        </i>
      </p>
      <p>
        <i>Various documentation on Linux security issues:</i>
      </p>
      <p>
        <i>Primary source for information on NTP</i>
      </p>
      <p>
        <a href="http://www.ntp.org/" shape="rect">http://www.ntp.org/</a>
      </p>
      <p>
        <i>Information on MIT Kerberos:</i>
      </p>
      <p>
        <a href="http://web.mit.edu/kerberos/www/" shape="rect">http://web.mit.edu/kerberos/www/</a>
      </p>
      <p>
        <i>Apache "Security Tips" document:</i>
      </p>
      <p>
        <a href="http://httpd.apache.org/docs-2.0/misc/security_tips.html" shape="rect">http://httpd.apache.org/docs-2.0/misc/security_tips.html</a>
      </p>
      <p>
        <i>Information on Sendmail and DNS:</i>
      </p>
      <p>
        <a href="http://www.sendmail.org/" shape="rect">http://www.sendmail.org/</a>
      </p>
      <p>
        <a href="http://www.deer-run.com/~hal/dns-sendmail/DNSandSendmail.pdf" shape="rect">http://www.deer-run.com/~hal/dns-sendmail/DNSandSendmail.pdf</a>
      </p>
      <p>
        <i>OpenSSH (secure encrypted network logins):</i>
      </p>
      <p>
        <a href="http://www.openssh.org/" shape="rect">
          <span lang="fr-CA">http://www.openssh.org</span>
        </a>
      </p>
      <p lang="fr-CA">
        <i>TCP Wrappers source distribution:</i>
      </p>
      <p>
        <a href="ftp://ftp.porcupine.org/" shape="rect">ftp.porcupine.org</a>
      </p>
      <p>
        <i>PortSentry and Logcheck (port and log monitoring tools):</i>
      </p>
      <p>
        <a href="http://sourceforge.net/projects/sentrytools/" shape="rect">http://sourceforge.net/projects/sentrytools/</a>
      </p>
      <p>
        <i>Swatch (log monitoring tool):</i>
      </p>
      <p>
        <a href="http://www.oit.ucsb.edu/~eta/swatch/" shape="rect">http://www.oit.ucsb.edu/~eta/swatch/</a>
      </p>
      <p>
        <i>Open Source Sendmail (email server) distributions:</i>
      </p>
      <p>
        <a href="ftp://ftp.sendmail.org/" shape="rect">ftp://ftp.sendmail.org/</a>
      </p>
      <p>
        <i>LPRng (Open Source replacement printing system for Unix):</i>
      </p>
      <p>
        <a href="http://www.lprng.org/" shape="rect">http://www.lprng.org/</a>
      </p>
      <p>
        <i>sudo (provides fine-grained access controls for superuser activity):</i>
      </p>
      <p>
        <a href="http://www.courtesan.com/sudo/" shape="rect">http://www.courtesan.com/sudo/</a>
      </p>
      <p>Tripwire – file modification utility</p>
      <p>
        <a href="http://www.tripwire.org/" shape="rect">http://www.tripwire.org</a>
      </p>
      <p style="margin-bottom: 0in">
        <br/>
      </p>
    </div>
  </xccdf:rear-matter>
  <xccdf:version>2.0.0.10</xccdf:version>
  <xccdf:Profile id="profile-reduced">
    <xccdf:title>Reduced rule set</xccdf:title>
    <xccdf:description>
      <p>This profile includes all rules selected by default. It does not include several rules which are time-consuming
        to evaluate.</p>
    </xccdf:description>
    <xccdf:select idref="SuSEfirewall2" selected="true"/>
    <xccdf:select idref="AppArmor" selected="true"/>
    <xccdf:select idref="seccheck" selected="true"/>
    <xccdf:select idref="r0103" selected="true"/>
    <xccdf:select idref="r0104" selected="true"/>
    <xccdf:select idref="r0201" selected="true"/>
    <xccdf:select idref="r0202" selected="true"/>
    <xccdf:select idref="r0203" selected="true"/>
    <xccdf:select idref="r0204" selected="true"/>
    <xccdf:select idref="r0205" selected="true"/>
    <xccdf:select idref="r0206" selected="true"/>
    <xccdf:select idref="r0207" selected="true"/>
    <xccdf:select idref="r0208" selected="true"/>
    <xccdf:select idref="r0301" selected="true"/>
    <xccdf:select idref="r0302" selected="true"/>
    <xccdf:select idref="r0303" selected="true"/>
    <xccdf:select idref="r0304" selected="true"/>
    <xccdf:select idref="r0305" selected="true"/>
    <xccdf:select idref="r0306" selected="true"/>
    <xccdf:select idref="r0307" selected="true"/>
    <xccdf:select idref="r0308" selected="true"/>
    <xccdf:select idref="r0309" selected="true"/>
    <xccdf:select idref="r0310" selected="true"/>
    <xccdf:select idref="r0311" selected="true"/>
    <xccdf:select idref="r0312" selected="true"/>
    <xccdf:select idref="r0313" selected="true"/>
    <xccdf:select idref="r0314" selected="true"/>
    <xccdf:select idref="r0315" selected="true"/>
    <xccdf:select idref="r0316" selected="true"/>
    <xccdf:select idref="r0317" selected="true"/>
    <xccdf:select idref="r0318" selected="true"/>
    <xccdf:select idref="r0320" selected="true"/>
    <xccdf:select idref="r0321" selected="true"/>
    <xccdf:select idref="r0401" selected="true"/>
    <xccdf:select idref="r0402" selected="true"/>
    <xccdf:select idref="syslog-ng_enabled" selected="true"/>
    <xccdf:select idref="NTP_enabled" selected="true"/>
    <xccdf:select idref="log_file_permissions" selected="true"/>
    <xccdf:select idref="remote_logging" selected="true"/>
    <xccdf:select idref="r0601" selected="true"/>
    <xccdf:select idref="r0602" selected="true"/>
    <xccdf:select idref="r0603" selected="true"/>
    <xccdf:select idref="r0604" selected="true"/>
    <xccdf:select idref="r0609" selected="true"/>
    <xccdf:select idref="r0701" selected="true"/>
    <xccdf:select idref="r0702" selected="true"/>
    <xccdf:select idref="r0703" selected="true"/>
    <xccdf:select idref="r0704" selected="true"/>
    <xccdf:select idref="r0705" selected="true"/>
    <xccdf:select idref="r0706" selected="true"/>
    <xccdf:select idref="r0707" selected="true"/>
    <xccdf:select idref="r0708" selected="true"/>
    <xccdf:select idref="r0709" selected="true"/>
    <xccdf:select idref="r0710" selected="true"/>
    <xccdf:select idref="r0711" selected="true"/>
    <xccdf:select idref="r0801" selected="true"/>
    <xccdf:select idref="r0802" selected="true"/>
    <xccdf:select idref="r0803" selected="true"/>
    <xccdf:select idref="r0804" selected="true"/>
    <xccdf:select idref="r0805" selected="true"/>
    <xccdf:select idref="r0806" selected="true"/>
    <xccdf:select idref="r0807" selected="true"/>
    <xccdf:select idref="r0808" selected="true"/>
    <xccdf:select idref="r0809" selected="true"/>
    <xccdf:select idref="r0810" selected="true"/>
    <xccdf:select idref="r0811" selected="true"/>
    <xccdf:select idref="r0812" selected="true"/>
    <xccdf:select idref="r0901" selected="true"/>
    <xccdf:select idref="r0902" selected="true"/>
    <xccdf:select idref="r0903" selected="true"/>
  </xccdf:Profile>
  <xccdf:Profile id="profile-complete">
    <xccdf:title>Complete rule set</xccdf:title>
    <xccdf:description>
      <p>This profile includes all rules selected by default, including several rules which are time-consuming to
        evaluate, such as file system traversals.</p>
    </xccdf:description>
    <xccdf:select idref="r0605" selected="true"/>
    <xccdf:select idref="r0606" selected="true"/>
    <xccdf:select idref="r0607" selected="true"/>
    <xccdf:select idref="r0608" selected="true"/>
    <xccdf:select idref="r11" selected="true"/>
    <xccdf:select idref="SuSEfirewall2" selected="true"/>
    <xccdf:select idref="AppArmor" selected="true"/>
    <xccdf:select idref="seccheck" selected="true"/>
    <xccdf:select idref="r0103" selected="true"/>
    <xccdf:select idref="r0104" selected="true"/>
    <xccdf:select idref="r0201" selected="true"/>
    <xccdf:select idref="r0202" selected="true"/>
    <xccdf:select idref="r0203" selected="true"/>
    <xccdf:select idref="r0204" selected="true"/>
    <xccdf:select idref="r0205" selected="true"/>
    <xccdf:select idref="r0206" selected="true"/>
    <xccdf:select idref="r0207" selected="true"/>
    <xccdf:select idref="r0208" selected="true"/>
    <xccdf:select idref="r0301" selected="true"/>
    <xccdf:select idref="r0302" selected="true"/>
    <xccdf:select idref="r0303" selected="true"/>
    <xccdf:select idref="r0304" selected="true"/>
    <xccdf:select idref="r0305" selected="true"/>
    <xccdf:select idref="r0306" selected="true"/>
    <xccdf:select idref="r0307" selected="true"/>
    <xccdf:select idref="r0308" selected="true"/>
    <xccdf:select idref="r0309" selected="true"/>
    <xccdf:select idref="r0310" selected="true"/>
    <xccdf:select idref="r0311" selected="true"/>
    <xccdf:select idref="r0312" selected="true"/>
    <xccdf:select idref="r0313" selected="true"/>
    <xccdf:select idref="r0314" selected="true"/>
    <xccdf:select idref="r0315" selected="true"/>
    <xccdf:select idref="r0316" selected="true"/>
    <xccdf:select idref="r0317" selected="true"/>
    <xccdf:select idref="r0318" selected="true"/>
    <xccdf:select idref="r0320" selected="true"/>
    <xccdf:select idref="r0321" selected="true"/>
    <xccdf:select idref="r0401" selected="true"/>
    <xccdf:select idref="r0402" selected="true"/>
    <xccdf:select idref="syslog-ng_enabled" selected="true"/>
    <xccdf:select idref="NTP_enabled" selected="true"/>
    <xccdf:select idref="log_file_permissions" selected="true"/>
    <xccdf:select idref="remote_logging" selected="true"/>
    <xccdf:select idref="r0601" selected="true"/>
    <xccdf:select idref="r0602" selected="true"/>
    <xccdf:select idref="r0603" selected="true"/>
    <xccdf:select idref="r0604" selected="true"/>
    <xccdf:select idref="r0609" selected="true"/>
    <xccdf:select idref="r0701" selected="true"/>
    <xccdf:select idref="r0702" selected="true"/>
    <xccdf:select idref="r0703" selected="true"/>
    <xccdf:select idref="r0704" selected="true"/>
    <xccdf:select idref="r0705" selected="true"/>
    <xccdf:select idref="r0706" selected="true"/>
    <xccdf:select idref="r0707" selected="true"/>
    <xccdf:select idref="r0708" selected="true"/>
    <xccdf:select idref="r0709" selected="true"/>
    <xccdf:select idref="r0710" selected="true"/>
    <xccdf:select idref="r0711" selected="true"/>
    <xccdf:select idref="r0801" selected="true"/>
    <xccdf:select idref="r0802" selected="true"/>
    <xccdf:select idref="r0803" selected="true"/>
    <xccdf:select idref="r0804" selected="true"/>
    <xccdf:select idref="r0805" selected="true"/>
    <xccdf:select idref="r0806" selected="true"/>
    <xccdf:select idref="r0807" selected="true"/>
    <xccdf:select idref="r0808" selected="true"/>
    <xccdf:select idref="r0809" selected="true"/>
    <xccdf:select idref="r0810" selected="true"/>
    <xccdf:select idref="r0811" selected="true"/>
    <xccdf:select idref="r0812" selected="true"/>
    <xccdf:select idref="r0901" selected="true"/>
    <xccdf:select idref="r0902" selected="true"/>
    <xccdf:select idref="r0903" selected="true"/>
  </xccdf:Profile>
  <xccdf:Value id="Bastille">
    <xccdf:value/>
  </xccdf:Value>
  <xccdf:Group id="g01">
    <xccdf:title>Patches, Packages and Initial Lockdown</xccdf:title>
    <xccdf:description>
      <xhtml:p>Updating the operating system by applying software patches is the first step for 
        ensuring the security and reliability of the system.  Vendors issue operating system 
        updates when they become aware of security vulnerabilities and other serious 
        functionality issues, but it is up to their customers to actually download and install these 
        patches.</xhtml:p>
    </xccdf:description>
    <xccdf:Rule id="r0101" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Apply Latest OS Patches </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>Update system per your Enterprise Update procedures.</p>
        <h3>Discussion: </h3>
        <p>Developing a procedure for keeping up-to-date with vendor patches is critical for the security and
          reliability of the system. Vendors issue operating system updates when they become aware of security
          vulnerabilities and other serious functionality issues, but it is up to their customers to actually download
          and install these patches. </p>
        <p>When Novell publishes an update for SuSE Linux, they include the procedures with it for updating the package.
          This usually entails downloading the new RPMs from Novell, and making them available to the individual
          servers. Some Enterprises make these packages available over an NFS share or an internal anonymous FTP/HTTP
          server – your Enterprise may follow this practice or do something different. </p>
        <p>It is also important to observe that your applications work properly after patching. Though problems in
          patches are quite rare in SuSE Linux, it is generally recommended that any patch be deployed to a
          non-production system first for testing. </p>
        <p>Some RPMs may need to be installed before others. For the most part, RPM understands and solves dependencies.
          Novell creates separate instructions for special cases, like the replacement of the kernel or the general C
          library glibc. You may need to examine the list of updates that you have downloaded to check for any of these
          cases. </p>
        <p>Finally, there is some risk to using a non-patched, non-hardened machine to download the patches, as this
          involves connecting a system with security vulnerabilities on a network, which is not an Industry Best
          Practice. Please consider these issues carefully. One approach is to use a stateful hardware firewall to
          separate and protect the unpatched system from all other systems. For the purpose of update and installation
          the hardware firewall should be configured to prevent all inbound connections; as well as packets that aren’t
          part of an established session. </p>
        <p>Novell offers at least partially automated patch download and installation via YaST Online Update. In lieu of
          an existing Enterprise Standard, consider using YaST Online Update whenever Novell announces vulnerabilities.
          If your Enterprise has several servers, consider installing an update server that can be used in place of the
          update servers at Novell– the updates will go much faster, you will use much less bandwidth from your ISP, and
          you will reduce the load on Novell's servers. </p>
        <p>If YaST Online Update is used, it should be used on a lab server and the patches validated and the system
          regression tested before going to live/production systems. </p>
      </xccdf:description>
      <xccdf:check system="http://www.cisecurity.org/xccdf/interactive/0.1">
        <xccdf:check-content-ref href="sles-9.0-inter.xml" name="qstn-0001"/>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0102" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Validate Your System Before Making Changes</xccdf:title>
      <xccdf:description>
        <p>Ensuring your system is functioning properly before you make a change is a prudent system administration best
          practice and will save you hours of aggravation. Applying this Benchmark to a system that already has issues
          makes troubleshooting very difficult and may lead you to believe the Benchmark is at fault. </p>
        <p>Examine the system and application logs (/var/log). Key words to look for include, but are not limited to,
          "error", "warning", "critical", and "alert". </p>
        <p>Performing a scan for rootkits is a prudent measure. Some enterprises may also wish to perform further
          validation on the integrity of the operating system: anti-virus scanning and checking the integrity of system
          files against a trusted database of file hashes. While this standard does not endorse specific tools, the
          following are examples of tools used. </p>
        <p>Rootkit detection: Chkrootkit, Rootkit Hunter or kstat (for advanced users).</p>
        <p>Anti-virus: clamav (freeware) or commercial anti-virus products from Computer Associates, F-Secure,
          Kaspersky, Sophos, Symantec or Trend Micro. </p>
        <p>Trusted hash databases: The NSRL hash database, a database of file hashes from this server, stored on a
          separate system (e.g. hashes from AIDE, Tripwire, Trusted Computing Base, etc). </p>
        <p>
          <i>
            <b>Resolve all issues before continuing.</b>
          </i>
        </p>
      </xccdf:description>
    </xccdf:Rule>
    <xccdf:Rule id="SuSEfirewall2" role="full" selected="false" weight="1.0">
      <!-- NEW -->
      <xccdf:title>SuSEfirewall2 is active</xccdf:title>
      <xccdf:description>
        <p>SuSEfirewall2 is a stateful network packet filter also known as firewall. It is a script that generates
          iptables rules from configuration stored in the /etc/sysconfig/SuSEfirewall2 file. SuSEfirewall2 protects from
          network attacks by rejecting or dropping some unwanted packets that reach your network interface.</p>
        <p>For additional information, see <a href="http://en.opensuse.org/SuSEfirewall2">http://en.opensuse.org/SuSEfirewall2</a>.</p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «SuSEfirewall2_init» is «on»">
              <ecl:command>chkconfig SuSEfirewall2_init</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="on"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «SuSEfirewall2_setup» is «on»">
              <ecl:command>chkconfig SuSEfirewall2_setup</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="on"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="AppArmor" role="full" selected="false" weight="1.0">
      <!-- NEW -->
      <xccdf:title>AppArmor is active</xccdf:title>
      <xccdf:description>
        <p>AppArmor provides network application security via mandatory access control for programs, protecting against
          the exploitation of software flaws and compromised systems. AppArmor</p>
        <p>For additional information, see <a href="http://www.novell.com/linux/security/apparmor/">http://www.novell.com/linux/security/apparmor/</a>.</p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «boot.apparmor» is «on»">
              <ecl:command>chkconfig boot.apparmor</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="on"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!-- chkconfig on openSUSE does not show boot.apparmor, so use a different method -->
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command comment="AppArmor is enabled" success="pass">
              <ecl:command>apparmor_status --enabled</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="seccheck" role="full" selected="false" weight="1.0">
      <xccdf:title>Install the seccheck package</xccdf:title>
      <xccdf:description>
        <p>The SuSE Security Checker is a set of several shellscripts which check the local security of the system on a
          regular basis.</p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Package «seccheck» is installed" success="pass">
              <ecl:command>rpm -q seccheck</ecl:command>
              <ecl:line-selection op="pm" value=".*"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command comment="Package «seccheck» is enabled" success="pass">
              <ecl:command>. /etc/sysconfig/seccheck;test $START_SECCHK = "yes"</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0103" role="full" selected="false" weight="1.0">
      <xccdf:title>Configure SSH </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>unalias cp rm mv<br/>cd /etc/ssh <br/>cp ssh_config ssh_config.tmp<br/>awk '/^#? *Protocol/ { print "Protocol
          2"; next }; <br/> { print }' ssh_config.tmp &gt; ssh_config <br/>if [ "`egrep -l ^Protocol ssh_config`" ==
          "" ]; then <br/> echo 'Protocol 2' &gt;&gt; ssh_config <br/>fi <br/>rm ssh_config.tmp<br/>diff
          ssh_config-preCIS ssh_config </p>
        <p>Look at /etc/ssh/ssh_config to and verify “Protocol 2” is under the “Host *” entry. If it is not there, edit
          the file and put “Protocol 2” under the “Host *” entry. </p>
        <p>cp sshd_config sshd_config.tmp<br/>awk '/^#? *Protocol/ { print "Protocol 2"; next }; <br/> /^#?
          *X11Forwarding/ \<br/> { print "X11Forwarding yes"; next }; <br/> /^#? *IgnoreRhosts/ \<br/> { print
          "IgnoreRhosts yes"; next }; <br/> /^#? *HostbasedAuthentication/ \<br/> { print "HostbasedAuthentication no";
          next }; <br/> /^#? *PermitRootLogin/ \<br/> { print "PermitRootLogin no"; next }; <br/> /^#?
          *PermitEmptyPasswords/ \<br/> { print "PermitEmptyPasswords no"; next };<br/> /^#? *Banner/ \<br/> { print
          "Banner /etc/issue.net"; next };<br/> {print}' sshd_config.tmp &gt; sshd_config<br/>rm
          sshd_config.tmp<br/>diff sshd_config-preCIS sshd_config </p>
        <h3>Discussion: </h3>
        <p>OpenSSH is a popular free distribution of the standards-track SSH protocols which has become the standard
          implementation on Linux distributions. For more information on OpenSSH, see <a href="http://www.openssh.org/" shape="rect">http://www.openssh.org</a>. </p>
        <p>The settings in this section attempt to ensure safe defaults for both the client and the server.
          Specifically, both the ssh client and the sshd server are configured to use only SSH protocol 2, as security
          vulnerabilities have been found in the first SSH protocol. This may cause compatibility issues at sites still
          using the vulnerable SSH protocol 1 these sites should endeavor to configure all systems to use only SSH
          protocol 2. </p>
        <p>Note that a banner is added in the sshd_config file – we will create this banner later and it is discussed in
          detail in section 9. If you choose not to implement a banner, you will have to remove the reference to
          /etc/issue from sshd_config manually. Please read the section on the legal use of banners before deciding to
          remove it. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/ssh_config Protocol 2-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^Protocol[[:space:]]+2[[:space:]]*$' /etc/ssh/ssh_config»" success="pass">
              <ecl:command>egrep '^Protocol[[:space:]]+2[[:space:]]*$' /etc/ssh/ssh_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config Protocol 2-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^Protocol[[:space:]]+2[[:space:]]*$' /etc/ssh/sshd_config»" success="pass">
              <ecl:command>egrep '^Protocol[[:space:]]+2[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config X11Forwarding yes-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^X11Forwarding[[:space:]]+yes[[:space:]]*$' /etc/ssh/sshd_config»" success="pass">
              <ecl:command>egrep '^X11Forwarding[[:space:]]+yes[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config IgnoreRhosts yes-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^IgnoreRhosts[[:space:]]+yes[[:space:]]*$' /etc/ssh/sshd_config»" success="pass">
              <ecl:command>egrep '^IgnoreRhosts[[:space:]]+yes[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config HostbasedAuthentication no-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^HostbasedAuthentication[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config»" success="pass">
              <ecl:command>egrep '^HostbasedAuthentication[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config PermitRootLogin no-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^PermitRootLogin[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config»" success="pass">
              <ecl:command>egrep '^PermitRootLogin[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config PermitEmptyPasswords no-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^PermitEmptyPasswords[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config»" success="pass">
              <ecl:command>egrep '^PermitEmptyPasswords[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config Banner /etc/issue.net-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^Banner[[:space:]]+/etc/issue\.net[[:space:]]*$' /etc/ssh/sshd_config»" success="pass">
              <ecl:command>egrep '^Banner[[:space:]]+/etc/issue\.net[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0104" role="full" selected="false" weight="1.0">
      <xccdf:title>Enable System Accounting</xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>Install package sysstat.</p>
        <h3>Discussion: </h3>
        <p>Note: SLES does not include sysstat by default (unless the full installation is chosen).</p>
        <p>System accounting gathers baseline system data (CPU utilization, disk I/O, etc.) every 10 minutes. The data
          may be accessed with the sar command, or by reviewing the nightly report files named /var/log/sa/sar*. Once a
          normal baseline for the system has been established, unauthorized activity (password crackers and other
          CPU-intensive jobs, and activity outside of normal usage hours) may be detected due to departures from the
          normal system performance curve. Note that this data is only archived for one week before being automatically
          removed by the regular nightly cron job. Administrators may wish to archive the /var/log/sa/ directory on a
          regular basis to preserve this data for longer periods. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Package «sysstat» is installed-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="Package «sysstat» is installed" success="pass">
            <ecl:command>rpm -q sysstat</ecl:command>
            <ecl:line-selection op="pm" value=".*"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="g02">
    <xccdf:title>Minimize xinetd network services </xccdf:title>
    <xccdf:description>
      <xhtml:p>SUSE Linux used xinetd, and in a default configuration, all xinetd services are off</xhtml:p>
      <xhtml:p>On Linux, xinetd has outpaced inetd as the default network superserver.</xhtml:p>
      <xhtml:p>After enabling SSH, it is possible to nearly do away with all xinetd-based services, since SSH provides
      both a secure login mechanism and a means of transferring files to and from the system. The action
      above will disable all standard services in the xinetd configuration.</xhtml:p>
      
      <xhtml:p>The rest of the actions in this section give the administrator the option of re-enabling certain services.
      Rather than disabling and then re-enabling these services, experienced administrators may wish to
      simply disable only those services that they know are unnecessary for their systems. If there is any
      doubt, it is better to disable everything, then re-enable the necessary services based on the function of
      the server.</xhtml:p>
      
      <xhtml:p>Note: If you attempt to re-enable a service and get a message like this:
      unknown service
      it means that you have not installed the software for that service yet. Install the software package then
      proceed with the Benchmark.</xhtml:p>
    </xccdf:description>
    <xccdf:Rule id="r0201" role="full" selected="false" weight="1.0">
      <xccdf:title>
        <xccdf:sub idref="Bastille"/>Disable Standard Services </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>cd /etc/xinetd.d <br/>for FILE in atftp, chargen chargen-udp cups-lpd cyrus \<br/>daytime daytime-udp echo
          echo-udp fam finger imap \<br/>pure-ftpd qpopper rexec rlogin rsh rsync rsyncd servers \<br/>services systat
          talk telnet tftp time time-udp vnc \<br/>vsftpd; do<br/> chkconfig ${FILE} off<br/>done </p>
        <h3>Discussion: </h3>
        <p>On Linux, xinetd has outpaced inetd as the default network superserver. SuSE Linux uses xinetd. </p>
        <p>After enabling SSH, it is possible to nearly do away with all xinetd-based services, since SSH provides both
          a secure login mechanism and a means of transferring files to and from the system. The actions above will
          disable all standard services normally enabled in the xinetd configuration. </p>
        <p>When running the above commands, you may receive one or more errors like this:</p>
        <p style="margin-left: 0.49in">unknown service</p>
        <p>This is perfectly acceptable as all it means is the software for that service was not installed.</p>
        <p>The rest of the actions in this section give the administrator the option of re-enabling certain services.
          Rather than disabling and then re-enabling these services, experienced administrators may wish to simply
          disable only those services that they know are unnecessary for their systems. If there is any doubt, it is
          better to disable everything, then re-enable the necessary services based on the function of the server. </p>
        <p>Note: If you attempt to re-enable a service and get a message like this:</p>
        <p style="margin-left: 0.49in">unknown service</p>
        <p>it means that you have not installed the software for that service yet. Install the software package then
          proceed with the Benchmark. </p>
        <p>
          <br/>
          <br/>
        </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «xinetd» is «off»">
              <ecl:command>chkconfig xinetd</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:complex-check operator="AND">
          <xccdf:complex-check operator="OR">
            <!--Service «atftp» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «atftp» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «atftp» does not exist">
                  <ecl:command>chkconfig atftp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «atftp» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «atftp» is «off»">
                  <ecl:command>chkconfig atftp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «chargen» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «chargen» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «chargen» does not exist">
                  <ecl:command>chkconfig chargen</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «chargen» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «chargen» is «off»">
                  <ecl:command>chkconfig chargen</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «chargen-udp» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «chargen-udp» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «chargen-udp» does not exist">
                  <ecl:command>chkconfig chargen-udp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «chargen-udp» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «chargen-udp» is «off»">
                  <ecl:command>chkconfig chargen-udp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «cups-lpd» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «cups-lpd» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «cups-lpd» does not exist">
                  <ecl:command>chkconfig cups-lpd</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «cups-lpd» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «cups-lpd» is «off»">
                  <ecl:command>chkconfig cups-lpd</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «cyrus» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «cyrus» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «cyrus» does not exist">
                  <ecl:command>chkconfig cyrus</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «cyrus» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «cyrus» is «off»">
                  <ecl:command>chkconfig cyrus</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «daytime» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «daytime» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «daytime» does not exist">
                  <ecl:command>chkconfig daytime</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «daytime» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «daytime» is «off»">
                  <ecl:command>chkconfig daytime</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «daytime-udp» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «daytime-udp» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «daytime-udp» does not exist">
                  <ecl:command>chkconfig daytime-udp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «daytime-udp» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «daytime-udp» is «off»">
                  <ecl:command>chkconfig daytime-udp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «echo» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «echo» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «echo» does not exist">
                  <ecl:command>chkconfig echo</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «echo» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «echo» is «off»">
                  <ecl:command>chkconfig echo</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «echo-udp» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «echo-udp» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «echo-udp» does not exist">
                  <ecl:command>chkconfig echo-udp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «echo-udp» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «echo-udp» is «off»">
                  <ecl:command>chkconfig echo-udp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «fam» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «fam» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «fam» does not exist">
                  <ecl:command>chkconfig fam</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «fam» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «fam» is «off»">
                  <ecl:command>chkconfig fam</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «finger» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «finger» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «finger» does not exist">
                  <ecl:command>chkconfig finger</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «finger» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «finger» is «off»">
                  <ecl:command>chkconfig finger</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «imap» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «imap» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «imap» does not exist">
                  <ecl:command>chkconfig imap</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «imap» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «imap» is «off»">
                  <ecl:command>chkconfig imap</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «pure-ftpd» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «pure-ftpd» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «pure-ftpd» does not exist">
                  <ecl:command>chkconfig pure-ftpd</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «pure-ftpd» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «pure-ftpd» is «off»">
                  <ecl:command>chkconfig pure-ftpd</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «qpopper» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «qpopper» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «qpopper» does not exist">
                  <ecl:command>chkconfig qpopper</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «qpopper» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «qpopper» is «off»">
                  <ecl:command>chkconfig qpopper</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «rexec» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «rexec» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «rexec» does not exist">
                  <ecl:command>chkconfig rexec</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «rexec» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «rexec» is «off»">
                  <ecl:command>chkconfig rexec</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «rlogin» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «rlogin» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «rlogin» does not exist">
                  <ecl:command>chkconfig rlogin</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «rlogin» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «rlogin» is «off»">
                  <ecl:command>chkconfig rlogin</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «rsh» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «rsh» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «rsh» does not exist">
                  <ecl:command>chkconfig rsh</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «rsh» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «rsh» is «off»">
                  <ecl:command>chkconfig rsh</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «rsync» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «rsync» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «rsync» does not exist">
                  <ecl:command>chkconfig rsync</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «rsync» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «rsync» is «off»">
                  <ecl:command>chkconfig rsync</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «rsyncd» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «rsyncd» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «rsyncd» does not exist">
                  <ecl:command>chkconfig rsyncd</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «rsyncd» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «rsyncd» is «off»">
                  <ecl:command>chkconfig rsyncd</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «servers» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «servers» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «servers» does not exist">
                  <ecl:command>chkconfig servers</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «servers» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «servers» is «off»">
                  <ecl:command>chkconfig servers</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «services» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «services» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «services» does not exist">
                  <ecl:command>chkconfig services</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «services» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «services» is «off»">
                  <ecl:command>chkconfig services</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «systat» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «systat» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «systat» does not exist">
                  <ecl:command>chkconfig systat</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «systat» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «systat» is «off»">
                  <ecl:command>chkconfig systat</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «talk» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «talk» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «talk» does not exist">
                  <ecl:command>chkconfig talk</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «talk» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «talk» is «off»">
                  <ecl:command>chkconfig talk</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «telnet» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «telnet» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «telnet» does not exist">
                  <ecl:command>chkconfig telnet</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «telnet» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «telnet» is «off»">
                  <ecl:command>chkconfig telnet</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «tftp» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «tftp» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «tftp» does not exist">
                  <ecl:command>chkconfig tftp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «tftp» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «tftp» is «off»">
                  <ecl:command>chkconfig tftp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «time» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «time» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «time» does not exist">
                  <ecl:command>chkconfig time</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «time» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «time» is «off»">
                  <ecl:command>chkconfig time</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «time-udp» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «time-udp» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «time-udp» does not exist">
                  <ecl:command>chkconfig time-udp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «time-udp» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «time-udp» is «off»">
                  <ecl:command>chkconfig time-udp</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «vnc» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «vnc» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «vnc» does not exist">
                  <ecl:command>chkconfig vnc</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «vnc» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «vnc» is «off»">
                  <ecl:command>chkconfig vnc</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="OR">
            <!--Service «vsftpd» does not exist or is disabled-->
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «vsftpd» does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="Service «vsftpd» does not exist">
                  <ecl:command>chkconfig vsftpd</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--Service «vsftpd» is «off»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Service «vsftpd» is «off»">
                  <ecl:command>chkconfig vsftpd</ecl:command>
                  <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                    <ecl:regex-group group="1" op="eq" value="off"/>
                  </ecl:line-selection>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0202" role="full" selected="false" weight="1.0">
      <xccdf:title>
        <xccdf:sub idref="Bastille"/>Configure TCP Wrappers and Firewall to Limit Access </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is there a reason to allow unlimited network access to this server? </p>
        <p>If the answer to this question is no, then perform the action below.</p>
        <h3>Action:</h3>
        <p>
          <i>
            <b>Note: Bastille configuration set to 'No'</b>
          </i>
        </p>
        <p>
          <b>
            <i>Note:</i>
          </b> Do not deny access to your system without allowing access. Complete both parts of this section. </p>
        <p>TCP Wrappers</p>
        <p style="margin-bottom: 0in">Deny access to this server from all networks:</p>
        <p style="margin-left: 0.49in">echo "ALL: ALL" &gt; /etc/hosts.deny<br/>diff /etc/hosts.deny-preCIS
          /etc/hosts.deny </p>
        <p>To allow access from the authorized networks, refer to the hosts.allow man page and enter the service and the
          network in /etc/hosts.allow. At a minimum, you need to allow localhost traffic. The following script will
          create a sample hosts.allow file that will allow access to the locally connected networks: </p>
        <p style="margin-left: 0.49in; margin-bottom: 0.08in"> printf "ALL: localhost" &gt; /etc/hosts.allow<br/>for
          I in `ifconfig | grep "inet addr" | cut -f2 -d: | cut -f1-3 -d"." | grep -v ^127 | sort -n`; do <br/> printf
          ", $I." &gt;&gt; /etc/hosts.allow;<br/>done<br/>echo &gt;&gt; /etc/hosts.allow<br/>diff
          /etc/hosts.allow-preCIS /etc/hosts.allow </p>
        <p>
          <b>
            <i>Note:</i>
          </b> The above script intentionally ignores IPv6 networks. </p>
        <p>You should review the resulting /etc/hosts.allow to ensure it meets your needs. Test your configuration now
          by logging in remotely. </p>
        <p>You may wish to further customize your configuration. For example, if you would like to ensure that only one
          ip address, 192.168.50.4, can access SSH on your server at 192.168.50.2, then follow the example below. </p>
        <p>Change /etc/hosts.allow from:</p>
        <p> ALL: localhost, 192.168.50.2/255.255.255.0</p>
        <p>to:</p>
        <p> sshd : 192.168.50.4/255.255.255.255 : ALLOW</p>
        <p> ALL EXCEPT sshd: localhost, 192.168.50.2/255.255.255.0</p>
        <p>Further customization of TCP Wrappers is beyond the scope of this standard.</p>
        <p>Firewall</p>
        <p>See discussion.</p>
        <h3>Discussion:</h3>
        <p>TCP Wrappers and Host-Based Firewalls are presented together as they are similar and complementary in
          functionality.</p>
        <p>TCP Wrappers</p>
        <p>By limiting access to the server, you reduce your exposure to threats from attackers on remote systems. For
          Internet-connected servers that provide service to the whole Internet, limiting access may not make sense.
          Intranet servers, limited-access servers, and workstations should limit access to only authorized networks. </p>
        <p>Many daemons (SSH for example) are compiled with TCP Wrapper support, so you can use /etc/hosts.allow and
          /etc/hosts.deny to limit SSH access to your systems. The portmap daemon also uses TCP wrappers and there is a
          specific note to this effect in the default TCP wrappers config files. </p>
        <p>It is important to note that TCP wrappers looks at hosts.allow first, then hosts.deny, and controls access
          based on the first match. If you omit entries in hosts.allow and deny access to ALL in hosts.deny, you will
          block network access to all network clients. </p>
        <p>Host-Based Firewalls</p>
        <p>Host-based firewalls (also known as personal firewalls) have the following benefits:</p>
        <p style="margin-left: 0.49in">Protection from compromised systems on the local network;</p>
        <p style="margin-left: 0.49in">Defense in depth where an attacker must overcome both the border firewall and the
          host-based firewall to attack a system; </p>
        <p style="margin-left: 0.49in">Extremely fine tuned control over what systems may or may not access the system.</p>
        <p>The Center for Internet Security recommends installing a host-based firewall on workstations, and suggests
          end-users consider installing them on servers as well. </p>
        <p>Workstations are defined as Linux systems that offer no services to any external network or system. For
          example, a workstation that is running Apache and serving up content to the local network segment is not a
          workstation. </p>
        <p>Host-based firewalls are available in iptables (installed by default) or via commercial offerings. The Center
          for Internet Security makes no recommendations for a vendor or even a specific firewall configuration as
          firewalls are very complex systems. Entire books have been written on iptables and are outside the scope of
          this benchmark. There are options during installation that allow you to minimally configure the iptables
          firewall (to be confirmed and examined in greater detail). There are also sample files. </p>
        <p>The default configuration of iptables should not be considered secure without specific configuration. The
          Center for Internet Security recommends using a tool (graphical- or text-based) to configure the firewall as
          manual rule configuration is extremely error-prone and you may end up with a false sense of security and have
          a less secure system. </p>
        <p>See the following iptables resources:</p>
        <p>
          <i>
            <b>Web-Based</b>
          </i>
        </p>
        <p>Easy Firewall Generator for IPTables - <a href="http://easyfwgen.morizot.net/" shape="rect">http://easyfwgen.morizot.net/</a></p>
        <p>
          <i>
            <b>Package-Based</b>
          </i>
        </p>
        <p>FireHOL - <a href="http://firehol.sourceforge.net/" shape="rect">http://firehol.sourceforge.net/</a></p>
        <p>Firestarter - <a href="http://www.fs-security.com/" shape="rect">http://www.fs-security.com/</a></p>
        <p>Firewall Builder - <a href="http://sourceforge.net/projects/fwbuilder/" shape="rect">http://sourceforge.net/projects/fwbuilder/</a></p>
        <p>GuardDog - <a href="http://www.simonzone.com/software/guarddog/" shape="rect">http://www.simonzone.com/software/guarddog/</a></p>
        <p>Note: Inclusion of a tool on this list is not an endorsement or recommendation by the Center for Internet
          Security.</p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/hosts.deny ALL:ALL-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^ALL[[:space:]]*:[[:space:]]*ALL$' /etc/hosts.deny»" success="pass">
              <ecl:command>egrep '^ALL[[:space:]]*:[[:space:]]*ALL$' /etc/hosts.deny</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/hosts.allow ALL: localhost-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^ALL[[:space:]]*:[[:space:]]*localhost.*$' /etc/hosts.allow»" success="pass">
              <ecl:command>egrep '^ALL[[:space:]]*:[[:space:]]*localhost.*$' /etc/hosts.allow</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0203" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable telnet If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is there a mission-critical reason that requires users to access this system via telnet, rather than the more
          secure SSH protocol? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig telnet on </p>
        <h3>Discussion: </h3>
        <p>telnet uses an unencrypted network protocol, which means data from the login session (such as passwords and
          all other data transmitted during the session) can be stolen by eavesdroppers on the network, and also that
          the session can be hijacked by outsiders to gain access to the remote system. The freely-available SSH
          utilities that ship with SuSE Linux (see <a href="http://www.openssh.com/" shape="rect">http://www.openssh.com/</a>) provide encrypted network logins and should be used instead. </p>
        <p>To aid in the migration to SSH, there is a freely available SSH client for Windows called putty, which is
          available from Simon Tatham (see <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/" shape="rect">http://www.chiark.greenend.org.uk/~sgtatham/putty/</a>). There are numerous commercially supported SSH
          clients as well – check to see if your Enterprise already has an Enterprise SSH client. </p>
        <p>Some Enterprises are using telnet over SSL, however, the simpler and more standard solution is to use SSH.
          Configuring telnet over SSL is beyond the scope of a Level 1 Benchmark and will not be addressed here. </p>
        <p>It is understood that large Enterprises deeply entrenched in using telnet may take considerable effort in
          migrating from telnet to ssh, so telnet may have to be enabled. When it can be disabled, simply run chkconfig
          telnet off to turn it off again. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «telnet» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «telnet» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «telnet» does not exist">
              <ecl:command>chkconfig telnet</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «telnet» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «telnet» is «off»">
              <ecl:command>chkconfig telnet</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0204" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable FTP If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this machine an (anonymous) FTP server, or is there a mission-critical reason why data must be transferred
          to and from this system via an ftp server, rather than sftp or scp? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig vsftpd on </p>
        <h3>Discussion: </h3>
        <p>Like telnet, the FTP protocol is unencrypted, which means passwords and other data transmitted during the
          session can be captured by sniffing the network, and that the FTP session itself can be hijacked by an
          external attacker. SSH provides two different encrypted file transfer mechanisms – scp and sftp – and should
          be used instead. Even if FTP is required because the local system is an anonymous FTP server, consider
          requiring non-anonymous users on the system to transfer files via SSH-based protocols. For further information
          on restricting FTP access to the system, see section 7.2 below. </p>
        <p>Note: Any directory writable by an anonymous FTP server should have its own partition. This helps prevent an
          FTP server from filling a hard drive used by other services. </p>
        <p>To aid in the migration away from FTP, there are a number of freely available scp and sftp client for
          Windows, such as WinSCP (available from <a href="http://winscp.sourceforge.net/eng/index.php" shape="rect">http://winscp.sourceforge.net/eng/index.php</a>) for a Graphical interface to putty, and pscp, which is a
          part of the previously mentioned putty package. </p>
        <p>Some Enterprises are using FTP over SSL, however, the simpler and more standard solution is to use SSH.
          Configuring FTP over SSL is beyond the scope of a Level 1 Benchmark and will not be addressed here. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «vsftpd» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «vsftpd» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «vsftpd» does not exist">
              <ecl:command>chkconfig vsftpd</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «vsftpd» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «vsftpd» is «off»">
              <ecl:command>chkconfig vsftpd</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0205" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable rlogin/rsh/rcp If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>chkconfig rsh on <br/>chkconfig rlogin on </p>
        <p>Discussion: </p>
        <p>The r-commands suffer from the same hijacking and sniffing issues as telnet and ftp, and in addition have a
          number of well-known weaknesses in their authentication scheme. SSH was designed to be a drop-in replacement
          for these protocols. Given the wide availability of free SSH implementations, it seems unlikely that there is
          ever a case where these tools cannot be replaced with SSH (again, see <a href="http://www.openssh.com/" shape="rect">http://www.openssh.com/</a>). </p>
        <p>If these protocols are left enabled, please also see section 7.1 for additional security-related
          configuration settings. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--Service «shell» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «shell» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «shell» does not exist">
                <ecl:command>chkconfig shell</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «shell» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «shell» is «off»">
                <ecl:command>chkconfig shell</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «rsh» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «rsh» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «rsh» does not exist">
                <ecl:command>chkconfig rsh</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «rsh» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «rsh» is «off»">
                <ecl:command>chkconfig rsh</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «login» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «login» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «login» does not exist">
                <ecl:command>chkconfig login</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «login» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «login» is «off»">
                <ecl:command>chkconfig login</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «rlogin» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «rlogin» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «rlogin» does not exist">
                <ecl:command>chkconfig rlogin</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «rlogin» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «rlogin» is «off»">
                <ecl:command>chkconfig rlogin</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0206" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable TFTP Server if Absolutely Necessary</xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this system a boot server or is there some other mission-critical reason why data must be transferred to
          and from this system via TFTP? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig tftp on <br/>if [ ! -d "/tftpboot" ] ; then <br/> mkdir -m 0755 /tftpboot &amp;&amp; \<br/>
          chown root:root /tftpboot <br/>fi </p>
        <h3>Discussion: </h3>
        <p>TFTP is typically used for network booting of diskless workstations, X-terminals, and other similar devices.
          Routers and other network devices may copy configuration data to remote systems via TFTP for backup. However,
          unless this system is needed in one of these roles, it is best to leave the TFTP service disabled. </p>
        <p>Note: The tftp-server software is not installed by default on SuSE Linux. You will have to install it if you
          need to use it. After installing it, perform the actions above. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--Service «tftp» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «tftp» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «tftp» does not exist">
                <ecl:command>chkconfig tftp</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «tftp» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «tftp» is «off»">
                <ecl:command>chkconfig tftp</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <xccdf:check system="http://cisecurity.org/check">
            <!--//tftpboot does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="//tftpboot does not exist" success="pass">
                <ecl:command>find //tftpboot -follow -maxdepth 0 -ls 2&gt;/dev/null</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--//tftpboot ownership and permission-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="//tftpboot ownership and permission">
                <ecl:command>find //tftpboot -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0207" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable IMAP If Absolutely Necessary</xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this machine a mail server with a mission-critical reason to use imap to serve mail to remote mail
          clients? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig cyrus on </p>
        <p>or</p>
        <p>chkconfig imap on </p>
        <h3>Discussion: </h3>
        <p>Remote mail clients (like Eudora, Netscape Mail and Kmail) may retrieve mail from remote mail servers using
          IMAP, the Internet Message Access Protocol, or POP, the Post Office Protocol. If this system is a mail server
          that must offer this protocol then either cyrus or imap may be activated. Note: cyrus and imap both provide
          IMAP <b>and</b> POP services. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--Service «cyrus» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «cyrus» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «cyrus» does not exist">
                <ecl:command>chkconfig cyrus</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «cyrus» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «cyrus» is «off»">
                <ecl:command>chkconfig cyrus</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «imap» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «imap» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «imap» does not exist">
                <ecl:command>chkconfig imap</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «imap» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «imap» is «off»">
                <ecl:command>chkconfig imap</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0208" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable POP If Absolutely Necessary</xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this machine a mail server with a mission-critical reason to use pop to serve mail to remote mail clients? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig qpopper on </p>
        <p>or</p>
        <p>chkconfig cyrus on </p>
        <h3>Discussion: </h3>
        <p>Remote mail clients (like Eudora, Netscape Mail and Kmail) may retrieve mail from remote mail servers using
          IMAP, the Internet Message Access Protocol, or POP, the Post Office Protocol. If this system is a mail server
          that must offer the POP protocol then either qpopper or cyrus may be activated. </p>
        <p>
          <br/>
          <br/>
        </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--Service «qpopper» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «qpopper» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «qpopper» does not exist">
                <ecl:command>chkconfig qpopper</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «qpopper» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «qpopper» is «off»">
                <ecl:command>chkconfig qpopper</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «cyrus» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «cyrus» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «cyrus» does not exist">
                <ecl:command>chkconfig cyrus</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «cyrus» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «cyrus» is «off»">
                <ecl:command>chkconfig cyrus</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="g03">
    <xccdf:title>Minimize boot services </xccdf:title>
    <xccdf:description>
      <xhtml:p>This group contains recommendations for turning off boot services that are usually not needed.</xhtml:p>
    </xccdf:description>
    <xccdf:Rule id="r0301" role="full" selected="false" weight="1.0">
      <xccdf:title>Set Daemon umask </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>cd /etc<br/>awk '($1=="umask") { if ($2 &lt; "027") { $2="027";} }; \<br/> { print }' rc.status-preCIS
          &gt; rc.status<br/>if [ `grep -c umask rc.status` -eq 0 ]; then<br/> echo "umask 027" &gt;&gt;
          rc.status<br/>fi<br/>diff rc.status-preCIS rc.status </p>
        <h3>Discussion: system default umask should be set to at least 027 in order to prevent daemon processes (such as
          the syslog daemon) from creating world-writable files by default. If a particular daemon needs a less
          restrictive umask, consider editing the daemon startup script to grant that daemon the required umask while
          maintaining the increased server security posture. </h3>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--/etc/rc.status umask 027-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="command test «egrep '^umask[[:space:]]+027[[:space:]]*$' /etc/rc.status»" success="pass">
            <ecl:command>egrep '^umask[[:space:]]+027[[:space:]]*$' /etc/rc.status</ecl:command>
            <ecl:line-selection op="pm" value="^.*$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0302" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable xinetd, If Possible </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>cd /etc/xinetd.d <br/>if [ `find . -type f | \<br/> xargs awk '($1=="disable" &amp;&amp; $3=="no")
          {print}'\<br/> | wc -l` -eq 0 ]; then <br/> chkconfig xinetd off <br/>fi </p>
        <h3>Discussion: </h3>
        <p>If the actions in Section 2 of this benchmark resulted in no services being enabled in the inet super daemon
          /etc/xinetd.d, then the xinetd service may be disabled completely on this system. </p>
        <p>Experienced SysAdmins will note that the inet super daemon is usually restarted after a change to its
          configuration file. This is not necessary in this case as the system will be rebooted and the change will take
          effect at that time. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «xinetd» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «xinetd» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «xinetd» does not exist">
              <ecl:command>chkconfig xinetd</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «xinetd» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «xinetd» is «off»">
              <ecl:command>chkconfig xinetd</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0303" role="full" selected="false" weight="1.0">
      <xccdf:title>
        <xccdf:sub idref="Bastille"/>Disable postfix Server, If Possible </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this system a mail server – that is, does this machine receive and process email from other hosts? Note:
          The email server need not be running to send outgoing mail. </p>
        <h3>Action: </h3>
        <h3 style="font-weight: medium">if [ -f "/etc/postfix/master.cf" ]; then<br/> cd /etc/posfix<br/> awk '$1 ~
          /^smtp$/ { print "#" $0; next };<br/> { print }' master.cf.preCIS &gt; master.cf<br/> diff
          master.cf.preCIS master.cf<br/>fi </h3>
        <h3>Discussion: </h3>
        <p>It is possible to run a Unix system with the postfix daemon disabled and still allow users on that system to
          send email out from that machine. Running postfix in "<i>daemon mode</i>" is only required on machines that
          act as mail servers, receiving and processing email from other hosts on the network. Note that if the system
          is an email server, the administrator is encouraged to search the Web for additional documentation on postfix
          security issues. </p>
        <p>Experienced administrators will understand that a chroot-jailed user or program can still interact with a
          postfix process listening on the <i>loopback</i> interface. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Disable remote mail-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «egrep '^smtp' /etc/postfix/master.cf»">
            <ecl:command>egrep '^smtp' /etc/postfix/master.cf</ecl:command>
            <ecl:line-selection op="pm" value="^.+$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0304" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable GUI Login If Possible </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is there a mission-critical reason to run a GUI login program on this system? </p>
        <p>If the answer to this question is no, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>sed -e 's/id:5:initdefault:/id:3:initdefault:/' \<br/>&lt; /etc/inittab-preCIS &gt;
          /etc/inittab<br/>chown root:root /etc/inittab<br/>chmod 0600 /etc/inittab <br/>printf
          "/etc/inittab\troot.root\t600\n" &gt;&gt; \<br/>/etc/permissions.local </p>
        <h3>Discussion: </h3>
        <p>This action disables the graphical login, if present, leaving the user to login via SSH or a normal
          text-based console. If you elect to deactivate the GUI login screen, users can still run X Windows by typing
          startx at the shell prompt. In SuSE Linux, there are two main runlevels that the system runs in. Runlevel 5
          boots directly into X Windows, so as to allow graphical login or easy use of specialized X terminals.
          Otherwise, for normal text-based console login, runlevel 3 is desirable. GUI login is activated or deactivated
          by changing this runlevel in /etc/inittab. Again, note that runlevel 3 still allows the user to run X Windows
          by typing startx at the shell prompt. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--Default runlevel is 3-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^id:3:initdefault:' /etc/inittab»" success="pass">
              <ecl:command>egrep '^id:3:initdefault:' /etc/inittab</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/inittab ownership-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="/etc/inittab is owned by root:root">
              <ecl:command>stat /etc/inittab -c "%u:%g"</ecl:command>
              <ecl:line-selection op="pm" value="0:0"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--/etc/inittab permissions-->
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="/etc/inittab is not writable by unprivileged users">
              <ecl:command>stat --format "%a" /etc/inittab</ecl:command>
              <ecl:line-selection op="pm" value="600"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="/etc/inittab permissions correct in /etc/permissions.local" success="pass">
              <ecl:command>egrep '^/etc/inittab[[:space:]]+root\.root[[:space:]]+0?600$' /etc/permissions.local</ecl:command>	
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0305" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable X Font Server If Possible </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is there a mission-critical reason to run X Windows on this system? </p>
        <p>If the answer to this question is no, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig xfs off</p>
        <h3>Discussion: </h3>
        <p>If you won't be using an X server on this machine, this action will deactivate the font server.</p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «xfs» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «xfs» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «xfs» does not exist">
              <ecl:command>chkconfig xfs</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «xfs» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «xfs» is «off»">
              <ecl:command>chkconfig xfs</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0306" role="full" selected="false" weight="1.0">
      <xccdf:title>
        <xccdf:sub idref="Bastille"/>Disable Standard Boot Services </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p style="margin-bottom: 0in">for FILE in apache2 apache apmd autofs fbset gpm hotplug \<br/>hwscan joystick lpd
          mars-new named nfs portmap smb snmpd \<br/>ypbind ypserv yppasswdd; do<br/> /etc/init.d/$FILE stop<br/>
          chkconfig $FILE off<br/>done<br/>for USERID in lp apache named mysql; do<br/> usermod -L -s /bin/false
          $USERID<br/>done </p>
        <h3>Discussion: </h3>
        <p>Every system daemon that does not have a clear and necessary purpose on the host should be deactivated. This
          greatly reduces the chances that the machine will be running a vulnerable daemon when the next vulnerability
          is discovered in its operating system. </p>
        <p>SuSE Linux uses a facility called chkconfig to manage all the SysV rc-scripts. chkconfig adds or deletes
          links in each of the appropriate runlevel directories (/etc/rc.d/rc*.d) to activate or deactivate each of the
          rc-scripts. </p>
        <p>This process "chkconfig's" all of the rc-scripts off, so that the local administrator can easily reactivate
          any of these scripts upon discovery of a mission-critical need for one of these services. One could reactivate
          the daemon script by typing chkconfig daemon on in most cases, which activates it in runlevels 2 through 5. If
          one of these runlevels is undesirable, like runlevel 2 for the NFS script, or the script needs to run in one
          of the other available runlevels, chkconfig takes the argument " level &lt;levels&gt;" where one can
          explicitly specify runlevels that it should act on. </p>
        <p>Note that vendor patches may restore some of the original entries in the startup script directories
          /etc/rc.d/rc*.d – it is always a good idea to check these boot directories and remove any scripts that may
          have been added by the patch installation process. This would be a good time to ensure this check is in your
          Enterprise OS Upgrade Procedure. </p>
        <p>The rest of the actions in this section give the administrator the option of re-enabling certain services –
          in particular, the services that are disabled in the second loop in the "Action" section above. Rather than
          disabling and then re-enabling these services, experienced administrators may wish to simply disable only
          those services that they know are unnecessary for their systems. </p>
        <p>The third loop in the "Action" section locks daemon-user accounts related to servers that we examine by
          setting a lockout password. This will not prevent a given daemon from running as these users – it simply
          confirms that these users are not available for human login. It also changes the shell to /bin/false for an
          additional layer of security as long as shell access is not necessary. Bear in mind that some packages
          (findutils up to version 4.1.20, for example) do not work properly without a shell for the nobody account – be
          sure you test this thoroughly if you choose to invalidate the daemon shells. </p>
        <p>Note: Not all of the scripts listed above will exist on all systems, as this is a superset of the available
          rc-scripts in the various SuSE distributions. The benchmark's recommended action will register some trivial
          errors on each distribution version as a result – these are not cause for alarm. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--Service «apmd» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «apmd» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «apmd» does not exist">
                <ecl:command>chkconfig apmd</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «apmd» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «apmd» is «off»">
                <ecl:command>chkconfig apmd</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «gpm» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «gpm» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «gpm» does not exist">
                <ecl:command>chkconfig gpm</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «gpm» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «gpm» is «off»">
                <ecl:command>chkconfig gpm</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «mars-new» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «mars-new» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «mars-new» does not exist">
                <ecl:command>chkconfig mars-new</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «mars-new» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «mars-new» is «off»">
                <ecl:command>chkconfig mars-new</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «nfs» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «nfs» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «nfs» does not exist">
                <ecl:command>chkconfig nfs</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «nfs» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «nfs» is «off»">
                <ecl:command>chkconfig nfs</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «autofs» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «autofs» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «autofs» does not exist">
                <ecl:command>chkconfig autofs</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «autofs» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «autofs» is «off»">
                <ecl:command>chkconfig autofs</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «ypbind» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «ypbind» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «ypbind» does not exist">
                <ecl:command>chkconfig ypbind</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «ypbind» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «ypbind» is «off»">
                <ecl:command>chkconfig ypbind</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «ypserv» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «ypserv» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «ypserv» does not exist">
                <ecl:command>chkconfig ypserv</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «ypserv» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «ypserv» is «off»">
                <ecl:command>chkconfig ypserv</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «yppasswd» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «yppasswd» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «yppasswd» does not exist">
                <ecl:command>chkconfig yppasswd</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «yppasswd» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «yppasswd» is «off»">
                <ecl:command>chkconfig yppasswd</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «portmap» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «portmap» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «portmap» does not exist">
                <ecl:command>chkconfig portmap</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «portmap» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «portmap» is «off»">
                <ecl:command>chkconfig portmap</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «smb» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «smb» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «smb» does not exist">
                <ecl:command>chkconfig smb</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «smb» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «smb» is «off»">
                <ecl:command>chkconfig smb</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «lpd» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «lpd» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «lpd» does not exist">
                <ecl:command>chkconfig lpd</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «lpd» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «lpd» is «off»">
                <ecl:command>chkconfig lpd</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «apache2» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «apache2» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «apache2» does not exist">
                <ecl:command>chkconfig apache2</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «apache2» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «apache2» is «off»">
                <ecl:command>chkconfig apache2</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «apache» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «apache» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «apache» does not exist">
                <ecl:command>chkconfig apache</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «apache» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «apache» is «off»">
                <ecl:command>chkconfig apache</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «snmpd» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «snmpd» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «snmpd» does not exist">
                <ecl:command>chkconfig snmpd</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «snmpd» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «snmpd» is «off»">
                <ecl:command>chkconfig snmpd</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «named» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «named» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «named» does not exist">
                <ecl:command>chkconfig named</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «named» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «named» is «off»">
                <ecl:command>chkconfig named</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:check system="http://cisecurity.org/check">
          <!-- User lp is locked -->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Lp is locked if it exists">
              <ecl:command>passwd -S lp | grep -v 'LK'</ecl:command>
              <ecl:line-selection op="pm" value="^.*(!LK)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!-- User apache is locked -->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Apache is locked if it exists">
              <ecl:command>passwd -S apache | grep -v 'LK'</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!-- User named is locked -->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Named is locked if it exists">
              <ecl:command>passwd -S named | grep -v 'LK'</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!-- User MySql is locked -->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="mysql is locked if it exists">
              <ecl:command>passwd -S mysql | grep -v 'LK'</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0307" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable SMB (Windows File Sharing) Processes If Absolutely Necessary</xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this machine sharing files via the Windows file sharing protocols? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig smb on </p>
        <h3>Discussion: </h3>
        <p>SuSE Linux includes the popular Open Source Samba server for providing file and print services to
          Windows-based systems. This allows a Unix system to act as a file or print server in on a Windows network, and
          even act as a Domain Controller (authentication server) to older Windows operating systems. However, if this
          functionality is not required by the site, the service should be disabled. </p>
        <p>This section removes the SMB client software as well. If there is some business reason to mount Windows
          Shares, do not remove the packages: samba-client and samba-common. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «smb» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «smb» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «smb» does not exist">
              <ecl:command>chkconfig smb</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «smb» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «smb» is «off»">
              <ecl:command>chkconfig smb</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0308" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable NFS Server Processes If Absolutely Necessary</xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this machine an NFS file server? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig nfsserver on </p>
        <h3>Discussion: </h3>
        <p>NFS is frequently exploited to gain unauthorized access to files and systems. Clearly there is no need to run
          the NFS server-related daemons on hosts that are not NFS servers. If the system is an NFS server, the
          administrator should take reasonable precautions when exporting file systems, including restricting NFS access
          to a specific range of local IP addresses and exporting file systems "read-only" where appropriate. For more
          information, consult the exports manual page. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «nfs» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «nfsserver» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «nfsserver» does not exist">
              <ecl:command>chkconfig nfsserver</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «nfsserver» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «nfsserver» is «off»">
              <ecl:command>chkconfig nfsserver</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0309" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable NFS Client Processes If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is there a mission-critical reason why this system must access file systems from remote servers via NFS? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig autofs on </p>
        <h3>Discussion: </h3>
        <p>Again, unless there is a significant need for this system to acquire data via NFS, administrators should
          disable NFS-related services. Note that other file transfer schemes (such as rdist via SSH) can often be
          preferable to NFS for certain applications. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «autofs» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «autofs» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «autofs» does not exist">
              <ecl:command>chkconfig autofs</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «autofs» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «autofs» is «off»">
              <ecl:command>chkconfig autofs</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0310" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable NIS Client Processes If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is there a mission-critical reason why this machine must be an NIS client? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig ypbind on </p>
        <h3>Discussion: </h3>
        <p>Unless this site must use NIS, it should really be avoided. While it can be very useful for transparently
          scaling the number of workstations, it's not well designed for security. Sun Microsystems is now phasing out
          NIS+ in favor of LDAP for naming services – NIS and NIS+ are now reaching end of life. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «ypbind» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «ypbind» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «ypbind» does not exist">
              <ecl:command>chkconfig ypbind</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «ypbind» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «ypbind» is «off»">
              <ecl:command>chkconfig ypbind</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0311" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable NIS Server Processes If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is there a mission-critical reason why this machine must be an NIS server? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p style="margin-bottom: 0in">chkconfig ypserv on<br/>chkconfig yppasswdd on </p>
        <h3>Discussion: </h3>
        <p>Unless this site must use NIS, it should be avoided. While it can be very useful for transparently scaling
          the number of workstations, it is not well designed for security. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--Service «ypserv» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «ypserv» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «ypserv» does not exist">
                <ecl:command>chkconfig ypserv</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «ypserv» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «ypserv» is «off»">
                <ecl:command>chkconfig ypserv</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «yppasswd» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «yppasswd» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «yppasswd» does not exist">
                <ecl:command>chkconfig yppasswd</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «yppasswd» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «yppasswd» is «off»">
                <ecl:command>chkconfig yppasswd</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0312" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable RPC Portmap Process If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Are any of the following statements true? </p>
        <ul>
          <li>
            <p>This machine is an NFS client or server </p>
          </li>
        </ul>
        <ul>
          <li>
            <p>This machine is an NIS (YP) or NIS+ client or server </p>
          </li>
          <li>
            <p>The machine runs a third-party software application which is dependent on RPC support </p>
          </li>
        </ul>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig portmap on </p>
        <h3>Discussion: </h3>
        <p>RPC-based services typically use very weak or non-existent authentication and yet may share very sensitive
          information. Unless one of the services listed above is required on this machine, best to disable RPC-based
          tools completely. If there is uncertainty in whether or not a particular third-party application requires RPC
          services, consult with the application vendor. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «portmap» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «portmap» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «portmap» does not exist">
              <ecl:command>chkconfig portmap</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «portmap» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «portmap» is «off»">
              <ecl:command>chkconfig portmap</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0313" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable ncpfs Script If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this machine sharing files via the NFS, Novell Netware or Windows file sharing protocols? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig ncpfs on </p>
        <h3>Discussion: </h3> Note: This service is not necessarily installed by default, therefore the above command
        may fail.<br/><br/><p>If there are no network file sharing protocols being used, one can deactivate the netfs script. This script
          mounts network drives on the client. Though this is not a persistent daemon and thus not so dangerous,
          thinning out the /etc/rc.d/rcN.d directories makes the system much easier to audit. </p></xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «ncpfs» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «ncpfs» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «ncpfs» does not exist">
              <ecl:command>chkconfig ncpfs</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «ncpfs» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «ncpfs» is «off»">
              <ecl:command>chkconfig ncpfs</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0314" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable Printer Daemon Processes If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this system a print server, or is there a mission-critical reason why users must submit print jobs from
          this system? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig lpd on <br/><br/># Following added to undo Bastille change:<br/># SuSE Linux uses cups and symlinks
          to lpr<br/># if symlink exists, this is a cups system <br/>if [ -L /usr/bin/lpr ]; then<br/> chmod 0755
          /usr/bin/lpr* /usr/bin/lprm*<br/> chmod 0755 /usr/bin/lpq* /usr/bin/lpstat*<br/>else<br/> chmod 0755
          /usr/bin/lpr /usr/bin/lprm /usr/bin/lpq <br/>fi<br/><br/><br/></p>
        <h3>Discussion: </h3>
        <p>If users will never print files from this machine and the system will never be used as a print server by
          other hosts on the network, then it is safe to disable the print daemon, lpd. The Unix print servers have
          generally had a poor security record – be sure to keep up-to-date on vendor patches. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «lpd» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «lpd» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «lpd» does not exist">
              <ecl:command>chkconfig lpd</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «lpd» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «lpd» is «off»">
              <ecl:command>chkconfig lpd</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0315" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable Web Server Processes If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is there a mission-critical reason why this system must run a Web server? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>
          <i>
            <b>Please read the discussion before executing these commands and select the appropriate command.</b>
          </i>
        </p>
        <p>chkconfig apache2 on</p>
        <h3>Discussion: </h3>
        <p>Even if this machine is a web server, the local site may choose not to use the web server provided with Linux
          in favor of a locally developed and supported Web environment. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «apache2» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «apache2» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «apache2» does not exist">
              <ecl:command>chkconfig apache2</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «apache2» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «apache2» is «off»">
              <ecl:command>chkconfig apache2</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0316" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable SNMP Processes If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Are hosts at this site remotely monitored by a tool (e.g., HP OpenView, MRTG, Cricket) that relies on SNMP? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig snmpd on</p>
        <h3>Discussion: </h3>
        <p>If SNMP is used to monitor the hosts on this network, experts recommend changing the default community string
          used to access data via SNMP. On SuSE Linux systems, this parameter has already been changed to a reasonably
          secure setting in the file /etc/snmpd.conf. </p>
        <p>No further action is required.</p>
        <p>Note: In a large Enterprise that relied heavily on SNMP, it was discovered during the Linux rollout that SNMP
          was not a critical service, and not having it enabled increased the security posture of the servers. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «snmpd» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «snmpd» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «snmpd» does not exist">
              <ecl:command>chkconfig snmpd</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «snmpd» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «snmpd» is «off»">
              <ecl:command>chkconfig snmpd</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0317" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable DNS Server Process If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this machine a DNS server, or name server, for this site? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig named on</p>
        <h3>Discussion: </h3>
        <p>Most of the machines in the organization do not need a DNS server running on the box. Unless this is one of
          the organization's name servers, it is safe to shut this down. </p>
        <p>If this must be left active, please patch often and consider tightening the configuration. One highly
          suggested configuration is to bind the DNS server program in a chroot environment. This significantly
          restricts the resources that the DNS server has access to on the system, reducing this set to the minimum
          required for the program to function properly. The BIND name server that most machines run has had major
          security problems recently. </p>
        <p>Additionally, consider the use of Access Control Lists (ACL's) in /etc/named.conf to limit who can query your
          name server. For example, Internal name servers should not respond to outside requests. Large Enterprises run
          multiple name servers so this should not be an issue. However, smaller organizations may not be able to deploy
          internal and external name servers and should consider this precaution. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «named» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «named» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «named» does not exist">
              <ecl:command>chkconfig named</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «named» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «named» is «off»">
              <ecl:command>chkconfig named</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0318" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable SQL Server Processes If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this machine an SQL (database) server? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>
          <i>
            <b>Please read the discussion before executing these commands and select the appropriate command.</b>
          </i>
        </p>
        <p>chkconfig postgresql on<br/>chkconfig mysql on </p>
        <h3>Discussion: </h3>
        <p>If this machine does not need to run the mainstream database (SQL) servers Postgres or MySQL, it is safe to
          deactivate them. If you need to enable them, issue the command (above) for the database that you installed.
        </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--Service «postgresql» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «postgresql» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «postgresql» does not exist">
                <ecl:command>chkconfig postgresql</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «postgresql» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «postgresql» is «off»">
                <ecl:command>chkconfig postgresql</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service «mysql» does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «mysql» does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service «mysql» does not exist">
                <ecl:command>chkconfig mysql</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service «mysql» is «off»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service «mysql» is «off»">
                <ecl:command>chkconfig mysql</ecl:command>
                <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                  <ecl:regex-group group="1" op="eq" value="off"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0319" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Only Enable Webmin Processes If Absolutely Necessary</xccdf:title>
      <xccdf:description>
        <p>Not Applicable to SuSE, This section is retained for consistency with the other Linux Benchmarks. </p>
      </xccdf:description>
    </xccdf:Rule>
    <xccdf:Rule id="r0320" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable Squid Cache Server If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Do you use the squid web cache to speed up web transactions? </p>
        <p>If the answer to this question is yes, proceed with the actions below. </p>
        <h3>Action: </h3>
        <p>chkconfig squid on</p>
        <h3>Discussion: </h3>
        <p>Squid can actually be beneficial to security, as it imposes a proxy between the client and server. On the
          other hand, if it is not being used, it should be deactivated and removed. This deactivation decreases the
          risk of system compromise should a security vulnerability later be discovered in Squid. Finally, if your site
          does used Squid, do configure it carefully. Many Squid caches are badly configured to either allow outsider
          attackers to probe internal machines through the firewall or to use the cache to hide their true source IP
          address from their target hosts. Each site should configure Squid to not allow people outside their perimeter
          to use the cache without authentication of some sort. A better deployment for squid is on a server with no
          external-facing network interface (unless you are using it for a reverse web proxy, which is a very specific
          installation, and beyond the scope of this benchmark). </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «squid» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «squid» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «squid» does not exist">
              <ecl:command>chkconfig squid</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «squid» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «squid» is «off»">
              <ecl:command>chkconfig squid</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0321" role="full" selected="false" weight="1.0">
      <xccdf:title>Only Enable hwscan Hardware Detection If Absolutely Necessary </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Does the site absolutely need to allow users at the console to add hardware to the system?</p>
        <p>If the answer to this question is yes, then perform the action below. </p>
        <h3>Action: </h3>
        <p>chkconfig hwscan on</p>
        <h3>Discussion: </h3>
        <p>Hwscan is SuSE Linux's hardware detection program, which is normally set to run during system startup. It
          detects changes in hardware and, without demanding authentication of any sort, allows the user at the console
          to configure that hardware. This lack of authentication presents the primary danger – any user sitting at the
          console during a reboot can configure any new devices added to the system. </p>
        <p>This configuration is an unnecessary risk for most sites, with the exception of those that need to allow
          users to easily make hardware changes without having a root password. Sites in the exception class might need
          to allow students to connect external hard drives, backup drives or other potentially common external devices. </p>
        <p>If you deactivate this rc-script, hwscan is still accessible. To run hwscan after installing new hardware,
          run /etc/init.d/hwscan start at the shell prompt while logged in as root. </p>
        <p>
          <br/>
          <br/>
        </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <!--Service «hwscan» does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «hwscan» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «hwscan» does not exist">
              <ecl:command>chkconfig hwscan</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «hwscan» is «off»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service «hwscan» is «off»">
              <ecl:command>chkconfig hwscan</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
                <ecl:regex-group group="1" op="eq" value="off"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="g04">
    <xccdf:title>Kernel Tuning</xccdf:title>
    <xccdf:description>This section describes additional measures that may be taken to provide protection on the kernel level. </xccdf:description>
    <xccdf:Rule id="r0401" role="full" selected="false" weight="1.0">
      <xccdf:title>Network Parameter Modifications </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p style="margin-bottom: 0in">cat &lt;&lt;END_SCRIPT &gt;&gt; /etc/sysctl.conf<br/># Following
          11 lines added by CISecurity Benchmark sec 4.1<br/>net.ipv4.tcp_max_syn_backlog =
          4096<br/>net.ipv4.tcp_syncookies=1<br/>net.ipv4.conf.all.rp_filter =
          1<br/>net.ipv4.conf.all.accept_source_route = 0<br/>net.ipv4.conf.all.accept_redirects =
          0<br/>net.ipv4.conf.all.secure_redirects = 0<br/>net.ipv4.conf.default.rp_filter =
          1<br/>net.ipv4.conf.default.accept_source_route = 0<br/>net.ipv4.conf.default.accept_redirects =
          0<br/>net.ipv4.conf.default.secure_redirects = 0<br/>net.ipv4.icmp_echo_ignore_broadcasts = 1 </p>
        <p>END_SCRIPT<br/>chown root:root /etc/sysctl.conf<br/>chmod 0600 /etc/sysctl.conf<br/> printf
          "/etc/sysctl.conf\troot.root\t600\n" &gt;&gt; \<br/> /etc/permissions.local<br/>diff
          /etc/sysctl.conf-preCIS /etc/sysctl.conf </p>
        <h3>Discussion: </h3>
        <p>For an explanation of some of these parameters, see <br/>/Documentation/networking/ip-sysctl.txt in your
          local copy of the kernel source or read the latest from the cross-referencing Linux site: <a href="http://lxr.linux.no/source/Documentation/networking/ip-sysctl.txt" shape="rect">http://lxr.linux.no/source/Documentation/networking/ip-sysctl.txt</a>. </p>
        <p>See also SN.9 for additional security-related tunings that you may want to consider.</p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.tcp_max_syn_backlog equals «4096».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.tcp_max_syn_backlog equals «4096»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.tcp_max_syn_backlog` = 4096 || sysctl net.ipv4.tcp_max_syn_backlog</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.tcp_syncookies equals «1».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.tcp_syncookies equals «1»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.tcp_syncookies` = 1 || sysctl net.ipv4.tcp_syncookies</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.conf.all.rp_filter equals «1».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.conf.all.rp_filter equals «1»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.conf.all.rp_filter` = 1 || sysctl net.ipv4.conf.all.rp_filter</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.conf.all.accept_source_route equals «0».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.conf.all.accept_source_route equals «0»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.conf.all.accept_source_route` = 0 || sysctl
                net.ipv4.conf.all.accept_source_route</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.conf.all.accept_redirects equals «0».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.conf.all.accept_redirects equals «0»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.conf.all.accept_redirects` = 0 || sysctl
                net.ipv4.conf.all.accept_redirects</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.conf.all.secure_redirects equals «0».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.conf.all.secure_redirects equals «0»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.conf.all.secure_redirects` = 0 || sysctl
                net.ipv4.conf.all.secure_redirects</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.conf.default.rp_filter equals «1».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.conf.default.rp_filter equals «1»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.conf.default.rp_filter` = 1 || sysctl
                net.ipv4.conf.default.rp_filter</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.conf.default.accept_source_route equals «0».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.conf.default.accept_source_route equals «0»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.conf.default.accept_source_route` = 0 || sysctl
                net.ipv4.conf.default.accept_source_route</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.conf.default.accept_redirects equals «0».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.conf.default.accept_redirects equals «0»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.conf.default.accept_redirects` = 0 || sysctl
                net.ipv4.conf.default.accept_redirects</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.conf.default.secure_redirects equals «0».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.conf.default.secure_redirects equals «0»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.conf.default.secure_redirects` = 0 || sysctl
                net.ipv4.conf.default.secure_redirects</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.icmp_echo_ignore_broadcasts equals «1».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.icmp_echo_ignore_broadcasts equals «1»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.icmp_echo_ignore_broadcasts` = 1 || sysctl
                net.ipv4.icmp_echo_ignore_broadcasts</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:complex-check operator="AND">
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/sysctl.conf ownership and permission-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="/etc/sysctl.conf ownership and permission">
                  <ecl:command>find /etc/sysctl.conf -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+rwx -ls</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
                <ecl:shell-command check="all" comment="/etc/sysctl.conf permissions correct in /etc/permissions.local" success="pass">
                <ecl:command>egrep '^/etc/sysctl\.conf[[:space:]]+root\.root[[:space:]]+0?600$' /etc/permissions.local</ecl:command>
                <ecl:line-selection op="pm" value="^.*$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0402" role="full" selected="false" weight="1.0">
      <xccdf:title>Additional Network Parameter Modifications </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is this system going to be used as a firewall or gateway to pass network traffic between different networks? </p>
        <p>If the answer to this question is no, then perform the action below. </p>
        <h3>Action: </h3>
        <p>cat &lt;&lt;END_SCRIPT &gt;&gt; /etc/sysctl.conf<br/># Following 3 lines added by CISecurity
          Benchmark sec 4.2<br/>net.ipv4.ip_forward = 0<br/>net.ipv4.conf.all.send_redirects =
          0<br/>net.ipv4.conf.default.send_redirects = 0<br/>END_SCRIPT<br/>chown root:root /etc/sysctl.conf<br/>chmod
          0600 /etc/sysctl.conf<br/>printf "/etc/sysctl.conf\troot.root\t600\n" &gt;&gt; \<br/>
          /etc/permissions.local<br/>diff /etc/sysctl.conf-preCIS /etc/sysctl.conf </p>
        <h3>Discussion: </h3>
        <p>For an explanation of some of these parameters, read the latest from the cross-referencing Linux site: <a href="http://lxr.linux.no/source/Documentation/networking/ip-sysctl.txt" shape="rect">http://lxr.linux.no/source/Documentation/networking/ip-sysctl.txt</a>. </p>
        <p>
          <br/>
          <br/>
        </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.ip_forward equals «0».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.ip_forward equals «0»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.ip_forward` = 0 || sysctl net.ipv4.ip_forward</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.conf.all.send_redirects equals «0».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.conf.all.send_redirects equals «0»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.conf.all.send_redirects` = 0 || sysctl
                net.ipv4.conf.all.send_redirects</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sysctl variable net.ipv4.conf.default.send_redirects equals «0».-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="sysctl variable net.ipv4.conf.default.send_redirects equals «0»." success="pass">
              <ecl:command>test `sysctl -n net.ipv4.conf.default.send_redirects` = 0 || sysctl
                net.ipv4.conf.default.send_redirects</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:complex-check operator="AND">
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/sysctl.conf ownership and permission-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="/etc/sysctl.conf ownership and permission">
                  <ecl:command>find /etc/sysctl.conf -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+rwx -ls</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
                <ecl:shell-command check="all" comment="/etc/sysctl.conf permissions correct in /etc/permissions.local" success="pass">
                <ecl:command>egrep '^/etc/sysctl\.conf[[:space:]]+root\.root[[:space:]]+0?600$' /etc/permissions.local</ecl:command>
                <ecl:line-selection op="pm" value="^.*$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="syslog">
    <xccdf:title>Logging</xccdf:title>
    <xccdf:description>
      <p>The items in this section cover enabling various different forms of system logging in order to keep track of
        activity on the system.</p>
    </xccdf:description>
    <xccdf:Rule id="syslog-ng_enabled" role="full" selected="false" weight="1.0">
      <xccdf:title>Ensuer Syslog NG is Enabled</xccdf:title>
      <xccdf:description>
        <p>SLES uses <a href="http://www.balabit.hu/products/syslog-ng/">syslog-ng</a> for system logging. The file
            <span>/var/log/messages</span> will contain most messages, with iptables, mail, and news messages sent to
          separate files (/var/log/firewall, /var/log/mail*, and /var/log/news/* respectively). File permissions are by
          default set to <span>u=rw,g=r,o=</span>.</p>
        <p>The syslog-ng reference manual can be found on the local system at
            <span>file:///usr/share/doc/packages/syslog-ng/html/book1.html</span>.</p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="Service «syslog» is «on»">
            <ecl:command>chkconfig syslog</ecl:command>
            <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
              <ecl:regex-group group="1" op="eq" value="on"/>
            </ecl:line-selection>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="NTP_enabled" role="full" selected="false" weight="1.0">
      <xccdf:title>NTP enabled</xccdf:title>
      <xccdf:description>
        <p>Because it is often necessary to correlate log information from many different systems (particularly after a
          security incident) experts recommend establishing some form of time synchronization among systems and devices
          connected to the local network. The standard Internet protocol for time synchronization is the Network Time
          Protocol (NTP), which is supported by most network-ready devices. More information on NTP can be found at
          http://www.ntp.org and
          http://www.ibiblio.org/pub/Linux/docs/HOWTO/otherformats/html_single/TimePrecision-HOWTO.html.</p>
      </xccdf:description>
      <xccdf:rationale>
        <p>Because it is often necessary to correlate log information from many different systems (particularly after a
          security incident) experts recommend establishing some form of time synchronization among systems and devices
          connected to the local network. The standard Internet protocol for time synchronization is the Network Time
          Protocol (NTP), which is supported by most network-ready devices. More information on NTP can be found at
          http://www.ntp.org and
          http://www.ibiblio.org/pub/Linux/docs/HOWTO/otherformats/html_single/TimePrecision-HOWTO.html.</p>
      </xccdf:rationale>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="Service «ntp» is «on»">
            <ecl:command>chkconfig ntp</ecl:command>
            <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$">
              <ecl:regex-group group="1" op="eq" value="on"/>
            </ecl:line-selection>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="log_file_permissions" role="full" selected="false" weight="1.0">
      <xccdf:title>System log file permissions</xccdf:title>
      <xccdf:description>
        <p>Ensure system log file ownership and permissions are correct.</p>
        <p>Log file permissions are dictated by the <span>/etc/syslog-ng/syslog-ng.conf.in</span> file as well as
          configuration files in <span>/etc/logrotate.d</span>.</p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!-- check permissions based on system settings -->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="System log file permissions" success="pass">
            <ecl:command>. /etc/sysconfig/security; for target in `find /var/log -print`; do for perm in
              $PERMISSION_SECURITY; do chkstat --examine $target /etc/permissions.$perm; done; done</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="remote_logging" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Configure remote system logging</xccdf:title>
      <xccdf:description>
        <p>Configure system logging to send logs to a remote logging system in addition to the local system.</p>
      </xccdf:description>
      <xccdf:warning category="general">
        <p>Accurate system clocks are essential. Use NTP on all systems.</p>
      </xccdf:warning>
      <xccdf:rationale>
        <p>By duplicating log records to a separate system, they are preserved in the event of system failure or
          compromise. Collection of events from a number of systems allows correlation. </p>
      </xccdf:rationale>
      <xccdf:fixtext>
        <p>syslog-ng can log via udp or tcp. Unless continual availability of the remote logging system can be assured,
          udp should be used (as tcp is a reliable transport and will buffer at the source). Use of udp will cause log
          records to be sent as they are generated, and of course the intervening network and destination system must be
          reliable enough to prevent datagram loss.</p>
        <p>In the <span>/etc/syslog-ng.conf.in</span> file, declare a destination for logging, e.g., <span>destination
            remote_loghost {udp("loghost.site");};</span> (if using udp), or <span>destination remote_loghost
            {tcp("loghost.site");};</span> (if using tcp). This destination can be used in a <span>log</span> directive
          , e.g., <span>log { source(src); filter(f_messages); destination(remote_loghost); };</span>, which duplicates
          the content that is found in the <span>/var/log/messages</span> file in the default configuration.</p>
      </xccdf:fixtext>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="g06">
    <xccdf:title>File/Directory Permissions/Access </xccdf:title>
    <xccdf:description>
      <xhtml:p>File and directory permission control is one of the greatest challenges of secure system 
        administration. The system administrator can and should monitor and secure permissions 
        on system files and directories, but has little control over user-owned files and directories. 
        This section provides guidance on how to secure system files and directories, set secure 
        defaults for users and monitor file permissions.</xhtml:p>
    </xccdf:description>
    <xccdf:Rule id="r0601" role="full" selected="false" weight="1.0">
      <xccdf:title>Add 'nodev' Option To Appropriate Partitions In /etc/fstab</xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>cp -p /etc/fstab /etc/fstab.tmp<br/>awk '($3 ~ /^ext[23]$|^reiserfs$/ &amp;&amp; $2 != "/") \<br/> {
          $4 = $4 ",nodev" }; \<br/> { print }' /etc/fstab.tmp &gt; /etc/fstab<br/>chown root:root
          /etc/fstab<br/>chmod 0644 /etc/fstab<br/>printf "/etc/fstab \troot.root\t644\n" &gt;&gt; \<br/>
          /etc/permissions.local<br/>rm -f /etc/fstab.tmp<br/>diff /etc/fstab-preCIS /etc/fstab </p>
        <h3>Discussion: </h3>
        <p>Placing "nodev" on these partitions prevents users from mounting unauthorized devices on any partitions that
          we know should not contain devices. There should be little need to mount devices on any partitions other than
          /dev. </p>
        <p>One notable exception, of course, is the case where system programs are being placed into "chroot jails"-
          these often require that several devices be created in the chroot directory. If you are using chroot jails on
          your machines, you should be careful with the nodev option. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--Add 'nodev' Option To Appropriate Partitions In /etc/fstab-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test «egrep '/[^\s#]+\s+(ext[23]|reiserfs)\s+' /etc/fstab|egrep -v '([^\s]+\s+){3}.*nodev.*\s+'»">
              <ecl:command>egrep '/[^\s#]+\s+(ext[23]|reiserfs)\s+' /etc/fstab|egrep -v '([^\s]+\s+){3}.*nodev.*\s+'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/fstab ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/fstab ownership and permission">
                <ecl:command>find /etc/fstab -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
              <ecl:shell-command check="all" comment="/etc/fstab permissions correct in /etc/permissions.local" success="pass">
              <ecl:command>egrep '^/etc/fstab[[:space:]]+root\.root[[:space:]]+0?644$' /etc/permissions.local</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0602" role="full" selected="false" weight="1.0">
      <xccdf:title>Add 'nosuid' and 'nodev' Option For Removable Media In /etc/fstab </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>cp -p /etc/fstab /etc/fstab.tmp<br/>awk '($2 ~ /^\/m.*\/(floppy|cdrom)$/) \<br/> { $4 = $4 ",nosuid,nodev" };
          \<br/> { print }' /etc/fstab.tmp &gt; /etc/fstab<br/>chown root:root /etc/fstab<br/>chmod 0644
          /etc/fstab<br/>rm -f /etc/fstab.tmp<br/>diff /etc/fstab-preCIS /etc/fstab </p>
        <h3>Discussion: </h3>
        <p>Removable media is one vector by which malicious software can be introduced onto the system. By forcing these
          file systems to be mounted with the nosuid option, the administrator prevents users from bringing set-UID
          programs onto the system via CDROMs and floppy disks. We also force these filesystems to mount with the nodev
          option, as explained in item 6.1. </p>
        <p>If this machine has multiple CD-ROM or floppy drives, additional action must be taken. Simply add nosuid to
          the fourth field for the /etc/fstab lines that reference those drives. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--Add 'nosuid' and 'nodev' Option For Removable Media In /etc/fstab-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test «grep 'media/' /etc/fstab|grep -v 'nosuid';grep 'media/' /etc/fstab|grep -v 'nodev'»">
              <ecl:command>grep 'media/' /etc/fstab|grep -v 'nosuid';grep 'media/' /etc/fstab|grep -v 'nodev'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/fstab ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/fstab ownership and permission">
                <ecl:command>find /etc/fstab -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0603" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable User-Mounted Removable File Systems </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Is there a mission-critical reason to allow unprivileged users to mount CD-ROMs and floppy disk file systems
          on this system? </p>
        <p>If the answer to this question is no, then perform the action below. </p>
        <h3>Action: </h3>
        <p lang="fr-CA" style="margin-bottom: 0in">cp -p /etc/fstab /etc/fstab.tmp<br/>cat /etc/fstab.tmp | \ </p>
        <p style="margin-bottom: 0in">sed 's|\( /media/[fc].* *subfs .*[ ,]\)'\</p>
        <p style="margin-bottom: 0in">'user\([ ,]\)|\1nouser\2|' |\</p>
        <p style="margin-bottom: 0in">sed 's|\( /media/[fc].* <span lang="fr-CA">*subfs .*[ ,]\)'\</span></p>
        <p lang="fr-CA" style="margin-bottom: 0in">'users\([ ,]\)|\1nouser\2|' &gt; /etc/fstab</p>
        <p lang="fr-CA">chown root:root /etc/fstab<br/>chmod 0644 /etc/fstab<br/>rm -f /etc/fstab.tmp<br/>diff
          /etc/fstab-preCIS /etc/fstab </p>
        <h3>Discussion: </h3>
        <p>In SLES, only the root user can mount removable media such as a floppy or cdrom for use, by default. However
          if /etc/fstab has been changed to allow user mounting, then this item will remove the risk posed by user
          mounting. </p>
        <p>Allowing users to mount and access data from removable media drives makes it easier for malicious programs
          and data to be imported onto the network or data to be removed from the server. </p>
        <p>This item examines the floppy and cdrom media entries in /etc/fstab and changes the user or users option to
          nouser (thereby preventing user mounting). </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test «egrep '^[^[:space:]]+[[:space:]]+/media/.+[[:space:]]+' /etc/fstab|egrep nouser»-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="command test «egrep '^[^[:space:]]+[[:space:]]+/media/.+[[:space:]]+' /etc/fstab|egrep nouser»" success="pass">
            <ecl:command>egrep '^[^[:space:]]+[[:space:]]+/media/.+[[:space:]]+' /etc/fstab|egrep nouser</ecl:command>
            <ecl:line-selection op="pm" value="^.*$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0604" role="full" selected="false" weight="1.0">
      <xccdf:title>Verify passwd, shadow, and group File Permissions </xccdf:title>
      <xccdf:description>
        <p>There are the default owners and access permissions for these files. It is worthwhile to periodically check
          these file permissions as there have been package defects that changed /etc/shadow permissions to 644.
          Tripwire (<a href="http://www.tripwire.org/downloads/index.php" shape="rect">http://www.tripwire.org/downloads/index.php</a>) and AIDE (<a href="http://sourceforge.net/projects/aide" shape="rect">http://sourceforge.net/projects/aide</a>) – the successor to Tripwire – are excellent products
          for alerting you to changes in these files. Whereas AIDE is an improvement to the non-commercial version of
          Tripwire, it is still listed as Beta software, and may not be suitable for Enterprise Production systems. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/passwd permissions" success="pass">
              <ecl:command>. /etc/sysconfig/security; for perm in $PERMISSION_SECURITY; do chkstat --examine /etc/passwd
                /etc/permissions.$perm; done</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/group permissions" success="pass">
              <ecl:command>. /etc/sysconfig/security; for perm in $PERMISSION_SECURITY; do chkstat --examine /etc/group
                /etc/permissions.$perm; done</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/shadow permissions" success="pass">
              <ecl:command>. /etc/sysconfig/security; for perm in $PERMISSION_SECURITY; do chkstat --examine /etc/shadow
                /etc/permissions.$perm; done</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0605" role="full" selected="false" weight="1.0">
      <xccdf:title>World-Writable Directories Should Have Their Sticky Bit Set </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>The automated tool supplied with this benchmark will flag world-writable directories that do not have the
          sticky bit set. </p>
        <p>Administrators who wish to obtain a list of these directories may execute the following commands: </p>
        <p>for PART in `awk '($3 ~ "ext2|ext3|reiserfs") \<br/> { print $2 }' /etc/fstab`; do<br/> find $PART -xdev
          -type d \<br/> \( -perm -0002 -a ! -perm -1000 \) -print<br/>done </p>
        <h3 style="font-weight: medium">
          <br/>
          <br/>
        </h3>
        <p>There should be no entries returned.</p>
        <h3>Discussion: </h3>
        <p>When the so-called "sticky bit" is set on a directory, then only the owner of a file may remove that file
          from the directory (as opposed to the usual behavior where anybody with write access to that directory may
          remove the file). Setting the sticky bit prevents users from overwriting each other's files, whether
          accidentally or maliciously, and is generally appropriate for most world-writable directories. However,
          consult appropriate vendor documentation before blindly applying the sticky bit to any world writable
          directories found in order to avoid breaking any application dependencies on a given directory. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--World-Writable Directories Should Have Their Sticky Bit Set-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «for PART in `awk '($3 ~ &quot;ext2|ext3|reiserfs&quot;) { print $2 }' /etc/fstab`; do find $PART -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -ls; done»">
            <ecl:command>for PART in `awk '($3 ~ "ext2|ext3|reiserfs") { print $2 }' /etc/fstab`; do find $PART -xdev
              -type d \( -perm -0002 -a ! -perm -1000 \) -ls; done</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0606" role="full" selected="false" weight="1.0">
      <xccdf:title>Find Unauthorized World-Writable Files </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>The automated testing tool supplied with this benchmark will flag unexpected world-writable files on the
          system. </p>
        <p>Administrators who wish to obtain a list of the world-writable files currently installed on the system may
          run the following commands: </p>
        <p>for PART in `awk '($6 != "0") { print $2 }' /etc/fstab`; do<br/> find $PART -xdev -type f \<br/> \( -perm
          -0002 -a ! -perm -1000 \) -print<br/>done </p>
        <p>There should be no entries returned. If grub.conf shows up, its permissions will be adjusted in step 7.8.</p>
        <h3>Discussion: </h3>
        <p>Data in world-writable files can be modified and compromised by any user on the system. World-writable files
          may also indicate an incorrectly written script or program that could potentially be the cause of a larger
          compromise to the system's integrity. Generally removing write access for the "other" category (chmod o-w
          &lt;filename&gt;) is advisable, but always consult relevant vendor documentation in order to avoid
          breaking any application dependencies on a given file. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Unauthorized World-Writable Files-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «for PART in `awk '(!/^#/ &amp;&amp; $6 != &quot;0&quot;) { print $2 }' /etc/fstab`; do find $PART -xdev -type f \( -perm -0002 -a ! -perm -1000 \) -ls 2&gt;/dev/null; done»">
            <ecl:command>for PART in `awk '(!/^#/ &amp;&amp; $6 != "0") { print $2 }' /etc/fstab`; do find $PART
              -xdev -type f \( -perm -0002 -a ! -perm -1000 \) -ls 2&gt;/dev/null; done</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0607" role="full" selected="false" weight="1.0">
      <xccdf:title>Find Unauthorized SUID/SGID System Executables </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>The automated testing tool supplied with this benchmark will flag unexpected set-UID and set-GID applications
          on the system. </p>
        <p>Administrators who wish to obtain a list of the set-UID and set-GID programs currently installed on the
          system may run the following commands: </p>
        <p>for PART in `awk '($6 != "0") { print $2 }' /etc/fstab`; do<br/> find $PART \( -perm -04000 -o -perm -02000
          \) \<br/> -type f -xdev -print<br/>done </p>
        <h3>Discussion: </h3>
        <p>The administrator should take care to ensure that no rogue set-UID programs have been introduced into the
          system. In addition, if possible, the administrator should attempt a Set-UID audit and reduction. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Unauthorized SUID/SGID System Executables-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «for PART in `awk '(!/^#/ &amp;&amp; $6 != &quot;0&quot;) { print $2 }' /etc/fstab`; do find $PART \( -perm -04000 -o -perm -02000 \) -type f -xdev -ls 2&gt;/dev/null; done»">
            <ecl:command>for PART in `awk '(!/^#/ &amp;&amp; $6 != "0") { print $2 }' /etc/fstab`; do find $PART
              \( -perm -04000 -o -perm -02000 \) -type f -xdev -ls 2&gt;/dev/null; done</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0608" role="full" selected="false" weight="1.0">
      <xccdf:title>Find All Unowned Files</xccdf:title>
      <xccdf:description>
        <h3>Action:</h3>
        <p>for PART in `awk '($6 != "0") { print $2 }' /etc/fstab`; do<br/> find $PART -nouser -o -nogroup
          -print<br/>done </p>
        <p>There should be no entries returned.</p>
        <h3>Discussion:</h3>
        <p>Do not allow any unowned files on your system. Unowned files may be an indication an intruder has accessed
          your system or improper package maintenance/installation. Sometimes a package removal results in unowned files
          or directories related to this software as the user/group associated with that package is removed, but that
          user's files (i.e., files changed after the package was installed) are left behind. Another common cause is
          the installation of software that does not properly set file ownerships. </p>
        <p>Files in any NFS mounts may be ignored as the user ID mapping between systems may be out of sync. If your
          Enterprise uses a central user management system (NIS or LDAP), the presence of unowned files may indicate
          another problem and should be investigated. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Unowned Files-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «for PART in `awk '(!/^#/ &amp;&amp; $6 != &quot;0&quot;) { print $2 }' /etc/fstab`; do find $PART -xdev \( -nouser -o -nogroup \) -ls 2&gt;/dev/null; done»">
            <ecl:command>for PART in `awk '(!/^#/ &amp;&amp; $6 != "0") { print $2 }' /etc/fstab`; do find $PART
              -xdev \( -nouser -o -nogroup \) -ls 2&gt;/dev/null; done</ecl:command>
            <ecl:line-selection op="pm" value="^.+$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0609" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable USB Devices (AKA Hotplugger)</xccdf:title>
      <xccdf:description>
        <p>Hotplugger cannot be removed without removing xfree86. Removing the X server is beyond the scope of this
          Benchmark. This section is retained for consistency with the other Linux Benchmarks. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--Package «hotplug» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Package hotplug does not exist" success="fail">
              <ecl:command>rpm --quiet -q hotplug</ecl:command>
              <ecl:line-selection op="pm" value=".*"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Package «pcmcia» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Package «pcmcia» does not exist" success="fail">
              <ecl:command>rpm --quiet -q pcmcia</ecl:command>
              <ecl:line-selection op="pm" value=".*"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Package «pcmcia-cardinfo» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Package «pcmcia-cardinfo» does not exist" success="fail">
              <ecl:command>rpm --quiet -q pcmcia-cardinfo</ecl:command>
              <ecl:line-selection op="pm" value=".*"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="g07">
    <xccdf:title>System Access, Authentication, and Authorization </xccdf:title>
    <xccdf:description>
      <xhtml:div>Access Control is a huge security issue that relies on organization policies and procedures to manage. The actions
        describes in this section are just a few measures that can be taken on a system level to control access to services. It is
        strongly advised that organizations have a mechanism in place to authorized access privileges and to revoke that
        authorization. </xhtml:div>
    </xccdf:description>
    <xccdf:Rule id="r0701" role="full" selected="false" weight="1.0">
      <xccdf:title>Remove .rhosts Support In PAM Configuration Files </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>for FILE in /etc/pam.d/*; do<br/> grep -v rhosts_auth $FILE &gt; ${FILE}.tmp<br/> mv -f ${FILE}.tmp
          $FILE<br/> chown root:root $FILE<br/> chmod 644 $FILE<br/> printf "$FILE \troot.root\t644\n" &gt;&gt;
          \<br/> /etc/permissions.local<br/>done </p>
        <h3>Discussion: </h3>
        <p>Used in conjunction with the BSD-style "r-commands" (rlogin, rsh, rcp), the <br/>.rhosts files implement a
          weak form of authentication based on the network address or host name of the remote computer (which can be
          spoofed by a potential attacker to exploit the local system). Disabling .rhosts support helps prevent users
          from subverting the system's normal access control mechanisms. </p>
        <p>If .rhosts support is required for some reason, some basic precautions should be taken when creating and
          managing .rhosts files. Never use the "+" wildcard character in <br/>.rhosts files. In fact, .rhosts entries
          should always specify a specific trusted host name along with the user name of the trusted account on that
          system (e.g., "trustedhost alice" and not just "trustedhost"). Avoid establishing trust relationships with
          systems outside of the organization's security perimeter and/or systems not controlled by the local
          administrative staff. Firewalls and other network security elements should actually block rlogin/rsh/rcp
          access from external hosts. </p>
        <p>Finally, make sure that .rhosts files are only readable by the owner of the file (i.e., these files should be
          mode 600). </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--no PAM rhosts_auth-->
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/pam.d/^.+$ text content">
            <ecl:path>/etc/pam.d/^.+$</ecl:path>
            <ecl:line-selection op="pm" value="^[^#].*rhosts_auth"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0702" role="full" selected="false" weight="1.0">
      <xccdf:title>Create ftpusers Files </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>for NAME in `cut -d: -f1 /etc/passwd`; do<br/> if [ `id -u $NAME` -lt 500 ]; then<br/> echo $NAME
          &gt;&gt; /etc/ftpusers<br/> fi <br/>done <br/>chown root:root /etc/ftpusers<br/>chmod 600
          /etc/ftpusers<br/>printf "/etc/ftpusers \troot.root\t644\n" &gt;&gt; \<br/>
          /etc/permissions.local<br/>diff /etc/ftpusers-preCIS /etc/ftpusers </p>
        <h3>Discussion: </h3>
        <p>/etc/ftpusers contains a list of users who <i>are not</i> allowed to access the system via vsftpd and
          lukem-ftpd. Generally, only normal users should ever access the system via FTP-there should be no reason for
          "system" type accounts to be transferring information via this mechanism. Certainly the root account should
          never be allowed to transfer files directly via FTP. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <!-- Add check for ftpusers content -->
        <xccdf:check system="http://cisecurity.org/check">
          <!-- check permissions based on system settings -->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/ftpuser permissions" success="pass">
              <ecl:command>. /etc/sysconfig/security; for perm in $PERMISSION_SECURITY; do chkstat --examine
                /etc/ftpuser /etc/permissions.$perm; done</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0703" role="full" selected="false" weight="1.0">
      <xccdf:title>Prevent X Server From Listening On Port 6000/tcp </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p style="margin-bottom: 0in">if [ -e /etc/X11/xdm/Xservers ]; then<br/> cd /etc/X11/xdm<br/> awk '($1 !~ /^#/
          &amp;&amp; $3 == "/usr/X11R6/bin/X" \ </p>
        <p> &amp;&amp; $0 !~ /-nolisten tcp/) \<br/> { $3 = $3 " -nolisten tcp" }; { print }' \<br/>
          Xservers-preCIS &gt; Xservers<br/> chown root:root Xservers<br/> chmod 444 Xservers<br/> printf
          "/etc/X11/xdm/Xservers \troot.root\t444\n" &gt;&gt; \<br/> /etc/permissions.local<br/> diff
          Xservers-preCIS Xservers<br/>fi </p>
        <p>
          <br/>if [ -e /etc/sysconfig/displaymanager ]; then<br/> cd /etc/sysconfig/<br/> cat displaymanager-preCIS | </p>
        <p> sed ‘s|\(DISPLAYMANAGER_XSERVER_TCP_PORT_6000_OPEN\)’\</p>
        <p>‘.*.yes.|\1=”no”|’ &gt; displaymanager <br/> chown root:root displaymanager<br/> chmod 644
          displaymanager<br/> printf "/etc/sysconfig/displaymanager \troot.root\t644\n" &gt;&gt; \<br/>
          /etc/permissions.local<br/> diff displaymanager-preCIS displaymanager <br/>fi </p>
        <h3>Discussion: </h3>
        <p>X servers listen on port 6000/tcp for messages from remote clients running on other systems. However, X
          Windows uses a relatively insecure authentication protocol and an attacker who is able to gain unauthorized
          access to the local X server can easily compromise the system. Invoking the "-nolisten tcp" option causes the
          X server not to listen on port 6000/tcp by default. This prevents authorized remote X clients from displaying
          windows on the local system as well. However, the forwarding of X events via SSH will still happen normally.
          This is the preferred and more secure method transmitting results from remote X clients in any event. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="AND">
          <!--/etc/X11/xdm/Xservers-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/X11/xdm/Xservers text content-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/X11/xdm/Xservers text content">
                <ecl:path>/etc/X11/xdm/Xservers</ecl:path>
                <ecl:line-selection op="pm" value="(^#.*$)|(^\s*$)|(^.*/usr/X11R6/bin/X -nolisten tcp.*$)"/>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/X11/xdm/Xservers ownership and permission-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="/etc/X11/xdm/Xservers ownership and permission">
                  <ecl:command>find /etc/X11/xdm/Xservers -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
                <ecl:shell-command check="all" comment="/etc/X11/xdm/Xservers permissions correct in /etc/permissions.local" success="pass">
                <ecl:command>egrep '^/etc/X11/xdm/Xservers[[:space:]]+root\.root[[:space:]]+0?444$' /etc/permissions.local</ecl:command>
                <ecl:line-selection op="pm" value="^.*$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="AND">
          <!--/etc/sysconfig/displaymanager-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «egrep '^DISPLAYMANAGER_XSERVER_TCP_PORT_6000_OPEN="no"[[:space:]]*$' /etc/sysconfig/displaymanager»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="command test «egrep '^DISPLAYMANAGER_XSERVER_TCP_PORT_6000_OPEN=&quot;no&quot;[[:space:]]*$' /etc/sysconfig/displaymanager»" success="pass">
                <ecl:command>egrep '^DISPLAYMANAGER_XSERVER_TCP_PORT_6000_OPEN="no"[[:space:]]*$'
                  /etc/sysconfig/displaymanager</ecl:command>
                <ecl:line-selection op="pm" value="^.*$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/sysconfig/displaymanager ownership and permission-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="/etc/sysconfig/displaymanager ownership and permission">
                  <ecl:command>find /etc/sysconfig/displaymanager -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
                <ecl:shell-command check="all" comment="/etc/sysconfig/displaymanager permissions correct in /etc/permissions.local" success="pass">
                <ecl:command>egrep '^/etc/sysconfig/displaymanager[[:space:]]+root\.root[[:space:]]+0?644$' /etc/permissions.local</ecl:command>
                <ecl:line-selection op="pm" value="^.*$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0704" role="full" selected="false" weight="1.0">
      <xccdf:title>
        <xccdf:sub idref="Bastille"/>Restrict at/cron To Authorized Users </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p style="margin-bottom: 0in">
          cd /etc<br/>rm -f cron.deny<br/>echo root &gt; cron.allow<br/>diff
          allow-preCIS cron.allow<br/>chown root:root cron.allow<br/>chmod 400 cron.allow<br/>printf "/etc/cron.allow
          \troot.root\t400\n" &gt;&gt; \<br/> /etc/permissions.local<br/>cd /etc<br/>rm -f at.deny<br/>echo root
          &gt; at.allow<br/>diff at.allow-preCIS at.allow<br/>chown root:root at.allow<br/>chmod 400
          at.allow<br/>printf "/etc/at.allow \troot.root\t400\n" &gt;&gt; \<br/>
          /etc/permissions.local<br/><br/></p>
        <h3>Discussion: </h3>
        <p>The cron.allow and at.allow files are a list of users who are allowed to run the crontab and at commands to
          submit jobs to be run at scheduled intervals. On many systems, only the system administrator needs the ability
          to schedule jobs. Note that even though a given user is not listed in cron.allow, cron jobs can still be run
          as that user. cron.allow only controls administrative access to the crontab command for scheduling and
          modifying cron jobs. </p>
      </xccdf:description>
        <xccdf:complex-check operator="AND">
            <xccdf:complex-check operator="OR">
                <xccdf:check system="http://cisecurity.org/check">
                    <xccdf:check-content>
                        <ecl:shell-command check="none exist" comment="/etc/cron.deny does not exist" success="fail">
                            <ecl:command>find /etc/cron.deny -follow -prune -exec ls -l {} \; 2&gt;/dev/null</ecl:command>
                            <ecl:line-selection op="pm" value=".+"/>
                        </ecl:shell-command>
                    </xccdf:check-content>
                </xccdf:check>
                <xccdf:check system="http://cisecurity.org/check">
                    <xccdf:check-content>
                        <ecl:shell-command check="none exist" comment="/etc/cron.deny is not empty" success="pass">
                            <ecl:command>[ -s /etc/cron.deny ]</ecl:command>
                        </ecl:shell-command>
                    </xccdf:check-content>
                </xccdf:check>
            </xccdf:complex-check>
            <xccdf:complex-check operator="OR">
                <xccdf:check system="http://cisecurity.org/check">
                    <xccdf:check-content>
                        <ecl:shell-command check="none exist" comment="/etc/at.deny does not exist" success="fail">
                            <ecl:command>find /etc/at.deny -follow -prune -exec ls -l {} \; 2&gt;/dev/null</ecl:command>
                            <ecl:line-selection op="pm" value=".+"/>
                        </ecl:shell-command>
                    </xccdf:check-content>
                </xccdf:check>
                <xccdf:check system="http://cisecurity.org/check">
                    <xccdf:check-content>
                        <ecl:shell-command check="none exist" comment="/etc/at.deny is not empty" success="pass">
                            <ecl:command>[ -s /etc/at.deny ]</ecl:command>
                        </ecl:shell-command>
                    </xccdf:check-content>
                </xccdf:check>
            </xccdf:complex-check>
            <xccdf:check system="http://cisecurity.org/check">
                <xccdf:check-content>
                    <ecl:shell-command check="none exist" comment="ensure root is the only user in cron.allow">
                        <ecl:command>egrep -v root /etc/cron.allow</ecl:command>
                        <ecl:line-selection op="pm" value="^.+$"/>
                    </ecl:shell-command>
                </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
                <xccdf:check-content>
                    <ecl:shell-command check="none exist" comment="ensure root is the only user in at.allow">
                        <ecl:command>egrep -v root /etc/at.allow</ecl:command>
                        <ecl:line-selection op="pm" value="^.+$"/>
                    </ecl:shell-command>
                </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
                <xccdf:check-content>
                    <ecl:shell-command check="all" comment="/etc/cron.allow permissions correct in /etc/permissions.local" success="pass">
                        <ecl:command>egrep '^/etc/cron\.allow[[:space:]]+root\.root[[:space:]]+0?400$' /etc/permissions.local</ecl:command>
                        <ecl:line-selection op="pm" value="^.*$"/>
                    </ecl:shell-command>
                </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
                <xccdf:check-content>
                    <ecl:shell-command check="all" comment="at.allow permissions correct in /etc/permissions.local" success="pass">
                        <ecl:command>egrep '^/etc/at\.allow[[:space:]]+root\.root[[:space:]]+0?400$' /etc/permissions.local</ecl:command>
                        <ecl:line-selection op="pm" value="^.*$"/>
                    </ecl:shell-command>
                </xccdf:check-content>
            </xccdf:check>
        </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0705" role="full" selected="false" weight="1.0">
      <xccdf:title>Restrict Permissions On crontab Files </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>
          <a name="DDE_LINK4" shape="rect"/>chown root:root /etc/crontab<br/>chmod 400 /etc/crontab<br/>printf
          "/etc/crontab \troot.root\t400\n" &gt;&gt; \<br/> /etc/permissions.local<br/>chown -R root:root
          /var/spool/cron<br/>chmod -R go-rwx /var/spool/cron<br/>for FILE in /var/spool/cron/*; do<br/> printf "$FILE
          \troot.root\t400\n" &gt;&gt; \<br/> /etc/permissions.local<br/>done<br/>ls | grep cron | grep -v
          preCIS | xargs chown -R root:root<br/>ls | grep cron | grep -v preCIS | xargs chmod -R go-rwx<br/>for FILE in
          `ls /etc/* | grep cron | grep -v preCIS`; do<br/> printf "$FILE \troot.root\t400\n" &gt;&gt; \<br/>
          /etc/permissions.local<br/>done<br/><br/><br/></p>
        <h3>Discussion: </h3>
        <p>The system crontab files are accessed only by the cron daemon (which runs with superuser privileges) and the
          crontab command (which is set-UID to root). Allowing unprivileged users to read or (even worse) modify system
          crontab files can create the potential for a local user on the system to gain elevated privileges. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="AND">
          <!--/etc/crontab-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/crontab ownership and permission-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="/etc/crontab ownership and permission">
                <ecl:command>find /etc/crontab -follow -maxdepth 0 ! \( -user root -group root -perm u=r,g=,o= \) -ls</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
                <ecl:shell-command check="all" comment="/etc/crontab permissions correct in /etc/permissions.local" success="pass">
                <ecl:command>egrep '^/etc/crontab[[:space:]]+root\.root[[:space:]]+0?400$' /etc/permissions.local</ecl:command>
                <ecl:line-selection op="pm" value="^.*$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="AND">
          <!--/var/spool/cron-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «find /var/spool/cron ! \( -user root -group root \) -ls»-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="command test «find /var/spool/cron ! \( -user root -group root \) -ls»">
                <ecl:command>find /var/spool/cron ! \( -user root -group root \) -ls</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:complex-check operator="AND">
            <!--/etc/permissions.local entries-->
            <xccdf:check system="http://cisecurity.org/check">
              <xccdf:check-content>
                  <ecl:shell-command check="all" comment="/var/spool/cron/lastrun permissions correct in /etc/permissions.local" success="pass">
                  <ecl:command>egrep '^/var/spool/cron/lastrun[[:space:]]+root\.root[[:space:]]+0?400$' /etc/permissions.local</ecl:command>
                  <ecl:line-selection op="pm" value="^.*$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <xccdf:check-content>
                  <ecl:shell-command check="all" comment="/var/spool/cron/tabs permissions correct in /etc/permissions.local" success="pass">
                  <ecl:command>egrep '^/var/spool/cron/tabs[[:space:]]+root\.root[[:space:]]+0?400$' /etc/permissions.local</ecl:command>
                  <ecl:line-selection op="pm" value="^.*$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="AND">
          <!--/etc/*cron*-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «find /etc -maxdepth 0 -name '*cron*' ! \( -user root -group root -perm g=,o= \) -ls»-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="command test «find /etc -maxdepth 0 -name '*cron*' ! \( -user root -group root -perm g=,o= \) -ls»">
                <ecl:command>find /etc -maxdepth 0 -name '*cron*' ! \( -user root -group root -perm g=,o= \) -ls</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0706" role="full" selected="false" weight="1.0">
      <xccdf:title>Configure xinetd Access Control </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>Insert the following line into the "defaults" block in /etc/xinetd.conf: </p>
        <p style="margin-left: 0.49in">only_from = &lt;net&gt;/&lt;num_bits&gt;
          &lt;net&gt;/&lt;num_bits&gt; </p>
        <p>where each &lt;net&gt;/&lt;num_bits&gt; combination represents one network block in use by
          your organization. For example: </p>
        <p style="margin-left: 0.49in">only_from = 192.168.1.0/24</p>
        <p>would restrict connections to only the 192.168.1.0/24 network, with the netmask 255.255.255.0. </p>
        <p>Note: There are two &lt;TAB&gt;'s between the only_from and the = in the above lines.</p>
        <h3>Discussion: </h3>
        <p>This item configures xinetd to use simple IP-based access control and log connections. Just as xinetd's
          access control mechanisms are used to monitor illicit connection attempts, the popular PortSentry tool (<a href="http://www.psionic.com/products/portsentry.html" shape="rect">http://www.psionic.com/products/portsentry.html</a>) can be used to monitor access attempts on unused
          ports. Note that running PortSentry may result in the CIS testing tools reporting "false positives" for
          "active" ports that are actually being held by the PortSentry daemon. Consider replacing the PortSentry daemon
          with PSAD, short for Port Scan Attack Detector, available from <a href="http://www.cipherdyne.com/psad/" shape="rect">http://www.cipherdyne.com/psad/</a>. Unlike PortSentry, PSAD doesn't have to hold open ports --
          instead, it communicates directly with the kernel. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test «egrep '^[[:space:]]+only_from' /etc/xinetd.conf»-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="command test «egrep '^[[:space:]]+only_from' /etc/xinetd.conf»" success="pass">
            <ecl:command>egrep '^[[:space:]]+only_from' /etc/xinetd.conf</ecl:command>
            <ecl:line-selection op="pm" value="^.*$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0707" role="full" selected="false" weight="1.0">
      <xccdf:title>Restrict Root Logins To System Console </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>echo console &gt;&gt; /etc/securetty <br/>chown root:root /etc/securetty <br/>chmod 400
          /etc/securetty <br/>printf "/etc/securetty \troot.root\t400\n" &gt;&gt; \<br/>
          /etc/permissions.local<br/>diff /etc/securetty-preCIS /etc/securetty </p>
        <h3>Discussion: </h3>
        <p>Anonymous root logins should never be allowed, except on the system console in emergency situations. At all
          other times, the administrator should access the system via an unprivileged account and use some authorized
          mechanism (such as the su command, or the freely-available sudo package) to gain additional privileges. These
          mechanisms provide at least some audit trail in the event of problems. </p>
        <p>Many Enterprises – who use serial port concentrators to connect to a server in a data center without
          physically having to use the keyboard – consider the serial port a console. This is in keeping with the Unix
          server tradition of controlling headless Unix machines using a serial port console. Just like the virtual
          consoles, this one needs protected as well. If this applies to your organization, you may execute these lines: </p>
        <p>echo ttyS0 &gt;&gt; /etc/securetty <br/>echo ttyS1 &gt;&gt; /etc/securetty </p>
        <p>Be advised that doing so will reduce your CIS Scoring Tool score and reduce your security posture.</p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="AND">
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/securetty text content-->
            <xccdf:check-content>
              <ecl:file-content check="at least one" comment="/etc/securetty text content">
                <ecl:path>/etc/securetty</ecl:path>
                <ecl:line-selection op="pm" value="^(.+)$">
                  <ecl:regex-group group="1" op="eq" value="console"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/securetty ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/securetty ownership and permission">
              <ecl:command>find /etc/securetty -follow -maxdepth 0 ! \( -user root -group root -perm u=r,g=,o= \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
              <ecl:shell-command check="all" comment="/etc/securetty permissions correct in /etc/permissions.local" success="pass">
              <ecl:command>egrep '^/etc/securetty[[:space:]]+root\.root[[:space:]]+0?400$' /etc/permissions.local</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0708" role="full" selected="false" weight="1.0">
      <xccdf:title>
        <xccdf:sub idref="Bastille"/>Set LILO/GRUB Password </xccdf:title>
      <xccdf:description>
        <p>
          <i>
            <b>Note: Bastille configuration set to 'No'</b>
          </i>
        </p>
        <h3>Action (if you have an /etc/lilo.conf file): </h3>
        <ol>
          <li>
            <p>Add the following lines to the beginning of /etc/lilo.conf <br/>restricted
              <br/>password=&lt;password&gt; <br/>Replace &lt;password&gt; with an appropriate password
              for your organization. </p>
          </li>
          <li>
            <p>Execute the following commands as root:<br/>chown root:root /etc/lilo.conf <br/>chmod 600 /etc/lilo.conf
              <br/>printf "/etc/lilo.conf \troot.root\t600\n" &gt;&gt; \<br/> /etc/permissions.local<br/>lilo
            </p>
          </li>
        </ol>
        <h3>Action (if you have an /boot/grub/menu.lst file): </h3>
        <ol>
          <li>
            <p>Add this line to /boot/grub/menu.lst before the first uncommented line. <br/>password &lt;password&gt;
              <br/>Replace &lt;password&gt; with an appropriate password for your organization. </p>
          </li>
          <li>
            <p>Execute the following commands as root: <br/>chown root:root /boot/grub/menu.lst <br/>chmod 600 /boot/grub/menu.lst
            </p>
          </li>
        </ol>
        <h3>Discussion: </h3>
        <p>By default on most Linux systems, the boot loader prompt allows an attacker to subvert the normal boot
          process very easily. The action above will allow the system to boot normally, only requiring a password when
          the user attempts to modify the boot process by passing commands to LILO or GRUB. Make sure to replace
          &lt;password&gt; in the actions above with a good password. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--LILO-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/lilo.conf does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="/etc/lilo.conf does not exist" success="fail">
                <ecl:command>/usr/bin/test -e /etc/lilo.conf</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:complex-check operator="AND">
            <xccdf:check system="http://cisecurity.org/check">
              <!--/etc/lilo.conf text content-->
              <xccdf:check-content>
                <ecl:file-content check="at least one" comment="/etc/lilo.conf text content">
                  <ecl:path>/etc/lilo.conf</ecl:path>
                  <ecl:line-selection op="pm" value="^restricted$"/>
                </ecl:file-content>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--/etc/lilo.conf text content-->
              <xccdf:check-content>
                <ecl:file-content check="at least one" comment="/etc/lilo.conf text content">
                  <ecl:path>/etc/lilo.conf</ecl:path>
                  <ecl:line-selection op="pm" value="^password=.+$"/>
                </ecl:file-content>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--/etc/lilo.conf ownership and permission-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="/etc/lilo.conf ownership and permission">
                  <ecl:command>find /etc/lilo.conf -follow -maxdepth 0 ! \( -user root -group root -perm u=rw,g=,o= \)
                    -ls</ecl:command>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="Ensure LILO/GRUB configuration is protected via /etc/permissions.local" success="pass">
                  <ecl:command>egrep '^(/boot/grub/menu.lst|/etc/lilo\.conf)[[:space:]]+root\.root[[:space:]]+0?600$' /etc/permissions.local</ecl:command>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--GRUB-->
          <xccdf:complex-check operator="AND">
            <xccdf:check system="http://cisecurity.org/check">
              <!--/boot/grub/menu.lst text content-->
              <xccdf:check-content>
                <ecl:file-content check="at least one" comment="Ensure password is set in /boot.grub/menu.lst">
                  <ecl:path>/boot/grub/menu.lst</ecl:path>
                  <ecl:line-selection op="pm" value="^\s*password\s+"/>
                </ecl:file-content>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--/boot/grub/menu.lst ownership and permission-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="/boot/grub/menu.lst ownership and permission">
                  <ecl:command>find /boot/grub/menu.lst -follow -maxdepth 0 -user root -group root -a ! -perm /o=w -ls</ecl:command>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0709" role="full" selected="false" weight="1.0">
      <xccdf:title>
        <xccdf:sub idref="Bastille"/>Require Authentication For Single-User Mode </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>cd /etc <br/>if [ "`grep -l sulogin inittab`" = "" ]; then <br/> awk '{ print };
          /^id:[0123456sS]:initdefault:/ \<br/> { print "~~:S:respawn:/sbin/sulogin" }' \<br/> inittab &gt;
          inittab.tmp<br/> mv -f inittab.tmp inittab<br/> chown root:root inittab<br/> chmod 600 inittab <br/> printf
          "/etc/inittab \troot.root\t600\n" &gt;&gt; \<br/> /etc/permissions.local<br/>fi <br/>diff
          inittab-preCIS inittab </p>
        <h3>Discussion: </h3>
        <p>On some Linux systems you can enter single user mode simply by typing "linux single" at the LILO prompt or in
          the GRUB boot-editing menu. This represents a clear security risk – authentication should always be required
          for root-level access. It should be noted that it is extremely difficult to prevent compromise by any attacker
          who has knowledge, tools, and full physical access to a system. This kind of measure simply increases the
          difficulty of compromise by requiring more of each of these factors. </p>
        <p>SuSE Linux prevents this risk, by default, however this item checks for the proper setting and puts it back
          in place if it is missing. </p>
        <p>The last two items have attempted to address concerns of physical/boot security. To make these preparations
          more complete, one should consider setting the BIOS to boot only from the main hard disk and locking this
          setting with a BIOS password. For more information on reducing the threat posed by an attacker with
          physical/boot access, consider the article "Anyone with a Screwdriver Can Break In," available at <a href="http://www.bastille-linux.org/jay/anyone-with-a-screwdriver.html" shape="rect">http://www.bastille-linux.org/jay/anyone-with-a-screwdriver.html</a>. </p>
        <p>Note: Even though this topic is addressed by Bastille, it performs a step not executed by Bastille and should
          be completed even if Bastille was used. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/inittab text content-->
          <xccdf:check-content>
            <ecl:file-content check="at least one" comment="/etc/inittab text content">
              <ecl:path>/etc/inittab</ecl:path>
              <ecl:line-selection op="pm" value="^~~:S:respawn:/sbin/sulogin$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/inittab ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/inittab ownership and permission">
              <ecl:command>find /etc/inittab -follow -maxdepth 0 \( -user root -group root -perm /go+rwx \) -ls</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="/etc/inittab permissions correct in /etc/permissions.local" success="pass">
              <ecl:command>egrep '^/etc/inittab[[:space:]]+root\.root[[:space:]]+0?600$' /etc/permissions.local</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0710" role="full" selected="false" weight="1.0">
      <xccdf:title>Restrict NFS Client Requests To Privileged Ports </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>
          <i>Add the secure option to all entries in the /etc/exports file. The following Perl code will perform this
            action automatically.</i>
        </p>
        <p>if [ -s /etc/exports ]; then<br/> perl -i.orig -pe \<br/> 'next if (/^\s*#/ || /^\s*$/); <br/> ($res, @hst) =
          split(" "); <br/> foreach $ent (@hst) {<br/> undef(%set); <br/> ($optlist) = $ent =~ /\((.*?)\)/; <br/>
          foreach $opt (split(/,/, $optlist)) { <br/> $set{$opt} = 1; <br/> } <br/> delete($set{"insecure"}); <br/>
          $set{"secure"} = 1; <br/> $ent =~ s/\(.*?\)//; <br/> $ent .= "(" . join(",", keys(%set)) . ")"; <br/> } <br/>
          $hst[0] = "(secure)" unless (@hst); <br/> $_ = "$res\t" . join(" ", @hst) . <span lang="fr-CA">"\n";'
            \<br/>/etc/exports<br/>fi <br/>diff /etc/exports-preCIS /etc/exports</span></p>
        <h3>Discussion: </h3>
        <p>Setting the secure parameter causes the NFS server process on the local system to ignore NFS client requests
          that do not originate from the privileged port range (ports less than 1024). This should not hinder normal NFS
          operations but may block some automated NFS attacks that are run by unprivileged users. </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command comment="/etc/exports is Not Present" success="fail">
              <ecl:command>test -e /etc/exports</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">         
          <xccdf:check-content>
            <!-- 
              Sample:
              /nfs    *(fsid=0,crossmnt,ro,root_squash,sync,no_subtree_check,insecure_locks)
              
              1. Remove all lines from /etc/exports that are blank or start with a comment character.
              2. Find all remaining lines that contain the 'insecure' token.
                a. The regex terminates 'insecure' on a [,)$] to avoid a false match on the 'insecure_locks' option.
              4. If any such line is found, fail. 
              
              Note: Evidence will be in out_raw.              
            -->
            <ecl:shell-command check="none exist" comment="Ensure no directory has the 'insecure' option set in /etc/exports">
              <ecl:command>egrep -v '(^#)|(^[[:space:]]*$)' /etc/exports</ecl:command>
              <ecl:line-selection op="pm" value="insecure[,\)$]"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0711" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Only Enable syslog To Accept Messages If Absolutely Necessary</xccdf:title>
      <xccdf:description>
        <p>By default the system logging daemon, syslogd, does not listen for log messages from other systems on network
          port 514/udp (Solaris, by contrast, does listen by default). </p>
        <p>It is considered good practice to set up one or more machines as central "log servers" to aggregate log
          traffic from all machines at a site. However, unless a system is set up to be one of these "log server"
          systems, it should not be listening on 514/udp for incoming log messages as the protocol used to transfer
          these messages does not include any form of authentication, so a malicious outsider could simply barrage the
          local system's Syslog port with spurious traffic either as a denial-of- service attack on the system, or to
          fill up the local system's logging file systems so that subsequent attacks will not be logged. </p>
      </xccdf:description>
      <xccdf:question> Is this machine a log server, or does it need to receive syslog messages via the network from
        other systems? If the answer to this question is yes, then enable syslog-ng to accept remote messages.</xccdf:question>
      <xccdf:fixtext>
        <p>Uncomment the line <span>#udp(ip("0.0.0.0") port(514));</span> in <span>syslog-ng.conf.in</span>.</p>
        <p>Adjust the SuSEfirewall2 configuration to allow inbound syslog packets.</p>
      </xccdf:fixtext>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="g08">
    <xccdf:title>User Accounts and Environment </xccdf:title>
    <xccdf:description> Note that the items in this section are tasks that the local administrator should undertake on a regular,
      ongoing basis—perhaps in an automated fashion via cron. The automated host- based scanning tools provided from the Center for
      Internet Security can be used for this purpose. These scanning tools are typically provided with this document, but are also
      available for free download from http://www.CISecurity.org/. </xccdf:description>
    <xccdf:Rule id="r0801" role="full" selected="false" weight="1.0">
      <xccdf:title>Block System Accounts </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>for NAME in `cut -d: -f1 /etc/passwd`; do <br/> MyUID=`id -u $NAME` <br/> if [ $MyUID -lt 500 -a $NAME !=
          'root' ]; then <br/> usermod -L -s /bin/false $NAME <br/> fi<br/>done </p>
        <h3>Discussion: </h3>
        <p>These accounts are non-human system accounts that should be made less useful to an attacker by locking them
          and setting the shell to a shell not in /etc/shells. They can even be deleted if the machine does not use the
          daemon/service that each is responsible for, though it is safest to simply deactivate them as is done here. To
          deactivate them, lock the password and set the login shell to an invalid shell. /bin/false is a good choice—it
          is a valid executable that is not a valid login shell. /bin/false is the choice used by Novell for SuSE Linux
          instead of /dev/null or /bin/nologin. </p>
        <p>This section expands upon section 3.6 for locking out users.</p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test «awk -F: '($1!="root" && $3<500 && $7!="/bin/false") {print}' /etc/passwd»-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «awk -F: '($1!=&quot;root&quot; &amp;&amp; $3&lt;500 &amp;&amp; $7!=&quot;/bin/false&quot;) {print}' /etc/passwd»">
            <ecl:command>awk -F: '($1!="root" &amp;&amp; $3&lt;500 &amp;&amp; $7!="/bin/false")
              {print}' /etc/passwd</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0802" role="full" selected="false" weight="1.0">
      <xccdf:title>Verify That There Are No Accounts With Empty Password Fields </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>The command:</p>
        <p style="margin-left: 0.49in">awk -F: '($2 == "") { print $1 }' /etc/shadow </p>
        <p>should return no lines of output. </p>
        <h3>Discussion: </h3>
        <p>An account with an empty password field means that anybody may log in as that user without providing a
          password at all. All accounts should have strong passwords or should be locked by using a password string like
          "NP" or "*LOCKED*". </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test «awk -F: '(!$2) {print}' /etc/shadow»-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «awk -F: '(!$2) {print}' /etc/shadow»">
            <ecl:command>awk -F: '(!$2) {print}' /etc/shadow</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0803" role="full" selected="false" weight="1.0">
      <xccdf:title>
        <xccdf:sub idref="Bastille"/>Set Account Expiration and Password Parameters On Active Accounts </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p style="margin-bottom: 0in">
          <span lang="fr-CA">cd /etc <br/>cp login.defs login.defs.tmp<br/></span>if [
            `<span lang="fr-CA">grep -c "^PASS_MIN_LEN" login.defs`</span> -eq 0 ]; then<br/> echo "PASS_MIN_LEN 6<span lang="fr-CA">"</span> &gt; login.defs.tmp </p>
        <p style="margin-bottom: 0in">fi</p>
        <p style="margin-bottom: 0in">awk '($1 ~ /^PASS_MAX_DAYS/) { $2="90" } <br/> ($1 ~ /^PASS_MIN_DAYS/) { $2="7" }
          <br/> ($1 ~ /^PASS_WARN_AGE/) { $2="28" } <br/> ($1 ~ /^PASS_MIN_LEN/) { $2="6" } <br/> ($1 ~
          /^LOGIN_RETRIES/) { $2="3" } <br/> { print } ' login.defs.tmp &gt; login.defs </p>
        <p>
          <a name="DDE_LINK5" shape="rect"/>
          <a name="DDE_LINK3" shape="rect"/>chown root:root login.defs <br/>chmod 640
          login.defs<br/>printf "/etc/login.defs \troot.root\t640\n" &gt;&gt; \<br/>
          /etc/permissions.local<br/>rm login.defs.tmp<br/>diff login.defs-preCIS login.defs <br/><br/>useradd -D -f
          7<br/>diff /etc/default/useradd-preCIS /etc/default/useradd<br/><br/>for NAME in `cut -d: -f1 /etc/passwd`; do
          <br/> uid=`id -u $NAME` <br/> if [ $uid -ge 500 -a $uid != 65534 ]; then <br/> chage -m 7 -M 90 -W 28 -I 7
          $NAME <br/> fi <br/>done </p>
        <h3>Discussion: </h3>
        <p>It is a good idea to force users to change passwords on a regular basis. The commands above will set all
          active accounts (except system accounts) to force password changes every 90 days (-M 90), and then prevent
          password changes for seven days (-m 7) thereafter. Users will begin receiving warnings 28 days (-W 28) before
          their password expires. Once the password expired, the account will be locked out after 7 days (-I 7).
          Finally, the instructions above set a minimum password length of 6 characters. </p>
        <p>These are recommended starting values. Some regulated industries require more restrictive values – ensure
          they comply with your Enterprise security policy. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/login.defs text content-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Ensure PASS_MAX_DAYS is less than or equal to 90 in /etc/login.defs">
              <ecl:path>/etc/login.defs</ecl:path>
              <ecl:line-selection op="pm" value="^PASS_MAX_DAYS\s+(\d+)$">
                <ecl:regex-group dt="xs:integer" group="1" op="le" value="90"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/login.defs text content-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Ensure PASS_MIN_DAYS is greater than or equal to 7 in /etc/login.defs">
              <ecl:path>/etc/login.defs</ecl:path>
              <ecl:line-selection op="pm" value="^PASS_MIN_DAYS\s+(\d+)$">
                <ecl:regex-group dt="xs:integer" group="1" op="ge" value="7"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/login.defs text content-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Ensure PASS_WARN_AGE equals 28 in /etc/login.defs">
              <ecl:path>/etc/login.defs</ecl:path>
              <ecl:line-selection op="pm" value="^PASS_WARN_AGE\s+(\d+)$">
                <ecl:regex-group dt="xs:integer" group="1" op="eq" value="28"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:complex-check operator="OR">
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/login.defs text content-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="Ensure PASS_MIN_LEN is greater than or equal to 6 in /etc/login.defs">
                <ecl:path>/etc/login.defs</ecl:path>
                <ecl:line-selection op="pm" value="^PASS_MIN_LEN\s+(\d+)$">
                  <ecl:regex-group dt="xs:integer" group="1" op="ge" value="6"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/pam.d/common-password text content-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="Ensure minlen is greater than or equal to 6 /etc/pam.d/common-password">
                <ecl:path>/etc/pam.d/common-password</ecl:path>
                <ecl:line-selection op="pm" value="minlen=(\d+)">
                  <ecl:regex-group dt="xs:integer" group="1" op="ge" value="6"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/login.defs text content-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Ensure LOGIN_RETRIES is less than or equal to 3 in /etc/login.defs">
              <ecl:path>/etc/login.defs</ecl:path>
              <ecl:line-selection op="pm" value="^LOGIN_RETRIES\s+(\d+)$">
                <ecl:regex-group dt="xs:integer" group="1" op="le" value="3"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/login.defs ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Ensure /etc/login.defs is owned by root:root and has u-x,g-wx,o-rwx permissions">
              <ecl:command>find /etc/login.defs -follow -maxdepth 0 ! \( -user root -group root -perm u=rw,g=r,o= \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
              <ecl:shell-command check="all" comment="Ensure /etc/login.defs sets 0640 permissions on /etc/permissions.local" success="pass">
              <ecl:command>egrep '^/etc/login\.defs[[:space:]]+root\.root[[:space:]]+0?640$' /etc/permissions.local</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--useradd -D -f 7-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Ensure INACTIVE is less than or equal to 7 in /etc/default/useradd">
              <ecl:path>/etc/default/useradd</ecl:path>
              <ecl:line-selection op="pm" value="^INACTIVE=(\d+)$">
                <ecl:regex-group dt="xs:integer" group="1" op="le" value="7"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--all user accounts must have password-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Ensure all accounts in /etc/shadow have a password">
              <ecl:command>awk -F: '(!$2) {print}' /etc/shadow</ecl:command>
              <ecl:line-selection op="pm" value="^.+$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--chage -m 7 -M 90 -W 28 -I 7 all user accounts-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Ensure all user accounts have correct password expiration parameters">
              <ecl:command>for u in `awk -F: '($3&gt;500 &amp;&amp; $3&lt;65534) {print $1}'
                /etc/passwd`; do egrep ^$u: /etc/shadow; done|awk -F: '($2!~/[!*]+/ &amp;&amp; ($4&lt;7 ||
                $5&gt;90 || $7&gt;7)) {print}'</ecl:command>
              <ecl:line-selection op="pm" value="^.+$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0804" role="full" selected="false" weight="1.0">
      <xccdf:title>Verify No Legacy '+' Entries Exist In passwd, shadow, And group Files </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>The command:</p>
        <p style="margin-left: 0.49in">
          <span lang="fr-CA">grep ^+: /etc/passwd /etc/shadow /etc/group </span>
        </p>
        <p>should return no lines of output. </p>
        <h3>Discussion: </h3>
        <p>'+' entries in various files used to be markers for systems to insert data from NIS maps at a certain point
          in a system configuration file. These entries may provide an avenue 41 for attackers to gain privileged access
          on the system, and should be deleted if they exist. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--/etc/^(passwd|shadow|group)$ text content-->
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/^(passwd|shadow|group)$ text content">
            <ecl:path>/etc/^(passwd|shadow|group)$</ecl:path>
            <ecl:line-selection op="pm" value="^+:.*$"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0805" role="full" selected="false" weight="1.0">
      <xccdf:title>Verify That No UID 0 Accounts Exist Other Than Root </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>The command:</p>
        <p lang="fr-CA" style="margin-left: 0.49in">awk -F: '($3 == 0) { print $1 }' /etc/passwd</p>
        <p>should return only the word "root". </p>
        <h3>Discussion: </h3>
        <p>Any account with UID 0 has superuser privileges on the system. The only superuser account on the machine
          should be the root account, and it should be accessed by logging in as an unprivileged user and using the su
          command (or equivalent) to gain additional privilege. </p>
        <p>Finer granularity access control for administrative access can be obtained by using the – freely-available
          sudo program (<a href="http://www.courtesan.com/sudo/" shape="rect">http://www.courtesan.com/sudo/</a>). </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test «awk -F: '($3==0 && $1!="root") {print}' /etc/passwd»-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «awk -F: '($3==0 &amp;&amp; $1!=&quot;root&quot;) {print}' /etc/passwd»">
            <ecl:command>awk -F: '($3==0 &amp;&amp; $1!="root") {print}' /etc/passwd</ecl:command>
            <ecl:line-selection op="pm" value="^.+$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0806" role="full" selected="false" weight="1.0">
      <xccdf:title>No '.' or Group/World-Writable Directory In Root's $PATH </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>The automated testing tool supplied with this benchmark will alert the administrator if action is required. </p>
        <p>To find ‘.’ in $PATH:</p>
        <p style="margin-left: 0.49in">echo $PATH | egrep '(^|:)(\.|:|$)'</p>
        <p>To find group- or world-writable directories in $PATH:</p>
        <p style="margin-left: 0.49in">find `echo $PATH | tr ':' ' '` -type d \<br/> \( -perm -002 -o -perm -020 \) -ls </p>
        <p>These commands should produce no output.</p>
        <h3>Discussion: </h3>
        <p>Including the current working directory ('.') or other writable directory in root's executable path makes it
          likely that an attacker can gain superuser access by forcing an administrator operating as root to execute a
          Trojan horse program. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «echo $PATH»-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test «echo $PATH»">
              <ecl:command>echo $PATH</ecl:command>
              <ecl:line-selection op="pm" value="^\.:|:\.:|:\.$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «find `echo $PATH|sed "s/:/ /g"` -prune -type d \( -perm -g+w -o -perm -o+w \) 2>/dev/null»-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test «find `echo $PATH|sed &quot;s/:/ /g&quot;` -prune -type d \( -perm -g+w -o -perm -o+w \) 2&gt;/dev/null»">
              <ecl:command>find `echo $PATH|sed "s/:/ /g"` -prune -type d \( -perm -g+w -o -perm -o+w \)
                2&gt;/dev/null</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0807" role="full" selected="false" weight="1.0">
      <xccdf:title>User Home Directories Should Be Mode 750 or More Restrictive</xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p style="page-break-after: avoid">for DIR in \<br/> `awk -F: '($3 &gt;= 500) { print $6 }' /etc/passwd`; do
          <br/> chmod g-w $DIR <br/> chmod o-rwx $DIR <br/>done </p>
        <h3>Discussion: </h3>
        <p>Group or world-writable user home directories may enable malicious users to steal or modify other users' data
          or to gain another user's system privileges. Disabling "read" and "execute" access for users who are not
          members of the same group (the "other" access category) allows for appropriate use of discretionary access
          control by each user. While the above modifications are relatively benign, making global modifications to user
          home directories without alerting the user community can result in unexpected outages and unhappy users. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test «find `awk -F: '($3 >= 500 && $1 != "nobody") {print $6}' /etc/passwd` -maxdepth 1 -type d -prune \( -perm -g+w -o -perm -o+r -o -perm -o+w -o -perm -o+x \) -ls»-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «find `awk -F: '($3 &gt;= 500 &amp;&amp; $1 != &quot;nobody&quot;) {print $6}' /etc/passwd` -maxdepth 1 -type d -prune \( -perm -g+w -o -perm -o+r -o -perm -o+w -o -perm -o+x \) -ls»">
            <ecl:command>find `awk -F: '($3 &gt;= 500 &amp;&amp; $1 != "nobody") {print $6}' /etc/passwd`
              -maxdepth 1 -type d -prune \( -perm -g+w -o -perm -o+r -o -perm -o+w -o -perm -o+x \) -ls</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0808" role="full" selected="false" weight="1.0">
      <xccdf:title>No User Dot-Files Should Be World-Writable </xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>for DIR in \<br/> `awk -F: '($3 &gt;= 500) { print $6 }' /etc/passwd`; do<br/> for FILE in
          $DIR/.[A-Za-z0-9]*; do <br/> if [ ! -h "$FILE" -a -f "$FILE" ]; then <br/> chmod go-w "$FILE" <br/> fi <br/>
          done <br/>done </p>
        <h3>Discussion: </h3>
        <p>World-writable user configuration files may enable malicious users to steal or modify other users' data or to
          gain another user's system privileges. While the above modifications are relatively benign, making global
          modifications to user home directories without alerting the user community can result in unexpected outages
          and unhappy users. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test «find `cut -f6 -d: /etc/passwd` -maxdepth 1 -type f -name '\.*' -prune \( -perm -g+w -o -perm -o+w \) 2>/dev/null»-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «find `cut -f6 -d: /etc/passwd` -maxdepth 1 -type f -name '\.*' -prune \( -perm -g+w -o -perm -o+w \) 2&gt;/dev/null»">
            <ecl:command>find `cut -f6 -d: /etc/passwd` -maxdepth 1 -type f -name '\.*' -prune \( -perm -g+w -o -perm -o+w \) 2&gt;/dev/null</ecl:command>
            <ecl:line-selection op="pm" value="^.+$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0809" role="full" selected="false" weight="1.0">
      <xccdf:title>Remove User .netrc Files</xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>find / -name .netrc</p>
        <p>
          <i>
            <b>Stop!!! Read the discussion before proceeding.</b>
          </i>
        </p>
        <p>for DIR in `cut -f6 -d: /etc/passwd`; do <br/> if [ -e $DIR/.netrc ]; then<br/> echo "Removing $DIR/.netrc"
          <br/> rm -f $DIR/.netrc<br/> fi <br/>done </p>
        <h3>Discussion:</h3>
        <p>.netrc files may contain unencrypted passwords which may be used to attack other systems. While the above
          modifications are relatively benign, making global modifications to user home directories without alerting the
          user community can result in unexpected outages and unhappy users. If the first command returns any results,
          carefully evaluate the ramifications of removing those files before executing the remaining commands as you
          may end up impacting an application that has not had time to revise its architecture to a more secure design.
        </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test «find `cut -f6 -d: /etc/passwd` -maxdepth 1 -type f -name '.netrc' 2>/dev/null»-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test «find `cut -f6 -d: /etc/passwd` -maxdepth 1 -type f -name '.netrc' 2&gt;/dev/null»">
            <ecl:command>find `cut -f6 -d: /etc/passwd` -maxdepth 1 -type f -name '.netrc' 2&gt;/dev/null</ecl:command>
            <ecl:line-selection op="pm" value="^.+$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0810" role="full" selected="false" weight="1.0">
      <xccdf:title>
        <xccdf:sub idref="Bastille"/>Set Default umask For Users </xccdf:title>
      <xccdf:description>
        <h3>Action:</h3>
        <p>cd /etc <br/>for FILE in profile csh.login csh.cshrc bash.bashrc; do <br/> if ! egrep -q 'umask.*77' $FILE ;
          then<br/> echo "umask 077" &gt;&gt; $FILE<br/> fi<br/> chown root:root $FILE <br/> chmod 444 $FILE
          <br/> printf "/etc/$FILE \troot.root\t444\n" &gt;&gt; \<br/> /etc/permissions.local<br/> diff
          ${FILE}-preCIS $FILE<br/>done <br/><br/>cd /root <br/>for FILE in .bash_profile .bashrc .cshrc .tcshrc; do
          <br/> if ! egrep -q 'umask.*77' $FILE ; then<br/> echo "umask 077" &gt;&gt; $FILE # See
          description<br/> fi<br/> chown root:root $FILE <br/> printf "/root/$FILE \troot.root\t600\n" &gt;&gt;
          \<br/> /etc/permissions.local<br/> diff ${FILE}-preCIS $FILE<br/>done </p>
        <h3>Discussion: </h3>
        <p>With a default umask setting of 077 – a setting agreed to as part of the consensus process with DISA and NSA
          – files and directories created by users will not be readable by any other user on the system. The user
          creating the file has the discretion of making their files and directories readable by others via the chmod
          command. Users who wish to allow their files and directories to be readable by others by default may choose a
          different default umask by inserting the umask command into the standard shell configuration files (.profile,
          .cshrc, etc.) in their home directories. A umask of 027 would make files and directories readable by users in
          the same Unix group, while a umask of 022 would make files readable by every user on the system. </p>
        <p>We adjust root's umask setting separately in this item, as root shells don't necessarily read the system-wide
          configuration files. For example, root sessions using bash doesn't get umask settings from /etc/profile. </p>
        <p style="margin-bottom: 0.08in">Note: This is been shown to cause problems with the installation of software
          packages where the installation script uses the default umask – the directories are owned by root with 700
          permissions, and then the application and/or daemon cannot read its files. A simple fix to this problem is to
          manually issue a less restrictive umask (such as umask 022) for the shell session doing the installation, or
          place such a umask command in the beginning to a less restrictive value before the installation, or in the
          beginning of the installation script. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="AND">
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «egrep '^umask[[:space:]]+077$' /etc/profile»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="command test «egrep '^umask[[:space:]]+077$' /etc/profile»" success="pass">
                <ecl:command>egrep '^umask[[:space:]]+077$' /etc/profile</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «egrep '^umask[[:space:]]+077$' /etc/csh.login»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="command test «egrep '^umask[[:space:]]+077$' /etc/csh.login»" success="pass">
                <ecl:command>egrep '^umask[[:space:]]+077$' /etc/csh.login</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «egrep '^umask[[:space:]]+077$' /etc/csh.cshrc»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="command test «egrep '^umask[[:space:]]+077$' /etc/csh.cshrc»" success="pass">
                <ecl:command>egrep '^umask[[:space:]]+077$' /etc/csh.cshrc</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «egrep '^umask[[:space:]]+077$' /etc/bash.bashrc»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="command test «egrep '^umask[[:space:]]+077$' /etc/bash.bashrc»" success="pass">
                <ecl:command>egrep '^umask[[:space:]]+077$' /etc/bash.bashrc</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
                <ecl:shell-command check="all" comment="/etc/(profile|csh.login|csh.cshrc|bash.bashrc) permissions correct in /etc/permissions.local" success="pass">
                <ecl:command>egrep '^/etc/(profile|csh\.login|csh\.cshrc|bash\.bashrc)[[:space:]]+root\.root[[:space:]]+0?444$' /etc/permissions.local</ecl:command>
                <ecl:line-selection op="pm" value="^.*$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="AND">
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «egrep '^umask[[:space:]]+077$' /root/.bash_profile»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="command test «egrep '^umask[[:space:]]+077$' /root/.bash_profile»" success="pass">
                <ecl:command>egrep '^umask[[:space:]]+077$' /root/.bash_profile</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «egrep '^umask[[:space:]]+077$' /root/.bashrc»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="command test «egrep '^umask[[:space:]]+077$' /root/.bashrc»" success="pass">
                <ecl:command>egrep '^umask[[:space:]]+077$' /root/.bashrc</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «egrep '^umask[[:space:]]+077$' /root/.cshrc»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="command test «egrep '^umask[[:space:]]+077$' /root/.cshrc»" success="pass">
                <ecl:command>egrep '^umask[[:space:]]+077$' /root/.cshrc</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--command test «egrep '^umask[[:space:]]+077$' /root/.tcshrc»-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="command test «egrep '^umask[[:space:]]+077$' /root/.tcshrc»" success="pass">
                <ecl:command>egrep '^umask[[:space:]]+077$' /root/.tcshrc</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
                <ecl:shell-command check="all" comment="/root/(.bash_profile|.bashrc|.cshrc|.tcshrc) permissions correct in /etc/permissions.local" success="pass">
                <ecl:command>egrep '^/root/(\.bash_profile|\.bashrc|\.cshrc|\.tcshrc)[[:space:]]+root\.root[[:space:]]+0?600$' /etc/permissions.local</ecl:command>
                <ecl:line-selection op="pm" value="^.*$"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0811" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable Core Dumps </xccdf:title>
      <xccdf:description>
        <h3>Question: </h3>
        <p>Do you have developers who need to debug crashed programs or send low-level debugging information to software
          developers/vendors? </p>
        <p>If the answer to this question is no, then perform the action below. </p>
        <h3>Action: </h3>
        <p>cd /etc/security<br/>cat &lt;&lt;END_ENTRIES &gt;&gt; limits.conf <br/># Following 9 lines
          added by CISecurity Benchmark sec 8.11<br/>* soft core 0 <br/>* hard core 0 <br/>END_ENTRIES<br/>diff
          limits.conf-preCIS limits.conf </p>
        <h3>Discussion: </h3>
        <p>Core dumps can consume large amounts of disk space and may contain sensitive data. On the other hand,
          developers using this system may require core files in order to aid in debugging. The limits.conf file can be
          used to grant core dump ability to individual users or groups of users. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «egrep '^\*[[:space:]]+soft[[:space:]]+core[[:space:]]+0$' /etc/security/limits.conf»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Ensure soft core limit is set in limits.conf" success="pass">
              <ecl:command>egrep '^[[:space:]]*\*[[:space:]]+soft[[:space:]]+core[[:space:]]+0[[:space:]]*$' /etc/security/limits.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «egrep '^\*[[:space:]]+hard[[:space:]]+core[[:space:]]+0$' /etc/security/limits.conf»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Ensure hard core limit is set in limits.conf" success="pass">
              <ecl:command>egrep '^[[:space:]]*\*[[:space:]]+hard[[:space:]]+core[[:space:]]+0[[:space:]]*$' /etc/security/limits.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0812" role="full" selected="false" weight="1.0">
      <xccdf:title>
        <xccdf:sub idref="Bastille"/>Limit Access To The Root Account From su </xccdf:title>
      <xccdf:description>
        <h3>Action:</h3>
        <p>
          <b>
            <i>WARNING</i>
          </b>: If you do not have immediate physical access to the server, ensure you have a user in the wheel group
          before running the below script. Failure to do so will prevent you from using su to become root. </p>
        <p style="margin-bottom: 0in">cd /etc/pam.d/</p>
        <p style="margin-bottom: 0in">if [ `grep -c "^auth *required *pam_wheel.so" su` -eq 0 ]<br/>then<br/> printf
          "auth required pam_wheel.so\n"\<br/> &gt;&gt; su<br/>fi<br/>diff /etc/pam.d-preCIS/su su </p>
        <h3>
          <br/>
          <br/>
        </h3>
        <h3>Discussion:</h3>
        <p>The su command allows you to become other users on the system. This is commonly used to become “root” and
          execute commands as the super-user. If you do not want certain users to su to root then ensure the following
          line exists in /etc/pam.d/su: </p>
        <p style="margin-left: 0.49in">auth required pam_wheel.so</p>
        <p>This line allows only the users in the wheel group to become root by using the su command and entering the
          root password. All other users will receive a message stating the password is incorrect. </p>
        <p>By limiting access to the root account, even if a user knows the root password, they will not be able to
          become root unless that user has physical access to the server's console, or they are added to the wheel
          group. This adds another layer of security to the system and prevents unauthorized system access. </p>
      </xccdf:description>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test «egrep '^auth[[:space:]]+required[[:space:]]+pam_wheel\.so$' /etc/pam.d/su»-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="command test «egrep '^auth[[:space:]]+required[[:space:]]+pam_wheel\.so' /etc/pam.d/su»" success="pass">
            <ecl:command>egrep '^auth[[:space:]]+required[[:space:]]+pam_wheel\.so' /etc/pam.d/su</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="r0813" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Reboot</xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>init 6</p>
        <h3>Discussion: </h3>
        <p>Whenever you make substantial changes to a system, reboot. Some System Administrators believe any change to
          the init scripts warrant a reboot to ensure the system comes up as expected. Hours of lost productivity with
          extensive troubleshooting (not to mention lost revenue) have occurred because a system did not start up as
          expected. The root cause was an init problem that would have been detected had the reboot taken place. </p>
        <p>
          <br/>
          <br/>
        </p>
      </xccdf:description>
      <!-- Interactive remove
            <xccdf:check system="http://www.cisecurity.org/xccdf/interactive/0.1">
                <xccdf:check-content-ref href="sles-9.0-inter.xml" name="qstn-0003"/>
            </xccdf:check>
            -->
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="g09">
    <xccdf:title>Warning Banners</xccdf:title>
    <xccdf:description> Presenting some sort of statutory warning message prior to the normal user logon may assist the prosecution of
      trespassers on the computer system. Changing some of these login banners also has the side effect of hiding OS version
      information and other detailed system information from attackers attempting to target specific attacks at a system. Guidelines
      published by the US Department of Defense require that warning messages include at least the name of the organization that owns
      the system, the fact that the system is subject to monitoring and that such monitoring is in compliance with local statutes, and
      that use of the system implies consent to such monitoring. Clearly, the organization’s local legal counsel and/or site security
      administrator should review the content of all messages before any system modifications are made, as these warning messages are
      inherently site- specific. More information (including citations of relevant case law) can be found at
      http://www.usdoj.gov/criminal/cybercrime/s&amp;sappendix2002.htm </xccdf:description>
    <xccdf:Rule id="r0901" role="full" selected="false" weight="1.0">
      <xccdf:title>Create Warnings For Network And Physical Access Services</xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <ol>
          <li>
            <p>Edit the banner currently in /etc/issue – this was created by Bastille and may need to be changed for
              your Enterprise. </p>
          </li>
          <li>
            <p>Create banners for console access: </p>
          </li>
        </ol>
        <p>
          <i>
            <b>Important: You need to change “The Company” in the text below to an appropriate value for your
              organization</b>
          </i>
        </p>
        <p>unalias cp mv<br/>cd /etc<br/># Remove OS indicators from banners<br/>for FILE in issue issue.net motd; do
          <br/> cp -f ${FILE} ${FILE}.tmp<br/> egrep -vi "SUSE|kernel" ${FILE}.tmp &gt; ${FILE} <br/> rm -f
          ${FILE}.tmp<br/>done<br/><br/># Change name of owner<br/># Remember to enter name of your company
          here:<br/>COMPANYNAME="The Company"<br/>cp -f issue issue.tmp<br/>sed -e "s/its owner/${COMPANYNAME}/g"
          issue.tmp &gt; issue<br/>rm -f issue.tmp<br/>diff issue-preCIS issue </p>
        <p>
          <br/>if [ "`grep -i authorized /etc/issue`" == "" ]; then <br/> echo "Authorized uses only. All activity may
          be \<br/>monitored and reported." &gt;&gt; /etc/issue <br/>fi <br/>if [ "`grep -i authorized
          /etc/motd`" == "" ]; then <br/> echo "Authorized uses only. All activity may be \<br/>monitored and reported."
          &gt;&gt; /etc/motd <br/>fi <br/>diff issue.net-preCIS issue.net </p>
        <p>
          <br/>
          <br/>
        </p>
        <ol>
          <li>
            <p>Create banners for network access:</p>
          </li>
        </ol>
        <p>cp -fp /etc/issue /etc/issue.net<br/>if [ "`grep -i authorized /etc/issue.net`" == "" ]; then<br/> echo
          "Authorized uses only. All activity may be \<br/>monitored and reported." &gt;&gt;
          /etc/issue.net<br/>fi </p>
        <p>
          <br/>
          <br/>
        </p>
        <ol>
          <li>
            <p>Protect banner:</p>
          </li>
        </ol>
        <p>
          <span lang="fr-CA">chown root:root /etc/motd /etc/issue /etc/issue.net <br/>chmod 644 /etc/motd /etc/issue
            /etc/issue.net<br/>for FILE in motd issue issue.net; do<br/> printf "/etc/$FILE \troot.root\t644\n"
            &gt;&gt; \<br/> /etc/permissions.local<br/>done<br/></span>
          <br/>
          <br/>
        </p>
        <h3>Discussion: </h3>
        <p>The contents of the /etc/issue file are displayed prior to the login prompt on the system's console and
          serial devices. /etc/motd is generally displayed after all successful logins, no matter where the user is
          logging in from, but is thought to be less useful because it only provides notification to the user after the
          machine has been accessed. </p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «egrep 'SUSE|kernel' /etc/issue»-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test «egrep 'SUSE|kernel' /etc/issue»" success="fail">
              <ecl:command>egrep 'SUSE|kernel' /etc/issue</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «egrep 'SUSE|kernel' /etc/issue.net»-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test «egrep 'SUSE|kernel' /etc/issue.net»" success="fail">
              <ecl:command>egrep 'SUSE|kernel' /etc/issue.net</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «egrep 'SUSE|kernel' /etc/motd»-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test «egrep 'SUSE|kernel' /etc/motd»" success="fail">
              <ecl:command>egrep 'SUSE|kernel' /etc/motd</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «cat /etc/issue»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «cat /etc/issue»" success="pass">
              <ecl:command>cat /etc/issue</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «cat /etc/issue.net»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «cat /etc/issue.net»" success="pass">
              <ecl:command>cat /etc/issue.net</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «cat /etc/motd»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «cat /etc/motd»" success="pass">
              <ecl:command>cat /etc/motd</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/issue ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/issue ownership and permission">
                <ecl:command>find /etc/issue -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/issue.net ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/issue.net ownership and permission">
                <ecl:command>find /etc/issue.net -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/motd ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/motd ownership and permission">
                <ecl:command>find /etc/motd -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="/etc/(issue|issue\.net|motd) permissions correct in /etc/permissions.local" success="pass">
              <ecl:command>egrep '^/etc/(issue|issue\.net|motd)[[:space:]]+root\.root[[:space:]]+0?644$' /etc/permissions.local</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0902" role="full" selected="false" weight="1.0">
      <xccdf:title>Create Warnings For GUI-Based Logins</xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>
          <a name="DDE_LINK6" shape="rect"/>
          <a name="DDE_LINK7" shape="rect"/>
          <a name="DDE_LINK8" shape="rect"/> if [
          -e /etc/X11/xdm/Xresources ]; then<br/> cd /etc/X11/xdm<br/> awk '/xlogin*greeting:/ \<br/> { print
          "xlogin*greeting: Authorized uses only!"; next };<br/> { print }' Xresources-preCIS &gt; Xresources <br/>
          chown root:root Xresources<br/> chmod 644 Xresources<br/> diff Xresources-preCIS Xresources<br/>fi <br/>if [
          -e /etc/X11/xdm/kdmrc ]; then<br/> cd /etc/X11/xdm<br/> awk '/GreetString=/ \<br/> { print
          "GreetString=Authorized uses only!"; next };<br/> { print }' kdmrc-preCIS &gt; kdmrc <br/> chown root:root
          kdmrc<br/> chmod 644 kdmrc<br/> printf "/etc/X11/xdm/kdmrc \troot.root\t644\n" &gt;&gt; \<br/>
          /etc/permissions.local<br/> diff kdmrc-preCIS kdmrc<br/>fi <br/>if [ -e /etc/X11/gdm/gdm.conf ]; then<br/> cd
          /etc/X11/gdm<br/> cp -pf gdm.conf gdm.conf.tmp <br/> awk '/^Greeter=/ &amp;&amp; /gdmgreeter/ \<br/> {
          printf("#%s\n", $0); next };<br/> /^#Greeter=/ &amp;&amp; /gdmlogin/ \<br/> { $1 = "Greeter=gdmlogin"
          }; /Welcome=/ \<br/> { print "`"; next }; <br/> { print }' gdm.conf.tmp &gt; gdm.conf<br/> rm -f
          gdm.conf.tmp <br/> chown root:root gdm.conf <br/> chmod 644 gdm.conf <br/> printf "/etc/X11/gdm/gdm.conf
          \troot.root\t644\n" &gt;&gt; \<br/> /etc/permissions.local<br/> diff gdm.conf-preCIS gdm.conf<br/>fi </p>
        <h3>Discussion: </h3>
        <p>The commands above set the warning message on xdm, kdm and gdm – that is, all of the X display managers.</p>
      </xccdf:description>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--/etc/X11/xdm/Xresources either does not exist or contains a warning banner-->
          <xccdf:complex-check operator="AND">
            <xccdf:check system="http://cisecurity.org/check">
              <!--/etc/X11/xdm/Xresources does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="command test «test -e /etc/X11/xdm/Xresources»" success="fail">
                  <ecl:command>test -e /etc/X11/xdm/Xresources</ecl:command>
                  <ecl:line-selection op="pm" value=".+"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="AND">
            <xccdf:check system="http://cisecurity.org/check">
              <!--command test «egrep '^xlogin\*greeting:[[:space:]]*Authorized' /etc/X11/xdm/Xresources»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="command test «egrep '^xlogin\*greeting:[[:space:]]*Authorized' /etc/X11/xdm/Xresources»" success="pass">
                  <ecl:command>egrep '^xlogin\*greeting:[[:space:]]*Authorized' /etc/X11/xdm/Xresources</ecl:command>
                  <ecl:line-selection op="pm" value=".*"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--/etc/X11/xdm/Xresources ownership and permission-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="/etc/X11/xdm/Xresources ownership and permission">
                    <ecl:command>find /etc/X11/xdm/Xresources -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
                  <ecl:line-selection op="pm" value=".+"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--/etc/X11/xdm/kdmrc either does not exist or contains a warning banner-->
          <xccdf:complex-check operator="AND">
            <xccdf:check system="http://cisecurity.org/check">
              <!--/etc/X11/xdm/kdmrc does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="command test «test -e /etc/X11/xdm/kdmrc»" success="fail">
                  <ecl:command>test -e /etc/X11/xdm/kdmrc</ecl:command>
                  <ecl:line-selection op="pm" value=".+"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="AND">
            <xccdf:check system="http://cisecurity.org/check">
              <!--command test «egrep '^GreetString=Authorized' /etc/X11/xdm/kdmrc»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="command test «egrep '^GreetString=Authorized' /etc/X11/xdm/kdmrc»" success="pass">
                  <ecl:command>egrep '^GreetString=Authorized' /etc/X11/xdm/kdmrc</ecl:command>
                  <ecl:line-selection op="pm" value=".*"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--/etc/X11/xdm/kdmrc ownership and permission-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="/etc/X11/xdm/kdmrc ownership and permission">
                    <ecl:command>find /etc/X11/xdm/kdmrc -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
                  <ecl:line-selection op="pm" value=".+"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <xccdf:check-content>
                  <ecl:shell-command check="all" comment="/etc/X11/xdm/kdmrc permissions correct in /etc/permissions.local" success="pass">
                  <ecl:command>egrep '^/etc/X11/xdm/kdmrc[[:space:]]+root\.root[[:space:]]+0?644$' /etc/permissions.local</ecl:command>
                  <ecl:line-selection op="pm" value="^.*$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--/etc/X11/gdm/gdm.conf-->
          <xccdf:complex-check operator="AND">
            <xccdf:check system="http://cisecurity.org/check">
              <!--/etc/X11/gdm/gdm.conf does not exist-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="command test «test -e /etc/X11/gdm/gdm.conf»" success="fail">
                  <ecl:command>test -e /etc/X11/gdm/gdm.conf</ecl:command>
                  <ecl:line-selection op="pm" value=".+"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
          <xccdf:complex-check operator="AND">
            <xccdf:check system="http://cisecurity.org/check">
              <!--command test «egrep '^Greeter=gdmlogin$' /etc/X11/xdm/gdm.conf»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="command test «egrep '^Greeter=gdmlogin$' /etc/X11/xdm/gdm.conf»" success="pass">
                  <ecl:command>egrep '^Greeter=gdmlogin$' /etc/X11/xdm/gdm.conf</ecl:command>
                  <ecl:line-selection op="pm" value=".*"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--command test «egrep '^Welcome=Authorized' /etc/X11/xdm/gdm.conf»-->
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="command test «egrep '^Welcome=Authorized' /etc/X11/xdm/gdm.conf»" success="pass">
                  <ecl:command>egrep '^Welcome=Authorized' /etc/X11/xdm/gdm.conf</ecl:command>
                  <ecl:line-selection op="pm" value=".*"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <!--/etc/X11/xdm/gdm.conf ownership and permission-->
              <xccdf:check-content>
                <ecl:shell-command check="none exist" comment="/etc/X11/xdm/gdm.conf ownership and permission">
                    <ecl:command>find /etc/X11/xdm/gdm.conf -follow -maxdepth 0 ! \( -user root -group root \) -o -perm /go+wx -ls</ecl:command>
                  <ecl:line-selection op="pm" value=".+"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <xccdf:check system="http://cisecurity.org/check">
              <xccdf:check-content>
                <ecl:shell-command check="all" comment="/etc/X11/xdm/gdm.conf permissions correct in /etc/permissions.local" success="pass">
                  <ecl:command>egrep '^/etc/X11/xdm/gdm.conf[[:space:]]+root\.root[[:space:]]+0?644$' /etc/permissions.local</ecl:command>
                  <ecl:line-selection op="pm" value="^.*$"/>
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
          </xccdf:complex-check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="r0903" role="full" selected="false" weight="1.0">
      <xccdf:title>Create "authorized only" Banners For vsftpd, If Applicable</xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>cd /etc <br/>if [ -d vsftpd ]; then <br/> cd vsftpd <br/>fi<br/>if [ -e vsftpd.conf ]; then <br/> echo
          "ftpd_banner=Authorized users only. All activity \<br/>may be monitored and reported." &gt;&gt;
          vsftpd.conf <br/>fi </p>
        <h3>Discussion: </h3>
        <p>This item configure's vsftpd "authorized users only" banner messages.</p>
        <p>
          <br/>
          <br/>
        </p>
      </xccdf:description>
      <xccdf:complex-check operator="OR">
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service «vsftpd» does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service «vsftpd» does not exist">
              <ecl:command>chkconfig vsftpd</ecl:command>
              <ecl:line-selection op="pm" value="^.*(on|off|xinetd)$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «egrep '^ftpd_banner=Authorized users only. All activity may be monitored and reported\.$' /etc/vsftpd.conf»-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test «egrep '^ftpd_banner=Authorized users only. All activity may be monitored and reported\.$' /etc/vsftpd.conf»" success="pass">
              <ecl:command>egrep '^ftpd_banner=Authorized users only. All activity may be monitored and reported\.$'
                /etc/vsftpd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".*"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="g10">
    <xccdf:title>Anti-Virus Consideration</xccdf:title>
    <xccdf:description>
      <xhtml:strong>Anti-Virus Products</xhtml:strong>
      <xhtml:br/>
      <xhtml:br/>Certain systems - such as mail servers and file servers - should have anti-virus software installed to protect the
      Windows clients that use the server. The following table summarizes the popular anti-virus offerings for the Linux platform. The
      Center for Internet security makes no endorsement for any product.<xhtml:br/><xhtml:br/><xhtml:table border="1" cellpadding="1" cellspacing="1"><xhtml:tr><xhtml:th>Vendor</xhtml:th><xhtml:th>Product</xhtml:th></xhtml:tr><xhtml:tr><xhtml:td>Sophos<xhtml:br/><xhtml:a href="http://www.sophos.com/">http://www.sophos.com/</xhtml:a></xhtml:td><xhtml:td>Commercial</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>NAI Virus Scan<xhtml:br/></xhtml:td><xhtml:td>Commercial</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>ClamAV<xhtml:br/><xhtml:a href="http://www.clamav.net/">http://www.clamav.net/</xhtml:a></xhtml:td><xhtml:td>Open Source</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>McAfee<xhtml:br/><xhtml:a href="http://www.mcafee.com/">http://www.mcafee.com/</xhtml:a></xhtml:td><xhtml:td>Commercial</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>CyberSoft Vfind<xhtml:br/><xhtml:a href="http://www.cyber.com/products/masterprice.html">http://www.cyber.com/products/masterprice.html</xhtml:a></xhtml:td><xhtml:td/></xhtml:tr><xhtml:tr><xhtml:td>H+B edv (hbedv)<xhtml:br/></xhtml:td><xhtml:td/></xhtml:tr><xhtml:tr><xhtml:td>f-prot Antivirus<xhtml:br/><xhtml:a href="http://www.f-prot.com/products/corporate_users/unix/">http://www.f-prot.com/products/corporate_users/unix/</xhtml:a></xhtml:td><xhtml:td>Commercial</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>Trend Micro<xhtml:br/></xhtml:td><xhtml:td>Commercial</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>Computer Associates InoculateIT<xhtml:br/><xhtml:a href="http://www.cai.com/">http://www.cai.com/</xhtml:a></xhtml:td><xhtml:td>Commercial</xhtml:td></xhtml:tr></xhtml:table></xccdf:description>
    <xccdf:Rule id="r10" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Anti-Virus Products</xccdf:title>
      <xccdf:description>
        <p>Certain systems – such as mail servers and file servers – should have anti-virus software installed to
          protect the Windows clients that use the server. The following table summarizes the popular anti-virus
          offerings for the Linux platform. The Center for Internet security makes no endorsement for any product. </p>
        <dl>
          <dd>
            <table border="0" cellpadding="7" cellspacing="0" width="522">
              <col span="1" width="314"/>
              <col span="1" width="180"/>
              <tr>
                <td colspan="1" rowspan="1">
                  <p>
                    <b>Vendor</b>
                  </p>
                </td>
                <td colspan="1" rowspan="1">
                  <p>
                    <b>Product</b>
                  </p>
                </td>
              </tr>
              <tr>
                <td colspan="1" rowspan="1">
                  <p style="margin-bottom: 0in">Sophos</p>
                  <p>
                    <a href="http://www.sophos.com/" shape="rect">http://www.sophos.com/</a>
                  </p>
                </td>
                <td colspan="1" rowspan="1">
                  <p>Commercial</p>
                </td>
              </tr>
              <tr>
                <td colspan="1" rowspan="1">
                  <p style="margin-bottom: 0in">NAI Virus Scan</p>
                  <p>
                    <br/>
                  </p>
                </td>
                <td colspan="1" rowspan="1">
                  <p>Commercial</p>
                </td>
              </tr>
              <tr>
                <td colspan="1" rowspan="1">
                  <p style="margin-bottom: 0in">ClamAV</p>
                  <p>
                    <a href="http://www.clamav.net/" shape="rect">http://www.clamav.net/</a>
                  </p>
                </td>
                <td colspan="1" rowspan="1">
                  <p>Open Source</p>
                </td>
              </tr>
              <tr>
                <td colspan="1" rowspan="1">
                  <p style="margin-bottom: 0in">McAfee </p>
                  <p>
                    <a href="http://www.mcafee.com/" shape="rect">http://www.mcafee.com/</a>
                  </p>
                </td>
                <td colspan="1" rowspan="1">
                  <p>Commercial</p>
                </td>
              </tr>
              <tr>
                <td colspan="1" rowspan="1">
                  <p lang="fr-CA" style="margin-bottom: 0in">CyberSoft Vfind</p>
                  <p>
                    <a href="http://www.cyber.com/products/masterprice.html" shape="rect">
                      <span lang="fr-CA">http://www.cyber.com/products/masterprice.html</span>
                    </a>
                  </p>
                </td>
                <td colspan="1" rowspan="1">
                  <p lang="fr-CA">
                    <br/>
                  </p>
                </td>
              </tr>
              <tr>
                <td colspan="1" rowspan="1">
                  <p>H+B edv (hbedv)</p>
                </td>
                <td colspan="1" rowspan="1">
                  <p>
                    <br/>
                  </p>
                </td>
              </tr>
              <tr>
                <td colspan="1" rowspan="1">
                  <p style="margin-bottom: 0in">f-prot Antivirus</p>
                  <p>
                    <a href="http://www.f-prot.com/products/corporate_users/unix/" shape="rect">http://www.f-prot.com/products/corporate_users/unix/</a>
                  </p>
                </td>
                <td colspan="1" rowspan="1">
                  <p>Commercial</p>
                </td>
              </tr>
              <tr>
                <td colspan="1" rowspan="1">
                  <p style="font-weight: medium; page-break-after: avoid">Trend Micro</p>
                </td>
                <td colspan="1" rowspan="1">
                  <p>Commercial</p>
                </td>
              </tr>
              <tr>
                <td colspan="1" rowspan="1">
                  <p style="margin-bottom: 0in">Computer Associates InoculateIT</p>
                  <p>
                    <a href="http://www.cai.com/" shape="rect">http://www.cai.com/</a>
                  </p>
                </td>
                <td colspan="1" rowspan="1">
                  <p>Commercial</p>
                </td>
              </tr>
            </table>
          </dd>
        </dl>
      </xccdf:description>
      <!-- Interactive remove
            <xccdf:check system="http://www.cisecurity.org/xccdf/interactive/0.1">
                <xccdf:check-content-ref href="sles-9.0-inter.xml" name="qstn-0004"/>
            </xccdf:check>
            Interactive remove -->
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="g11">
    <xccdf:title>Remove Backup Files</xccdf:title>
    <xccdf:description>When you are certain your changes are successful, remove the backup files as they will have insecure contents
      and/or permissions/ownerships. By leaving these files on your system, an attacker can use the backup files as if they were the
      originals thereby defeating much of your efforts.<xhtml:br/><xhtml:br/>Action:<xhtml:br/><xhtml:code>find / -xdev | grep preCIS | xargs rm -rf</xhtml:code></xccdf:description>
    <xccdf:Rule id="r11" role="full" selected="false" weight="1.0">
      <xccdf:title>Remove Backup Files</xccdf:title>
      <xccdf:description>
        <h3>Action: </h3>
        <p>
          <i>
            <b>Warning: Read discussion before performing this action.</b>
          </i>
        </p>
        <p>find / -xdev | grep preCIS | xargs rm -rf</p>
        <h3>Discussion: </h3>
        <p>When you are certain your changes are successful, remove the backup files as they will have insecure contents
          and/or permissions/ownerships. By leaving these files on your system, an attacker can use the backup files as
          if they were the originals thereby defeating much of your efforts.</p>
      </xccdf:description>

        <xccdf:check system="http://cisecurity.org/check">
          <!--command test «find / -xdev | grep preCIS»-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test «find / -xdev | grep preCIS»">
              <ecl:command>find / -xdev  -name "*preCIS*"</ecl:command>

            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>

    </xccdf:Rule>
  </xccdf:Group>
<xccdf:signature><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>x9RnJ4IXdJpTgbFUVmix4Iv7qZI=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
HAUAI/Fr8Xi7rEMpD9BZTMRsnRLnm9HdB4N2m+eGmP8OFT7ENISAHgV81fzr/kwXA9qSIRTUFk5V
1vRaMSdAkTp7Drb64dgVDE8rC+JZSoRyiuFhFtSZjgRvXjjkxBXmPzjdr37He46PFT8/2Vm6UGsU
V4wKBLrabxwlnn5uecyU4gDQjQjLR4hs1iaXSgW0eujLyXjQBKU7IhdBTzkyEoq5kCSBVnpgdYdG
UScEb9oUo1t4vdeQKGu29W5isbpylLNfRdcXZAWa2MLXj04C8bbgRt6t6x3LvBFfSlMx2qD9RRRg
WrwdEfXYt04UWxwST0sFmsIrTBfN3fVa0uF3VA==
</ds:SignatureValue>
<ds:KeyInfo>
<ds:X509Data>
<ds:X509Certificate>
MIIFRzCCBC+gAwIBAgIHTwpN/4tOfDANBgkqhkiG9w0BAQsFADCBtDELMAkGA1UEBhMCVVMxEDAO
BgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxGjAYBgNVBAoTEUdvRGFkZHkuY29t
LCBJbmMuMS0wKwYDVQQLEyRodHRwOi8vY2VydHMuZ29kYWRkeS5jb20vcmVwb3NpdG9yeS8xMzAx
BgNVBAMTKkdvIERhZGR5IFNlY3VyZSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjAeFw0xNDA5
MTgxNDM0MjFaFw0xNzEwMjAxODU3NDRaMIGTMQswCQYDVQQGEwJVUzERMA8GA1UECBMITmV3IFlv
cmsxFzAVBgNVBAcTDkVhc3QgR3JlZW5idXNoMSswKQYDVQQKEyJDZW50ZXIgZm9yIEludGVybmV0
IFNlY3VyaXR5LCBJbmMuMSswKQYDVQQDEyJDZW50ZXIgZm9yIEludGVybmV0IFNlY3VyaXR5LCBJ
bmMuMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0MGnj6yX2QHklGadAfTBxssvP+2f
YegPpNGXfEmPXZXrWeME2BqIbO+hKXTuwUucRK6RvQJTjgzNgOhQx3HcclRwQB4xj/14hOoZSeQ3
haw/Xjl4WofsWizM5j/g1iWBgxi3xk/aREfKKb0ulBMtP/WYFpSRjZ/Z7m5QKii0feJPxbf+wrZ+
UvNZ8uBdO+SEmbhS/DVESsEWzXn6StbQpa2dno2aIOGZXQKcUY2d3WZ4Zk+zawFcRUYslVIrOhMb
0e3+hbJEtFwm5ekehdNimSozYyyLGZJonLlvr8PfmvQ1ceu7enWCRfZrRWAlDHFaouLdtU/OmXc+
Um7cLwz8VQIDAQABo4IBezCCAXcwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDAzAO
BgNVHQ8BAf8EBAMCB4AwNQYDVR0fBC4wLDAqoCigJoYkaHR0cDovL2NybC5nb2RhZGR5LmNvbS9n
ZGlnMnM1LTAuY3JsMFMGA1UdIARMMEowSAYLYIZIAYb9bQEHFwIwOTA3BggrBgEFBQcCARYraHR0
cDovL2NlcnRpZmljYXRlcy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5LzB2BggrBgEFBQcBAQRqMGgw
JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmdvZGFkZHkuY29tLzBABggrBgEFBQcwAoY0aHR0cDov
L2NlcnRpZmljYXRlcy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5L2dkaWcyLmNydDAfBgNVHSMEGDAW
gBRAwr0njsw0gzCiM9f7bLPwtCyAzjAdBgNVHQ4EFgQU+3zn+CEg6a2xPqlBXvn64hUyoB4wDQYJ
KoZIhvcNAQELBQADggEBAEh76h1GtJ0pj04in+RUymB7fqPh6HFILkOLlTPnveyXCoHYT2M46DET
EA/NKYkoF2KA3QiZ1b+PMViuTYG2pDs71eFVPADuBCGf9IFufCDY9mPvjQiFDlLNMknXxACD8TjC
hqz+uZT2uLPw/YxkJIsCxrTQJ//ga/fHfZDrKgQfbVzxjD/4WKDe8HktjKcn+NWGPJNMgmO+IHrK
if6TB1xTo32W9QzwoXvBdLnziAUGZZghEulq6h3RCMzKPzpx5JiLlOz6JzqXHvrua+yUbr4A29Vy
vkwWgJWjyvJd2uq9MQ9l49kkrD84m41PSwpaHO99nEHRgRykopxIt8AHsIQ=
</ds:X509Certificate>
</ds:X509Data>
<ds:KeyValue>
<ds:RSAKeyValue>
<ds:Modulus>
0MGnj6yX2QHklGadAfTBxssvP+2fYegPpNGXfEmPXZXrWeME2BqIbO+hKXTuwUucRK6RvQJTjgzN
gOhQx3HcclRwQB4xj/14hOoZSeQ3haw/Xjl4WofsWizM5j/g1iWBgxi3xk/aREfKKb0ulBMtP/WY
FpSRjZ/Z7m5QKii0feJPxbf+wrZ+UvNZ8uBdO+SEmbhS/DVESsEWzXn6StbQpa2dno2aIOGZXQKc
UY2d3WZ4Zk+zawFcRUYslVIrOhMb0e3+hbJEtFwm5ekehdNimSozYyyLGZJonLlvr8PfmvQ1ceu7
enWCRfZrRWAlDHFaouLdtU/OmXc+Um7cLwz8VQ==
</ds:Modulus>
<ds:Exponent>AQAB</ds:Exponent>
</ds:RSAKeyValue>
</ds:KeyValue>
</ds:KeyInfo>
</ds:Signature></xccdf:signature></xccdf:Benchmark>