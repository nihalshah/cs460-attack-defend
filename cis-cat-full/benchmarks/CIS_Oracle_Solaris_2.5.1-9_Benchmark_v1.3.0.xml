<?xml version="1.0" encoding="UTF-8" standalone="no"?><Benchmark xmlns="http://checklists.nist.gov/xccdf/1.1" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:ecl="http://cisecurity.org/check" xmlns:xccdf="http://checklists.nist.gov/xccdf/1.1" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cis_solaris_2.5.1_9_benchmark" xml:lang="en" xsi:schemaLocation="http://checklists.nist.gov/xccdf/1.1 ../misc/xsd/xccdf-1.1.4.xsd http://cisecurity.org/check ../misc/xsd/ecl.xsd">
  <status>accepted</status>
  <title>CIS Oracle Solaris 2.5.1 - 9 Benchmark</title>
  <description>
    <xhtml:p>Recommended security settings for systems running Solaris 2.5.1 and later releases.</xhtml:p>
  </description>
  <xccdf:notice id="terms-of-use" xml:lang="en">
    BACKGROUND.
    
    The Center for Internet Security ("CIS") provides benchmarks, scoring tools, software, data, information, suggestions, ideas, and other services and materials from the CIS website or elsewhere ("Products") as a public service to Internet users worldwide.  Recommendations contained in the Products ("Recommendations") result from a consensus-building process that involves many security experts and are generally generic in nature.  The Recommendations are intended to provide helpful information to organizations attempting to evaluate or improve the security of their networks, systems, and devices.  Proper use of the Recommendations requires careful analysis and adaptation to specific user requirements.  The Recommendations are not in any way intended to be a "quick fix" for anyone's information security needs.
    
    NO REPRESENTATIONS, WARRANTIES, OR COVENANTS.
    
    CIS makes no representations, warranties, or covenants whatsoever as to (i) the positive or negative effect of the Products or the Recommendations on the operation or the security of any particular network, computer system, network device, software, hardware, or any component of any of the foregoing or (ii) the accuracy, reliability, timeliness, or completeness of  the Products or the Recommendations.  CIS is providing the Products and the Recommendations "as is" and "as available" without representations, warranties, or covenants of any kind.  
    
    USER AGREEMENTS.
    
    By using the Products and/or the Recommendations, I and/or my organization ("We") agree and acknowledge that:
    
    1.	No network, system, device, hardware, software, or component can be made fully secure;
    2.	We are using the Products and the Recommendations solely at our own risk;
    3.	We are not compensating CIS to assume any liabilities associated with our use of the Products or the Recommendations, even risks that result from 		CIS's negligence or failure to perform; 
    4.	We have the sole responsibility to evaluate the risks and benefits of the Products and Recommendations to us and to adapt the Products and the 			Recommendations to our particular circumstances and requirements;
    5.	Neither CIS, nor any CIS Party (defined below) has any responsibility to make any corrections, updates, upgrades, or bug fixes; or to notify us of 		the need for any such corrections, updates, upgrades, or bug fixes; and
    6.	Neither CIS nor any CIS Party has or will have any liability to us whatsoever (whether based in contract, tort, strict liability or otherwise) for 		any direct, indirect, incidental, consequential, or special damages (including without limitation loss of profits, loss of sales, loss of or damage 		to reputation,loss of customers, loss of software, data, information or emails, loss of privacy, loss of use of any computer or other equipment, 	business interruption, wasted management or other staff resources or claims of any kind against us from third parties) arising out of or in any way 	Connected with our use of or our inability to use any of the Products or Recommendations (even if CIS has been advised of the possibility of such 	damages), including without limitation any liability associated with infringement of intellectual property, defects, bugs, errors, omissions, 	viruses, worms, backdoors, Trojan horses or other harmful items.
    
    GRANT OF LIMITED RIGHTS.
    
    CIS hereby grants each user the following rights, but only so long as the user complies with all of the terms of these Agreed Terms of Use:
    
    1.	Except to the extent that we may have received additional authorization pursuant to a written agreement with CIS, each user may download, install and 	use each of the Products on a single computer;
    2.	Each user may print one or more copies of any Product or any component of a Product that is in a .txt, .pdf, .doc, .mcw, or .rtf format, provided 		that all such copies are printed in full and are kept intact, including without limitation the text of this Agreed Terms of Use in its entirety.
    
    RETENTION OF INTELLECTUAL PROPERTY RIGHTS; LIMITATIONS ON DISTRIBUTION.
    
    The Products are protected by copyright and other intellectual property laws and by international treaties.  We acknowledge and agree that we are not acquiring title to any intellectual property rights in the Products and that full title and all ownership rights to the Products will remain the exclusive property of CIS or CIS Parties.  CIS reserves all rights not expressly granted to users in the preceding section entitled "Grant of limited rights."
    Subject to the paragraph entitled "Special Rules" (which includes a waiver, granted to some classes of CIS Members, of certain limitations in this paragraph), and except as we may have otherwise agreed in a written agreement with CIS, we agree that we will not (i) decompile, disassemble, reverse engineer, or otherwise attempt to derive the source code for any software Product that is not already in the form of source code; (ii) distribute, redistribute, encumber, sell, rent, lease, lend, sublicense, or otherwise transfer or exploit rights to any Product or any component of a Product; (iii) post any Product or any component of a Product on any website, bulletin board, ftp server, newsgroup, or other similar mechanism or device, without regard to whether such mechanism or device is internal or external, (iv) remove or alter trademark, logo, copyright or other proprietary notices, legends, symbols or labels in any Product or any component of a Product; (v) remove these Agreed Terms of Use from, or alter these Agreed Terms of Use as they appear in, any Product or any component of a Product; (vi) use any Product or any component of a Product with any derivative works based directly on a Product or any component of a Product; (vii) use any Product or any component of a Product with other products or applications that are directly and specifically dependent on such Product or any component for any part of their functionality, or (viii) represent or claim a particular level of compliance with a CIS Benchmark, scoring tool or other Product.  We will not facilitate or otherwise aid other individuals or entities in any of the activities listed in this paragraph.
    We hereby agree to indemnify, defend, and hold CIS and all of its officers, directors, members, contributors, employees, authors, developers, agents, affiliates, licensors, information and service providers, software suppliers, hardware suppliers, and all other persons who aided CIS in the creation, development, or maintenance of the Products or Recommendations ("CIS Parties") harmless from and against any and all liability, losses, costs, and expenses (including attorneys' fees and court costs) incurred by CIS or any CIS Party in connection with any claim arising out of any violation by us of the preceding paragraph, including without limitation CIS's right, at our expense, to assume the exclusive defense and control of any matter subject to this indemnification, and in such case, we agree to cooperate with CIS in its defense of such claim.  We further agree that all CIS Parties are third-party beneficiaries of our undertakings in these Agreed Terms of Use. 
    
    SPECIAL RULES.
    
    CIS has created and will from time to time create, special rules for its members and for other persons and organizations with which CIS has a written contractual relationship.  Those special rules will override and supersede these Agreed Terms of Use with respect to the users who are covered by the special rules.
    CIS hereby grants each CIS Security Consulting or Software Vendor Member and each CIS Organizational User Member, but only so long as such Member remains in good standing with CIS and complies with all of the terms of these Agreed Terms of Use, the right to distribute the Products and Recommendations within such Member's own organization, whether by manual or electronic means.  Each such Member acknowledges and agrees that the foregoing grant is subject to the terms of such Member's membership arrangement with CIS and may, therefore, be modified or terminated by CIS at any time.
    CHOICE OF LAW; JURISDICTION; VENUE.
    
    We acknowledge and agree that these Agreed Terms of Use will be governed by and construed in accordance with the laws of the State of Maryland, that any action at law or in equity arising out of or relating to these Agreed Terms of Use shall be filed only in the courts located in the State of Maryland, that we hereby consent and submit to the personal jurisdiction of such courts for the purposes of litigating any such action.  If any of these Agreed Terms of Use shall be determined to be unlawful, void, or for any reason unenforceable, then such terms shall be deemed severable and shall not affect the validity and enforceability of any remaining provisions.
    
    BY USING THE PRODUCTS I(WE) ACKNOWLEDGE THAT WE HAVE READ THESE AGREED TERMS OF USE IN THEIR ENTIRETY, UNDERSTAND THEM, AND I(WE) AGREE TO BE BOUND BY THEM IN ALL RESPECTS.      
  </xccdf:notice>
  <version>1.3.0.9</version>
  <xccdf:Profile id="solaris-9-level-1-profile">
    <xccdf:title>Level 1 Profile</xccdf:title>
    <xccdf:description>
      <xhtml:p>This profile contains all Level 1 configuration items</xhtml:p>
    </xccdf:description>
    <xccdf:select idref="id-1.2" selected="true"/>
    <xccdf:select idref="configure-SSH" selected="true"/>
    <xccdf:select idref="disable-standard-services" selected="true"/>
    <xccdf:select idref="disable-telnet" selected="true"/>
    <xccdf:select idref="disable-FTP" selected="true"/>
    <xccdf:select idref="disable-r-commands" selected="true"/>
    <xccdf:select idref="disable-TFTP-server" selected="true"/>
    <xccdf:select idref="disable-printer-service" selected="true"/>
    <xccdf:select idref="disable-rquotad" selected="true"/>
    <xccdf:select idref="disable-CDE" selected="true"/>
    <xccdf:select idref="disable-Solaris-volume-manager" selected="true"/>
    <xccdf:select idref="disable-removable-media-deamon" selected="true"/>
    <xccdf:select idref="disable-Kerberos-client" selected="true"/>
    <xccdf:select idref="disable-GSS-daemon" selected="true"/>
    <xccdf:select idref="disable-serial-port-login" selected="true"/>
    <xccdf:select idref="id-3.2" selected="true"/>
    <xccdf:select idref="disable-inetd" selected="true"/>
    <xccdf:select idref="id-3.4" selected="true"/>
    <xccdf:select idref="disable-Solaris-boot-services" selected="true"/>
    <xccdf:select idref="disable-Solaris-other-boot-services" selected="true"/>
    <xccdf:select idref="disable-CIFS-server" selected="true"/>
    <xccdf:select idref="disable-NFS-server" selected="true"/>
    <xccdf:select idref="disable-NFS-client" selected="true"/>
    <xccdf:select idref="disable-automount" selected="true"/>
    <xccdf:select idref="disable-RPC" selected="true"/>
    <xccdf:select idref="disable-Kerberos-server" selected="true"/>
    <xccdf:select idref="disable-directory-server" selected="true"/>
    <xccdf:select idref="disable-LDAP-cache" selected="true"/>
    <xccdf:select idref="disable-printer-daemons" selected="true"/>
    <xccdf:select idref="id-3.16" selected="true"/>
    <xccdf:select idref="disable-GUI" selected="true"/>
    <xccdf:select idref="disable-web-server" selected="true"/>
    <xccdf:select idref="disable-SNMP-server" selected="true"/>
    <xccdf:select idref="disable-DHCP-server" selected="true"/>
    <xccdf:select idref="id-4.1" selected="true"/>
    <xccdf:select idref="enable-stack-protection" selected="true"/>
    <xccdf:select idref="id-4.3" selected="true"/>
    <xccdf:select idref="network-parameter-modifications" selected="true"/>
    <xccdf:select idref="network-parameter-modifications-2" selected="true"/>
    <xccdf:select idref="TCP-sequence-numbers" selected="true"/>
    <xccdf:select idref="enable-inetd-logging" selected="true"/>
    <xccdf:select idref="enable-ftpd-logging" selected="true"/>
    <xccdf:select idref="enable-ftp_and_inetd_tracing-logging" selected="true"/>
    <xccdf:select idref="id-5.4" selected="true"/>
    <xccdf:select idref="id-5.5" selected="true"/>
    <xccdf:select idref="id-5.6" selected="true"/>
    <xccdf:select idref="enable-system-accounting" selected="true"/>
    <xccdf:select idref="enable-kernel-level-auditing" selected="true"/>
    <xccdf:select idref="system-log-file-permissions" selected="true"/>
    <xccdf:select idref="id-6.1" selected="true"/>
    <xccdf:select idref="id-6.2" selected="true"/>
    <xccdf:select idref="passwd-file-permissions" selected="true"/>
    <xccdf:select idref="id-6.8" selected="true"/>
    <xccdf:select idref="id-7.1" selected="true"/>
    <xccdf:select idref="disable-secure-RPC-nobody" selected="true"/>
    <xccdf:select idref="id-7.3" selected="true"/>
    <xccdf:select idref="create-ftpusers" selected="true"/>
    <xccdf:select idref="disable-syslog-remote" selected="true"/>
    <xccdf:select idref="disable-XDMCP" selected="true"/>
    <xccdf:select idref="id-7.7" selected="true"/>
    <xccdf:select idref="locking-screensaver-timeout" selected="true"/>
    <xccdf:select idref="restrict-at-cron" selected="true"/>
    <xccdf:select idref="restrict-crontab-permissions" selected="true"/>
    <xccdf:select idref="restrict-root-logins" selected="true"/>
    <xccdf:select idref="account-lockout" selected="true"/>
    <xccdf:select idref="id-7.13" selected="true"/>
    <xccdf:select idref="block-system-accounts" selected="true"/>
    <xccdf:select idref="empty-passwords" selected="true"/>
    <xccdf:select idref="account-expiration-parameters" selected="true"/>
    <xccdf:select idref="remove-NIS-password-extension" selected="true"/>
    <xccdf:select idref="uid-0-accounts" selected="true"/>
    <xccdf:select idref="id-8.6" selected="true"/>
    <xccdf:select idref="protected-root-path" selected="true"/>
    <xccdf:select idref="user-home-permissions" selected="true"/>
    <xccdf:select idref="user-dotfile-permissions" selected="true"/>
    <xccdf:select idref="user-netrc-permissions" selected="true"/>
    <xccdf:select idref="default-user-umask" selected="true"/>
    <xccdf:select idref="default-ftp-umask" selected="true"/>
    <xccdf:select idref="mesg-n" selected="true"/>
    <xccdf:select idref="login-banners" selected="true"/>
    <xccdf:select idref="login-banners-GUI" selected="true"/>
    <xccdf:select idref="login-banners-telnet" selected="true"/>
    <xccdf:select idref="login-banners-ftp" selected="true"/>
    <xccdf:select idref="apply-latest-OS-patches" selected="false"/>
    <xccdf:select idref="world-writeable-directories-sticky" selected="false"/>
    <xccdf:select idref="world-writeable-directories" selected="false"/>
    <xccdf:select idref="suid-sgid-executables" selected="false"/>
    <xccdf:select idref="unowned-nodes" selected="false"/>
  </xccdf:Profile>
  <Group id="id-1">
    <title>Patches and Additional Software</title>
    <xccdf:description>
      <xhtml:p>Note that the items in this section involve downloading vendor patches and third-party 
        security software from external archive sites.  It is critical to always verify the integrity of 
        such software using file or package signatures (if provided) or at least MD5 checksums.  
        Failure to do so may result in the system being compromised by a “Trojan Horse” created 
        by an attacker with unauthorized access to the archive site.</xhtml:p>
      <xhtml:p>When downloading software packages and patches, always download the files to a non-
        world-writable directory.  Do not use a directory such as /tmp or /var/tmp which might 
        allow another user on the system to corrupt or interfere with the files being downloaded. </xhtml:p>
    </xccdf:description>
    <Rule id="apply-latest-OS-patches" role="full" selected="false" weight="1.0">
      <title>Apply latest OS patches</title>
      <xccdf:description>
        <xhtml:p>Keeping up-to-date with vendor patches is critical for the security and reliability of the system. Vendors issue
                    operating system updates when they become aware of security vulnerabilities and other serious functionality issues, but
                    it is up to their customers to actually download and install these patches. Sun's recommended patching strategy is
                    covered in the document "Solaris Patch Management: Recommended Strategy" available from <xhtml:a href="http://www.sun.com/blueprints/browsesubject.html#dcp.">http://www.sun.com/blueprints/browsesubject.html#dcp.</xhtml:a></xhtml:p>
        <xhtml:p>During the cluster installation process, administrators may ignore individual patch installs that fail with either
                    return code 2 (indicates that the patch has already been installed on the system) or return code 8 (the patch applies to
                    an operating system package which is not installed on the machine). If a patch install fails with any other return code,
                    consult the patch installation log in /var/sadm/install_data.</xhtml:p>
        <xhtml:p> Note that in addition to installing the Patch Clusters as described above, administrators may wish to also check
                    the Solaris [osrel].PatchReport file (available from the same FTP site as the patch clusters) for additional security or
                    functionality patches that may be required on the local system. Administrators are also encouraged to check the
                    individual README files provided with each patch for further information and post- install instructions. Automated tools
                    for maintaining current patch levels are also available, such as the Sun Patch Manager tool ("man smpatch" for more
                    info). </xhtml:p>
        <xhtml:p> Note that best practices recommend verifying the integrity of downloaded software and patches using file or
                    package signatures. Failure to do so may result in the system being compromised by a “Trojan Horse” created by an
                    attacker with unauthorized access to the archive site. Sun provides digital signatures for its patches (see <xhtml:a href="http://sunsolve.sun.com/pub-cgi/show.pl?target=patches/spfaq">http://sunsolve.sun.com/pub-cgi/show.pl?target=patches/spfaq</xhtml:a>). </xhtml:p>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10010</xccdf:ident>
      <xccdf:fixtext>
        <xhtml:ol>
          <xhtml:li> Download Sun Alert Patch Cluster into /var/sadm (obtain Sun Patch Clusters from <xhtml:a href="ftp://patches.sun.com/patchroot/clusters">ftp://patches.sun.com/patchroot/clusters</xhtml:a> and look for
                        files named [osrel]_SunAlert_Patch_Cluster.zip, where [osrel] is the Solaris OS release number). </xhtml:li>
          <xhtml:li> Execute the following commands: <xhtml:code>cd /var/sadm unzip -qq *_SunAlert_Patch_Cluster.zip cd
                            *_SunAlert_Patch_Cluster ./install_cluster -q cd .. rm -rf *_SunAlert_Patch_Cluster*</xhtml:code></xhtml:li>
        </xhtml:ol>
      </xccdf:fixtext>
      <xccdf:check system="http://www.cisecurity.org/xccdf/interactive/0.1">
        <xccdf:check-content-ref href="solaris_10_inter.xml" name="qstn-0001"/>
      </xccdf:check>
    </Rule>
    <Rule id="id-1.2" role="full" selected="false" weight="1.0">
      <title>Install TCP Wrappers</title>
      <xccdf:description>
        <xhtml:div> TCP Wrappers allow the administrator to control who has access to various network services based on the IP
                    address of the remote end of the connection. TCP Wrappers also provide logging information via Syslog about both
                    successful and unsuccessful connections.
                </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11240</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">1. Create /etc/hosts.allow: echo "ALL: &lt;net&gt;/&lt;mask&gt;,
                &lt;net&gt;/&lt;mask&gt;, …" \↵&gt;/etc/hosts.allow where each &lt;net&gt;/&lt;mask&gt;
                combination (for example, "192.168.1.0/255.255.255.0") represents one network block in use by your organization that
                requires access to this system. 2. Create /etc/hosts.deny: echo "ALL: ALL" &gt;/etc/hosts.deny 3. Update default policy
                by setting ENABLE_TCPWRAPPERS=YES in /etc/default/inetd</xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Configure TCP Wrappers-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/hosts.allow-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/hosts.allow">
              <ecl:path dt="xs:string" op="eq">/etc/hosts.allow</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^ALL:.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/hosts.deny-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/hosts.deny">
              <ecl:path dt="xs:string" op="eq">/etc/hosts.deny</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^ALL:\s+ALL$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--tcp wrappers is enabled-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/default/inetd">
              <ecl:path dt="xs:string" op="eq">/etc/default/inetd</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^ENABLE_TCPWRAPPERS\s*=\s*YES"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="configure-SSH" role="full" selected="false" weight="1.0">
      <title>Install SSH</title>
      <xccdf:description>
        <xhtml:div> OpenSSH is a popular free distribution of the standards-track SSH protocols, which allow secure encrypted
                    network logins and file transfers. However, compilation of OpenSSH is complicated by the fact that it is dependent upon
                    several other freely- available software libraries which also need to be built before OpenSSH itself can be compiled. In
                    order to simplify the installation process for Solaris 8 and earlier, we make use of a pre-compiled version of OpenSSH,
                    which is available in Solaris package format (the package contains 32-bit executables that should run on all releases of
                    Solaris from 2.5.1 onwards). This package is not required on Solaris 9 systems, since Sun is now distributing OpenSSH
                    with the Solaris operating system as of this release. For more information on building OpenSSH from source, see
                    www.openssh.com. Sun also publishes information on building OpenSSH for Solaris in its Blueprints series
                    (http://www.sun.com/security/blueprints/). </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10030</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/ssh cat &lt;&lt;EOCliConfig &gt;&gt;ssh_config Host *
                Protocol 2 EOCliConfig↵awk '/^Protocol/ { $2 = "2" }; \↵/^X11Forwarding/ { $2 = "yes" }; \↵/^MaxAuthTries/ { $2 = "5" }; ↵
                /^MaxAuthTriesLog/ { $2 = "0" }; \↵/^IgnoreRhosts/ { $2 = "yes" }; \↵/^RhostsAuthentication/ { $2 = "no" }; ↵
                /^RhostsRSAAuthentication/ { $2 = "no" }; \↵/^PermitRootLogin/ { $2 = "no" }; \↵/^PermitEmptyPasswords/ { $2 = "no" }; ↵
                /^#Banner/ { $1 = "Banner" } \↵{ print }' sshd_config &gt; sshd_config.new↵mv sshd_config.new sshd_config↵pkgchk -f -n
                -p /etc/ssh/sshd_config </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--SSH SSH-->
        <xccdf:complex-check operator="AND">
          <!--/etc/ssh/sshd_config-->
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/ssh/sshd_config Protocol 2-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/ssh/sshd_config Protocol 2">
                <ecl:path dt="xs:string" op="eq">/etc/ssh/sshd_config</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\s*Protocol\s+(\d+)\s*$">
                  <ecl:regex-group dt="xs:integer" group="1" op="ge" value="2"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/ssh/sshd_config X11Forwarding yes-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/ssh/sshd_config X11Forwarding yes">
                <ecl:path dt="xs:string" op="eq">/etc/ssh/sshd_config</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\s*X11Forwarding\s+(yes|no)\s*$">
                  <ecl:regex-group group="1" op="pm" value="yes"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/ssh/sshd_config MaxAuthTries 3-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/ssh/sshd_config MaxAuthTries 3">
                <ecl:path dt="xs:string" op="eq">/etc/ssh/sshd_config</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\s*MaxAuthTries\s+(\d+)\s*$">
                  <ecl:regex-group dt="xs:integer" group="1" op="le" value="3"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:complex-check operator="OR">
            <xccdf:check system="http://cisecurity.org/check">
              <xccdf:check-content>
                <ecl:shell-command comment="Solaris SSHD is Not Installed (MaxAuthTriesLog only applies to Solaris SSHD)" success="fail">
                  <ecl:command>pkginfo SUNWsshdr</ecl:command>                                                                
                </ecl:shell-command>
              </xccdf:check-content>
            </xccdf:check>
            <!--/etc/ssh/sshd_config MaxAuthTriesLog 0-->
            <xccdf:check system="http://cisecurity.org/check">
              <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/ssh/sshd_config MaxAuthTriesLog 0">
                <ecl:path dt="xs:string" op="eq">/etc/ssh/sshd_config</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\s*MaxAuthTriesLog\s+(\d+)\s*$">
                  <ecl:regex-group dt="xs:integer" group="1" op="eq" value="0"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
            </xccdf:check>                                      
          </xccdf:complex-check> 
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/ssh/sshd_config IgnoreRHosts yes-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/ssh/sshd_config IgnoreRHosts yes">
                <ecl:path dt="xs:string" op="eq">/etc/ssh/sshd_config</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\s*IgnoreRhosts\s+(yes|no)\s*$">
                  <ecl:regex-group group="1" op="pm" value="yes"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/ssh/sshd_config RhostsAuthentication no-->
            <xccdf:check-content>
              <ecl:file-content check="none exist" comment="/etc/ssh/sshd_config RhostsAuthentication yes is not present">
                <ecl:path dt="xs:string" op="eq">/etc/ssh/sshd_config</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\s*RhostsAuthentication\s+yes\s*$">
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/ssh/sshd_config RhostsRSAAuthentication no-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/ssh/sshd_config RhostsRSAAuthentication no">
                <ecl:path dt="xs:string" op="eq">/etc/ssh/sshd_config</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\s*RhostsRSAAuthentication\s+(yes|no)\s*$">
                  <ecl:regex-group group="1" op="pm" value="no"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/ssh/sshd_config PermitRootLogin no-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/ssh/sshd_config PermitRootLogin no">
                <ecl:path dt="xs:string" op="eq">/etc/ssh/sshd_config</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\s*PermitRootLogin\s+(yes|no)\s*$">
                  <ecl:regex-group group="1" op="pm" value="no"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/ssh/sshd_config PermitEmptyPasswords no-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/ssh/sshd_config PermitEmptyPasswords no">
                <ecl:path dt="xs:string" op="eq">/etc/ssh/sshd_config</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\s*PermitEmptyPasswords\s+(yes|no)\s*$">
                  <ecl:regex-group group="1" op="pm" value="no"/>
                </ecl:line-selection>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/ssh/sshd_config Banner-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/ssh/sshd_config Banner">
                <ecl:path dt="xs:string" op="eq">/etc/ssh/sshd_config</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\s*Banner\s+(\S+)$"/>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <!--shellcommand_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--pkgchk -f -n -p /etc/ssh/sshd_config-->
            <xccdf:check-content>
              <ecl:shell-command comment="Access to sshd_config is restricted" success="pass">
                <ecl:command>pkgchk -a -n -p /etc/ssh/sshd_config</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
      </xccdf:complex-check>
    </Rule>
  </Group>
  <Group id="id-2">
    <title>Minimize inetd network services</title>
    <xccdf:description>
      <xhtml:p>This area contains prescriptions for turning off network services that are usually not needed.</xhtml:p>
    </xccdf:description>
    <Rule id="disable-standard-services" role="full" selected="false" weight="1.0">
      <title>Disable standard services</title>
      <description>
        <xhtml:div>The stock /etc/inet/inetd.conf file shipped with Solaris contains many services which are rarely used, or which
                    have more secure alternatives. Indeed, after enabling SSH (see Item 1.3) it may be possible to completely do away with
                    all inetd- based services, since SSH provides both a secure login mechanism and a means of transferring files to and
                    from the system. In fact, the actions above will disable all standard services normally enabled in the Solaris
                    inetd.conf file. The rest of the actions in this section give the administrator the option of re-enabling certain
                    services—in particular, the services that are disabled in the last two loops in the "Action" section above. Rather than
                    disabling and then re-enabling these services, experienced administrators may wish to simply disable only those services
                    that they know are unnecessary for their systems. </xhtml:div>
      </description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10060</xccdf:ident>
      <complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf time">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^time"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf echo">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^echo"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf discard">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^discard"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf daytime">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^daytime"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf chargen">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^chargen"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf fs">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^fs"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf dtspc">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^dtspc"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf exec">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^exec"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf comsat">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^comsat"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf talk">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^talk"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf finger">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^finger"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf uucp">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^uucp"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf name">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^name"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf xaudio">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^xaudio"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf netstat">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^netstat"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf ufsd">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^ufsd"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf rexd">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^rexd"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf systat">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^systat"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf sun-dr">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^sun-dr"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf uuidgen">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^uuidgen"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--textfilecontent_test-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf krb5_prop">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^krb5_prop"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^(100068|100146|100147|100150|100221|100232|100235|kerbd|rstatd|rusersd|sprayd|walld)"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^(printer|shell|login|telnet|ftp|tftp)"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^(100083|100229|100230|100242|100234|100134|100155|rquotad)"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command success="pass">
              <ecl:command>pkgchk -a -n -p /etc/inetd.conf</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </complex-check>
    </Rule>
    <Rule id="disable-telnet" role="full" selected="false" weight="1.0">
      <title>Only enable telnet if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> telnet uses an unencrypted network protocol, which means data from the login session (such as passwords and all
                    other data transmitted during the session) can be stolen by eavesdroppers on the network, and also that the session can
                    be hijacked by outsiders to gain access to the remote system. The freely-available SSH utilities (see
                    http://www.openssh.com/) provide encrypted network logins and should be used instead. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is there a business need that requires users to access this system via telnet, rather than the more secure SSH
                protocol? If the answer to this question is yes, proceed with the action below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10290</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/network\/telnet:default/ { $2 = "enable -r" } { print }'
                /var/svc/profile/upgrade \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf telnet">
            <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="^telnet"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-FTP" role="full" selected="false" weight="1.0">
      <title>Only enable FTP if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> Like telnet, the FTP protocol is unencrypted, which means passwords and other data transmitted during the
                    session can captured by sniffing the network, and that the FTP session itself can be hijacked by an external attacker.
                    SSH provides two different encrypted file transfer mechanisms—scp and sftp—and should be used instead. Even if FTP is
                    required because the local system is an anonymous FTP server, consider requiring non-anonymous users on the system to
                    transfer files via SSH-based protocols. For further information on restricting FTP access to the system, see Item 6.5
                    below. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is this machine an (anonymous) FTP server, or is there any business reason why data must be transferred to and
                from this system via ftp, rather than scp? If the answer to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10300</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/network\/ftp:default/ { $2 = "enable -r" } { print }' /var/svc/profile/upgrade
                \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf ftp">
            <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="^ftp"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-r-commands" role="full" selected="false" weight="1.0">
      <title>Only enable rlogin/rsh/rcp if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> SSH was designed to be a drop-in replacement for these protocols. It seems unlikely that there is ever a case
                    where these tools cannot be replaced with SSH. Note that sites that are using the Kerberos security system may wish to
                    look into using the "Kerberized" versions of rlogin/rsh that are provided with Solaris (eklogin, klogin, and kshell) If
                    these protocols are left enabled, please also see Item 7.4 for additional security- related configuration settings.
                </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is there any business reason why rlogin/rsh/rcp must be used instead of the more secure ssh/scp? If the answer
                to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10310</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/network\/login:rlogin/ { $2 = "enable -r" } /network\/shell:default/ { $2 =
                "enable -r" } { print }' /var/svc/profile/upgrade \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new
                /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf shell">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^shell"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf login">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^login"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="disable-TFTP-server" role="full" selected="false" weight="1.0">
      <title>Only enable TFTP if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> TFTP is typically used for network booting of diskless workstations, X-terminals, and other similar devices
                    (TFTP is also used during network installs of systems via the Solaris Jumpstart facility). Routers and other network
                    devices may copy configuration data to remote systems via TFTP for backup. However, unless this system is needed in one
                    of these roles, it is best to leave the TFTP service disabled. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is this system a boot server or is there some other business reason why data must be transferred to and from
                this system via TFTP? If the answer to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10380</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/network\/tftp:default/ { $2 = "enable -r" } { print }' /var/svc/profile/upgrade
                \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:complex-check operator="OR">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf tftp">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^tftp"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!-- FIXME /tftpboot -->
      </xccdf:complex-check>
    </Rule>
    <Rule id="disable-printer-service" role="full" selected="false" weight="1.0">
      <title>Only enable printer service if absolutely necessary</title>
      <xccdf:description>
        <xhtml:p>in.lpd provides a BSD-compatible print server interface.  Even machines that are 
          print servers may wish to leave this service disabled if they do not need to support 
          BSD-style printing.</xhtml:p>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10420</xccdf:ident>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf printer">
            <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="^printer"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-rquotad" role="full" selected="false" weight="1.0">
      <title>Only enable rquotad if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> rquotad allows NFS clients to enforce disk quotas on file systems that are mounted from the local system. If
                    your site does not use disk quotas, then you may leave the rquotad service disabled. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is this system an NFS file server with disk quotas enabled? If the answer to this question is yes, proceed with
                the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10240</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/nfs\/rquota:default/ { $2 = "enable -r" } { print }' /var/svc/profile/upgrade
                \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf rquotad">
            <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="^rquotad"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-CDE" role="full" selected="false" weight="1.0">
      <title>Only enable CDE-related daemons if absolutely necessary</title>
      <xccdf:description>
        <xhtml:p>The rpc.ttdbserverd process supports many tools and applications in Sun's CDE 
          windowing environment, but has historically been a major security issue for Solaris 
          systems.  If you do plan to leave this service enabled, not only is it vital to keep up to 
          date on vendor patches, but also never enable this service on any system which is not 
          well protected by a complete network security infrastructure (including network and 
          host-based firewalls, packet filters, and intrusion detection infrastructure).</xhtml:p>
        
        <xhtml:p>Note that since this service uses Sun's standard RPC mechanism, it is important that the 
          system's RPC portmapper (rpcbind) also be enabled when this service is turned on.  
          For more information see Item 3.11 below.</xhtml:p>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10250</xccdf:ident>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf 100083">
            <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="^100083"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-Solaris-volume-manager" role="full" selected="false" weight="1.0">
      <title>Only enable Solaris Volume Manager daemons if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> The Solaris volume manager automatically mounts CD-ROMs and floppy disks for users whenever a disk is inserted
                    in the local system's drive (the mount command is normally a privileged command). Be aware that allowing users to mount
                    and access data from removable media drives makes it easier for malicious programs and data to be imported onto your
                    network. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is there a business case why CD-ROMs and floppy disks should be automatically mounted when inserted into system
                drives? If the answer to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10200</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/rpc\/smserver:default/ { $2 = "enable -r" } $3 ~ /.NOS81volmgt/ { $t = $2; $2 =
                $3; $3 = $t } { print }' /var/svc/profile/upgrade \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new
                /var/svc/profile/upgrade </xccdf:fix>
      <complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf 100229">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^100229"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf 100230">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^100230"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf 100242">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^100242"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
      </complex-check>
    </Rule>
    <Rule id="disable-removable-media-deamon" role="full" selected="false" weight="1.0">
      <title>Only enable removable media daemon if absolutely necessary</title>
      <xccdf:description>
        <xhtml:p>This item re-enables the rpc.smserverd process that works with the volume 
        manager (see Item 3.16 below) and the CDE file manager application to automatically 
        mount CD-ROMs and floppies when the user inserts new media into the system’s 
        drives (the mount command is normally a privileged command that can only be 
        performed by the superuser).  Be aware that allowing users to mount and access data 
        from removable media drives makes it easier for malicious programs and data to be 
        imported onto your network.</xhtml:p>
        
        <xhtml:p>Note that since this service uses Sun's standard RPC mechanism, it is important that the 
        system's RPC portmapper (rpcbind) also be enabled when this service is turned on.  
        For more information see Item 3.11 below.</xhtml:p> 
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10280</xccdf:ident>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf 100155">
            <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="^100155"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-Kerberos-client" role="full" selected="false" weight="1.0">
      <title>Only enable Kerberos-related daemons if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> Again, while Kerberos can be a security enhancement, if the local site is not currently using Kerberos then
                    there is no need to enable this service. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is the Kerberos security system in use at this site? If the answer to this question is yes, proceed with the
                actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10140</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/security\/ktkt_warn:default/ { $2 = "enable -r" } { print }'
                /var/svc/profile/upgrade \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf 100134">
            <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="^100134"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-GSS-daemon" role="full" selected="false" weight="1.0">
      <title>Only enable GSS daemon if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> The GSS API is a security abstraction layer that is designed to make it easier for developers to integrate with
                    different authentication schemes. It is most commonly used in applications for sites that use Kerberos for network
                    authentication, though it can also allow applications to interoperate with other authentication schemes. Note that since
                    this service uses Sun's standard RPC mechanism, it is important that the system's RPC portmapper (rpcbind) also be
                    enabled when this service is turned on. For more information see Item 2.2 above. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is the Kerberos security system in use at this site, or some other security software that makes use of the GSS
                API? If the answer to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10170</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/rpc\/gss:default/ { $2 = "enable -r" } { print }' /var/svc/profile/upgrade ↵
                &gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/inet/inetd.conf 100234">
            <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="^100234"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
  </Group>
  <Group id="id-3">
    <title>Minimize boot services</title>
    <xccdf:description>
      <xhtml:p>This group contains recommendations for turning off boot services that are usually not needed.</xhtml:p>
    </xccdf:description>
    <Rule id="disable-serial-port-login" role="full" selected="false" weight="1.0">
      <title>Disable login: prompts on serial ports</title>
      <xccdf:description>
        <xhtml:div> By disabling the login: prompt on the system serial devices we make it more difficult for unauthorized users to
                    attach modems, terminals, and other remote access devices to these ports. Note that this action may safely be performed
                    even if console access to the system is provided via the serial ports, because the login: prompt on the console device
                    is provided through a different mechanism. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11110</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">pmadm -d -p zsmon -s ttya pmadm -d -p zsmon -s ttyb </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Disable login: prompts on serial ports-->
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pmadm -d -p zsmon -s ttya-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="pmadm -d -p zsmon -s ttya">
              <ecl:command>pmadm -L -p zsmon -s ttya</ecl:command>
              <ecl:line-selection op="pm" value="^\w+:\w+:\w+:(\w+):">
                <ecl:regex-group group="1" op="eq" value="ux"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pmadm -d -p zsmon -s ttyb-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="pmadm -d -p zsmon -s ttyb">
              <ecl:command>pmadm -L -p zsmon -s ttyb</ecl:command>
              <ecl:line-selection op="pm" value="^\w+:\w+:\w+:(\w+):">
                <ecl:regex-group group="1" op="eq" value="ux"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="id-3.2" role="full" selected="false" weight="1.0">
      <title>Set daemon umask</title>
      <xccdf:description>
        <xhtml:div> The system default umask should be set to at least 022 in order to prevent daemon processes from creating
                    world-writable files by default. More restrictive umask values (such as 077) can be used but may cause problems for
                    certain applications—consult vendor documentation for further information. 022 is the default setting for Solaris.
                </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10880</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/default↵awk '/^CMASK=/ { $1 = "CMASK=022" } { print }' init &gt;init.new
                ↵mv init.new init↵pkgchk -f -n -p /etc/default/init </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Set daemon umask-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Set daemon umask-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Set daemon umask">
              <ecl:path dt="xs:string" op="eq">/etc/default/init</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^CMASK=(0[2367][2367])\s*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:sys init-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:sys init" success="pass">
              <ecl:command>find /etc/default/init -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 444 init-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="chmod 444 init" success="pass">
              <ecl:command>find /etc/default/init -prune \( -perm 444 \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="disable-inetd" role="full" selected="false" weight="1.0">
      <title>Disable inetd if possible</title>
      <xccdf:description>
        <xhtml:div> If the actions in Section 2 result in all inetd-based services being disabled, then there is no point in running
                    inetd at boot time. The code added to the newinetsvc boot script will result in inetd automatically being restarted at
                    boot time if services are ever enabled in inetd.conf. However, it may be necessary to manually start inetd if the
                    administrator wishes to enable some of these services without rebooting the system. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10610</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">The code in the /var/svc/profile/upgrade script will automatically detect whether or
                not the inetd service needs to be active and take appropriate action. </xccdf:fix>
      <xccdf:complex-check operator="OR">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command success="fail">
              <ecl:command>egrep -s -v '^#' /etc/inetd.conf</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!-- FIXME -->
      </xccdf:complex-check>
    </Rule>
    <Rule id="id-3.4" role="full" selected="false" weight="1.0">
      <title>Disable email server, if possible</title>
      <xccdf:description>
        <xhtml:div> It is possible to run a Unix system with the Sendmail daemon disabled and still allow users on that system to
                    send email out from that machine. Running Sendmail in "daemon mode" (with the –bd command-line option) is only required
                    on machines that act as mail servers, receiving and processing email from other hosts on the network. Note that after
                    disabling the –bd option on the local mail server on Solaris 9 (or any system running Sendmail v8.12 or later) it is
                    also necessary to modify the /etc/mail/submit.cf file. Find the line that reads “D{MTAHost}localhost” and change
                    localhost to the name of some other local mail server for the organization. This will cause email generated on the local
                    system to be relayed to that mail server for further processing and delivery. Note that if the system is an email
                    server, the administrator is encouraged to search the Web for additional documentation on Sendmail security issues. Some
                    information is available at http://www.deer-run.com/~hal/dns-sendmail/DNSandSendmail.pdf and at
                    http://www.sendmail.org/. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is this system a mail server—that is, does this machine receive and process email from other hosts? If the
                answer to this question is yes, then do not perform the action below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11190</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/mail↵awk '/DaemonPortOptions=/ &amp;&amp; /inet6/ \↵{ print "#" $0;
                next }; /DaemonPortOptions=/ &amp;&amp; !/inet6/ \↵{ print $0 ", Addr=127.0.0.1"; next }; { print }' sendmail.cf
                &gt;sendmail.cf.new↵mv sendmail.cf.new sendmail.cf↵pkgchk -f -n -p /etc/mail/sendmail.cf </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!-- FIXME -->
        <!--Prevent email server from listening on external interfaces-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Prevent email server from listening on inet6-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Prevent email server from listening on inet6">
              <ecl:path dt="xs:string" op="eq">/etc/mail/sendmail.cf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^#O\s+DaemonPortOptions=Name=MTA-v6,\s+Family=inet6.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Prevent email server from listening on external interfaces-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Prevent email server from listening on external interfaces">
              <ecl:path dt="xs:string" op="eq">/etc/mail/sendmail.cf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^O\s+DaemonPortOptions=Name=MTA-v4,\s+Family=inet,\s+Addr=127.0.0.1.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/mail/sendmail.cf-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/mail/sendmail.cf" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/mail/sendmail.cf</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="disable-Solaris-boot-services" role="full" selected="false" weight="1.0">
      <title>Disable boot services if possible</title>
      <description>
        <xhtml:dif>If the /tftpboot directory exists (see Item 2.5 above), the in.rarpd and rpc.bootparamd services will be enabled.
                    These services are designed to assist machines and devices that need to download their boot images over the network from
                    some central server. However, the system may be running TFTP and have a /tftpboot directory but not be acting as a boot
                    server (for example, many sites use TFTP to back up configuration files from their network routers). in.rarpd and
                    rpc.bootparamd should only be enabled if the machine is actually going to be acting as a boot server. </xhtml:dif>
      </description>
      <xccdf:question>Is this machine a network boot server or Jumpstart server? If the answer to this question is yes, then do not
                perform the action below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10330</xccdf:ident>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc2.d/S16boot.server -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-Solaris-other-boot-services" role="full" selected="false" weight="1.0">
      <title>Disable other standard boot services</title>
      <description>
        <xhtml:dif>Renaming these scripts in the system boot directories will effectively disable a wide variety of infrequently
                    used subsystems. The scripts are merely renamed (rather than removed outright) so that the local administrator can
                    easily "restore" any of these files if they discover a mission-critical need for one of these services. Not all of the
                    scripts listed above will exist on all systems (some are only valid for certain releases, others only exist if certain
                    OEM vendor software is installed). Note also that vendor patches may restore some of the original entries in the
                    /etc/rc*.d directories—it is always a good idea to check these boot directories and remove any scripts that may have
                    been added by the patch installation process. The rest of the actions in this section give the administrator the option
                    of re-enabling certain services—in particular, the services that are disabled in the last two loops in the "Action"
                    section above. Rather than disabling and then re-enabling these services, experienced administrators may wish to simply
                    disable only those services that they know are unnecessary for their systems. </xhtml:dif>
      </description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10340</xccdf:ident>
      <complex-check operator="AND">
        <complex-check operator="AND">
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S72autoinstall -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S85power -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S89bdconfig -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S73cachefs.daemon -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S93cacheos.finish -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S40llc2 -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S47pppd -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S47asppp -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S70uucp -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S72slpd -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S75flashprom -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S80PRESERVE -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S89PRESERVE -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S94ncalogd -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S95ncad -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S96ab2mgr -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc3.d/S77dmi -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc3.d/S80mipagent -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </complex-check>
        <complex-check operator="AND">
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S73nfs.client -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S74autofs -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S71rpc -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S72directory -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S71ldap.client -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S80lp -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S80spc -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S92volmgt -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S99dtlogin -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc2.d/S42ncakmod -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc3.d/S90samba -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc3.d/S15nfs.server -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc3.d/S13kdc.master -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc3.d/S14kdc -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc3.d/S50apache -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc3.d/S76snmpdx -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <xccdf:check-content>
              <ecl:shell-command success="fail">
                <ecl:command>find /etc/rc3.d/S34dhcp -ls</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </complex-check>
      </complex-check>
    </Rule>
    <Rule id="disable-CIFS-server" role="full" selected="false" weight="1.0">
      <title>Only enable Windows-compatibility servers if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> Solaris 9 now includes the popular Open Source Samba server for providing file and print services to
                    Windows-based systems. This allows a Solaris system to act as a file or print server on a Windows network, and even act
                    as a Domain Controller (authentication server) to older Windows operating systems. However, if this functionality is not
                    required by the site, the service should be disabled. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Does this machine provide authentication, file sharing, or printer sharing services to systems running
                Microsoft Windows operating systems? If the answer to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10210</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '$3 ~ /.NOS90samba/ { $t = $2; $2 = $3; $3 = $t } { print }'
      /var/svc/profile/upgrade \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:complex-check operator="OR">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command success="fail">
              <ecl:command>ps -ef | grep -v grep | grep smbd</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>      
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command success="fail">
              <ecl:command>find /etc/rc3.d/S90samba -ls</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="disable-NFS-server" role="full" selected="false" weight="1.0">
      <title>Only enable NFS server processes if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> NFS is frequently exploited to gain unauthorized access to files and systems. Clearly there is no need to run
                    the NFS server-related daemons on hosts that are not NFS servers. If the system is an NFS server, the admin should take
                    reasonable precautions when exporting file systems, including restricting NFS access to a specific range of local IP
                    addresses and exporting file systems "read-only" and "nosuid" where appropriate. For more information consult the
                    share_nfs manual page. Much higher levels of security can be achieved by combining NFS with secure RPC or Kerberos,
                    although there is significant administrative overhead involved in this transition. Note that if the system is an NFS
                    server than the rpcbind process must also be running (see Item 7.2 below). </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is this machine an NFS file server? If the answer to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10230</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/nfs\/server:default/ { $2 = "enable -r" } /nfs\/nlockmgr:default/ { $2 =
                "enable -r" } /nfs\/status:default/ { $2 = "enable -r" } /nfs\/mapid:default/ { $2 = "enable -r" } /nfs\/cbd:default/ { $2 =
                "enable -r" } { print }' /var/svc/profile/upgrade \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new
                /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc3.d/S15nfs.server -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-NFS-client" role="full" selected="false" weight="1.0">
      <title>Only enable NFS client processes if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div>While this action disables the standard NFS client processes (statd and lockd), it is important to note that it
                    is still possible for the superuser to mount remote file systems on the local machine via NFS. Starting with Solaris 9,
                    the administrator can completely disable NFS client access by removing the NFS client software packages (SUNWnfscr,
                    SUNWnfscu, and SUNWnfscx), but these packages will have to be re-installed if NFS is to be re-enabled at a later date.
                    Note that other file transfer schemes (such as rdist via SSH) can often be more secure than NFS for certain
                    applications, although again the use of secure RPC or Kerberos can significantly improve NFS security. Also note that if
                    the machine will be an NFS client, then the rpcbind process must be running (see Item 3.11 below). </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is there a business need for the machine to access file systems from remote file servers via NFS? If the answer
                to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10260</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/nfs\/client:default/ { $2 = "enable -r" } /nfs\/nlockmgr:default/ { $2 =
                "enable -r" } /nfs\/status:default/ { $2 = "enable -r" } { print }' /var/svc/profile/upgrade ↵
                &gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc2.d/S73nfs.client -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-automount" role="full" selected="false" weight="1.0">
      <title>Only enable automount daemon if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> The automount daemon is normally used to automatically mount NFS file systems from remote file servers when
                    needed. However, the automount daemon can also be configured to mount local (loopback) file systems as well, which may
                    include local user home directories, depending on the system configuration. Sites that have local home directories
                    configured via the automount daemon in this fashion will need to ensure that this daemon is running for Sun’s SMC
                    administrative interface to function properly. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Are any of the following statements true? • The system requires an automount daemon to automatically mount
                local and/or NFS file systems as needed. • The site uses Sun’s SMC graphical administrative interface for system management.
                If the answer to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10270</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/filesystem\/autofs:default/ { $2 = "enable -r" } { print }'
                /var/svc/profile/upgrade \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc2.d/S74autofs -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-RPC" role="full" selected="false" weight="1.0">
      <title>Only enable other RPC-based services if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> RPC-based services typically use very weak or non-existent authentication and yet may share very sensitive
                    information. Unless one of the services listed above is required on this machine, best to disable RPC-based tools
                    completely. If you are unsure whether or not a particular third-party application requires RPC services, consult with
                    the application vendor. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Are any of the following statements true? • This machine is an NFS client or server • This machine is an NIS
                (YP) or NIS+ client or server • The Kerberos security system is in use at this site • Your site uses Sun’s Solaris
                Management Console for system administration • This machine runs a GUI or GUI-based administration tool • This machine is a
                network boot server or Jumpstart server • The system is running the Volume Manager daemon (vold) • The system uses the
                Solaris Volume Manager for RAID storage management • The machine runs a third-party software application which is dependent
                on RPC support (examples: FlexLM License managers, Veritas, etc.) If the answer to this question is yes, proceed with the
                actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10070</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/rpc\/bind:default/ { $2 = "enable -r" } { print }' /var/svc/profile/upgrade
                &gt;/var/svc/profile/upgrade.new ↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade</xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc2.d/S71rpc -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-Kerberos-server" role="full" selected="false" weight="1.0">
      <title>Only enable Kerberos server daemons if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> Solaris 9 includes greater support for the Kerberos authentication system. In particular, the Kerberos server
                    daemons have been bundled with the core operating system. However, if the site is not using Kerberos or if this machine
                    is not configured as one of the site's Kerberos servers, there is no reason to enable this service. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is this system a Kerberos Key Distribution Center (KDC) for the site? If the answer to this question is yes,
                proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10130</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/security\/kadmin:default/ { $2 = "enable -r" } /security\/krb5kdc:default/ { $2
                = "enable -r" } /security\/krb5_prop:default/ { $2 = "enable -r" } { print }' /var/svc/profile/upgrade ↵
                &gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command success="fail">
              <ecl:command>find /etc/rc3.d/S13kdc.master -ls</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command success="fail">
              <ecl:command>find /etc/rc3.d/S14kdc -ls</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </complex-check>
    </Rule>
    <Rule id="disable-directory-server" role="full" selected="false" weight="1.0">
      <title>Only enable directory server if absolutely necessary</title>
      <description>
        <xhtml:div>Solaris 9 has included the iPlanet Directory Server product as part of the operating system. However, this
                    service only needs to be running on the machines that have bee designated as LDAP servers for the organization. If the
                    machine is an LDAP server, the administrator is encouraged to search the Web for additional documentation on LDAP
                    security issues. </xhtml:div>
      </description>
      <xccdf:question>Is this system an LDAP directory server for this site? If the answer to this question is yes, proceed with the
                actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10160</xccdf:ident>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc2.d/S72directory -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-LDAP-cache" role="full" selected="false" weight="1.0">
      <title>Only enable the LDAP cache manager if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> Clearly, if the local site is not currently using LDAP as a naming service, then there is no need to keep
                    LDAP-related daemons running on the local machine. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is the LDAP directory service in use at this site? If the answer to this question is yes, proceed with the
                actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10120</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/ldap\/client:default/ { $2 = "enable -r" } { print }' /var/svc/profile/upgrade
                \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc2.d/S71ldap.client -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-printer-daemons" role="full" selected="false" weight="1.0">
      <title>Only enable the printer daemons if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> If users will never print files from this machine and the system will never be used as a print server by other
                    hosts on the network, then it is safe to disable these services. The Unix print service has generally had a poor
                    security record—be sure to keep up-to-date on vendor patches. The administrator may wish to consider converting to the
                    LPRng print system (see http://www.lprng.org/), which was designed with security in mind and is widely portable across
                    many different Unix platforms. Note, however, that LPRng is not supported by Sun Microsystems. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is this system a print server, or is there a business reason why users must submit print jobs from this system?
                If the answer to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10410</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/print\/server:default/ { $2 = "enable -r" } /print\/cleanup:default/ { $2 =
                "enable"; $3 = "-r" } /print\/rfc1179:default/ { $2 = "enable -r" } { print }' /var/svc/profile/upgrade ↵
                &gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command success="fail">
              <ecl:command>find /etc/rc2.d/S80lp -ls</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command success="fail">
              <ecl:command>find /etc/rc2.d/S80spc -ls</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </complex-check>
    </Rule>
    <Rule id="id-3.16" role="full" selected="false" weight="1.0">
      <title>Only enable the volume manager if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> The Solaris volume manager automatically mounts CD-ROMs and floppy disks for users whenever a disk is inserted
                    in the local system's drive (the mount command is normally a privileged command which can only be performed by the
                    superuser). Be aware that allowing users to mount and access data from removable media drives makes it easier for
                    malicious programs and data to be imported onto your network. Note that if the machine is running Solaris 9 or later, it
                    is also necessary to re-enable the rpc.smserverd process for the volume manager to function (see Item 2.10 above).
                </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is the Solaris Volume Manager (SVM) used to manage storage on this machine? If the answer to this question is
                yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10490</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/system\/metainit:default/ { $2 = "enable -r" } /mpxio-upgrade:default/ { $2 =
                "enable -r" } /system\/mdmonitor:default/ { $2 = "enable -r" } { print }' /var/svc/profile/upgrade \↵
                &gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc2.d/S92volmgt -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-GUI" role="full" selected="false" weight="1.0">
      <title>Only enable GUI login if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> Note that for the Solaris CDE GUI to function properly, it is also necessary to enable the rpcbind process (see
                    Item 3.11) and the rpc.ttdbserverd process (see Item 2.8). The X Windows-based CDE GUI on Solaris systems, as well as
                    the rpcbind and rpc.ttdbserverd processes have had a history of security issues. Never run any GUI-oriented service or
                    application on a system unless that machine is protected by a strong network security infrastructure. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is there a business need to run a GUI on this system? If the answer to this question is yes, proceed with the
                actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10180</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/rpc-100083/ { $2 = "enable -r" } $3 ~ /.NOS99dtlogin/ { $t = $2; $2 = $3; $3 =
                $t } { print }' /var/svc/profile/upgrade \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new
                /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc2.d/S99dtlogin -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-web-server" role="full" selected="false" weight="1.0">
      <title>Only enable Web server if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> Even if this machine is a Web server, the local site may choose not to use the Web server provided with Solaris
                    in favor of a locally developed and supported Web environment. If the machine is a Web server, the administrator is
                    encouraged to search the Web for additional documentation on Web server security. A good starting point is
                    http://httpd.apache.org/docs-2.0/misc/security_tips.html. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is there a business reason why this system must run a Web server? If the answer to this question is yes,
                proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10430</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/network\/http:apache2/ { $2 = "enable -r" } $3 ~ /.NOS42ncakmod/ { $t = $2; $2
                = $3; $3 = $t } $3 ~ /.NOS94ncalogd/ { $t = $2; $2 = $3; $3 = $t } { print }' /var/svc/profile/upgrade \↵
                &gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command success="fail">
              <ecl:command>find /etc/rc3.d/S50apache -ls</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command success="fail">
              <ecl:command>find /etc/rc2.d/S42ncakmod -ls</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="disable-SNMP-server" role="full" selected="false" weight="1.0">
      <title>Only enable SNMP if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> If you are using SNMP to monitor the hosts on your network, experts recommend changing the default community
                    string used to access data via SNMP. On Solaris systems, this parameter can be changed by modifying the
                    system-group-read- community parameter in /etc/snmp/conf/snmpd.conf.</xhtml:div>
      </xccdf:description>
      <xccdf:question> Are hosts at this site remotely monitored by a tool (e.g., HP OpenView, MRTG, Cricket) that relies on SNMP? If
                the answer to this question is yes, proceed with the actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10440</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '$3 ~ /.NOS82initsma/ { $t = $2; $2 = $3; $3 = $t } { print }'
                /var/svc/profile/upgrade \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc3.d/S76snmpdx -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-DHCP-server" role="full" selected="false" weight="1.0">
      <title>Only enable DHCP server if absolutely necessary</title>
      <xccdf:description>
        <xhtml:div> DHCP is a popular protocol for dynamically assigning IP addresses and other network information to systems on
                    the network (rather than having administrators manually manage this information on each host). However, if this system
                    is not a DHCP server for the network, there is no need to be running this service. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Does this machine act as a DHCP server for the network? If the answer to this question is yes, proceed with the
                actions below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10360</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">awk '/network\/dhcp-server:default/ { $2 = "enable -r" } { print }'
                /var/svc/profile/upgrade \↵&gt;/var/svc/profile/upgrade.new↵mv /var/svc/profile/upgrade.new /var/svc/profile/upgrade </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command success="fail">
            <ecl:command>find /etc/rc3.d/S34dhcp -ls</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
  </Group>
  <Group id="id-4">
    <title>Kernel Tuning</title>
    <xccdf:description>This section describes additional measures that may be taken to provide protection on the kernel level. </xccdf:description>
    <Rule id="id-4.1" role="full" selected="false" weight="1.0">
      <title>Restrict core dumps to protected directory</title>
      <xccdf:description>
        <xhtml:div> By default core dump files are world-readable. Yet core dumps, particularly those from set-UID and set-GID
                    processes, may contain sensitive data that should not be viewed by all users on the system. The above action causes all
                    core dumps on the system to be written to a special directory that is only accessible by the superuser. Note that on
                    development workstations, this may make it difficult for developers to obtain core files for debugging without
                    administrative intervention. Core dumps tend to be large files and the contents of the /var/core directory can end up
                    rapidly consuming large amounts of disk space and possibly causing a denial of service attack on the system. It is a
                    good idea to monitor this directory on a regular basis and remove any unneeded core files. If the local site chooses,
                    dumping of core files can be completely disabled with the following command: "coreadm -d global -d global-setid -d
                    process -d proc-setid". Note that there is a bug in Solaris 7 and 8 that automatically re-enables per-process core dumps
                    during the reboot process. The only work-around at this time is to add a script to the system boot sequence that
                    explicitly runs "coreadm –d process". </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10650</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">mkdir -p /var/core↵chown root:root /var/core↵chmod 700 /var/core ↵coreadm -g
                /var/core/core_%n_%f_%u_%g_%t_%p \↵-e log -e global -e global-setid \↵-d process -d proc-setid </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Restrict core dumps to protected directory-->
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:root /var/core-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:root /var/core" success="pass">
              <ecl:command>find /var/core -prune ! \( -group root -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 700 /var/core-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 700 /var/core" success="pass">
              <ecl:command>find /var/core -prune ! \( -perm u+r+w+x-s,g-r-w-x-s,o-r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:complex-check operator="AND">
          <!--coreadm-->
          <!--shellcommand_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--coreadm -g-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="coreadm -g">
                <ecl:command>coreadm</ecl:command>
                <ecl:line-selection op="pm" value="^\s+global core file pattern: (.*$)">
                  <ecl:regex-group group="1" op="eq" value="/var/core/core_%n_%f_%u_%g_%t_%p"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <!--shellcommand_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--coreadm -e log-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="coreadm -e log">
                <ecl:command>coreadm</ecl:command>
                <ecl:line-selection op="pm" value="^\s+global core dump logging: (.*$)">
                  <ecl:regex-group group="1" op="eq" value="enabled"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <!--shellcommand_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--coreadm -e global-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="coreadm -e global">
                <ecl:command>coreadm</ecl:command>
                <ecl:line-selection op="pm" value="^\s+global core dumps: (.*$)">
                  <ecl:regex-group group="1" op="eq" value="enabled"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <!--shellcommand_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--coreadm -e global-setid-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="coreadm -e global-setid">
                <ecl:command>coreadm</ecl:command>
                <ecl:line-selection op="pm" value="^\s+global setid core dumps: (.*$)">
                  <ecl:regex-group group="1" op="eq" value="enabled"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <!--shellcommand_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--coreadm -d process-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="coreadm -d process">
                <ecl:command>coreadm</ecl:command>
                <ecl:line-selection op="pm" value="^\s+per-process core dumps: (.*$)">
                  <ecl:regex-group group="1" op="eq" value="disabled"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <!--shellcommand_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--coreadm -d process-setid-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="coreadm -d process-setid">
                <ecl:command>coreadm</ecl:command>
                <ecl:line-selection op="pm" value="^\s+per-process setid core dumps: (.*$)">
                  <ecl:regex-group group="1" op="eq" value="disabled"/>
                </ecl:line-selection>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="enable-stack-protection" role="full" selected="false" weight="1.0">
      <title>Enable stack protection</title>
      <xccdf:description>
        <xhtml:div> Buffer overflow exploits have been the basis for many of the recent highly publicized compromises and
                    defacements of large numbers of Internet connected systems. Many of the automated tools in use by system crackers
                    exploit well-known buffer overflow problems in vendor-supplied and third-party software. Enabling stack protection
                    prevents certain classes of buffer overflow attacks and is a significant security enhancement. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10670</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">if [ ! "`grep noexec_user_stack /etc/system`" ]; then ↵cat &lt;&lt;END_CFG
                &gt;&gt;/etc/system ↵* Attempt to prevent and log stack-smashing attacks ↵set noexec_user_stack = 1 ↵set
                noexec_user_stack_log = 1 ↵END_CFG↵fi↵</xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Enable stack protection-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--set noexec_user_stack = 1-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="set noexec_user_stack = 1">
              <ecl:path dt="xs:string" op="eq">/etc/system</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^set\s+noexec_user_stack\s*=\s*1\s*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--set noexec_user_stack_log = 1-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="set noexec_user_stack_log = 1">
              <ecl:path dt="xs:string" op="eq">/etc/system</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^set\s+noexec_user_stack_log\s*=\s*1\s*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="id-4.3" role="full" selected="false" weight="1.0">
      <title>Restrict NFS client requests to privileged ports</title>
      <xccdf:description>
        <xhtml:div> Setting this parameter causes the NFS server process on the local system to ignore NFS client requests that do
                    not originate from the privileged port range (ports less than 1024). This should not hinder normal NFS operations but
                    may block some automated NFS attacks that are run by unprivileged users. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10680</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">if [ ! "`grep nfssrv:nfs_portmon /etc/system`" ]; then ↵cat &lt;&lt;END_CFG
                &gt;&gt;/etc/system ↵* Require NFS clients to use privileged ports ↵set nfssrv:nfs_portmon = 1 ↵END_CFG↵fi↵</xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Restrict NFS client requests to privileged ports-->
        <xccdf:check-content>
          <ecl:file-content check="all" comment="Restrict NFS client requests to privileged ports">
            <ecl:path dt="xs:string" op="eq">/etc/system</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="^set\s+nfssrv:nfs_portmon\s*=\s*1\s*$"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="network-parameter-modifications" role="full" selected="false" weight="1.0">
      <title>Network Parameter Modifications</title>
      <xccdf:description>
        <xhtml:div> Note that we are creating a new script that will be executed at boot time to reconfigure various network
                    parameters. For a more complete discussion of these parameters and their effect on the security of the system, see:
                        <xhtml:a href="http://www.sun.com/security/blueprints/"> http://www.sun.com/security/blueprints/</xhtml:a></xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10700</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">if [ ! -f /etc/init.d/netconfig ]; then ↵cat &lt;&lt;END_SCRIPT
                &gt;/etc/init.d/netconfig ↵#!/sbin/sh↵ndd -set /dev/ip ip_forward_src_routed 0↵ndd -set /dev/ip ip6_forward_src_routed 0
                ↵ndd -set /dev/tcp tcp_rev_src_routes 0↵ndd -set /dev/ip ip_forward_directed_broadcasts 0↵ndd -set /dev/tcp
                tcp_conn_req_max_q0 4096↵ndd -set /dev/tcp tcp_conn_req_max_q 1024↵ndd -set /dev/ip ip_respond_to_timestamp 0↵ndd -set
                /dev/ip ip_respond_to_timestamp_broadcast 0↵ndd -set /dev/ip ip_respond_to_address_mask_broadcast 0↵ndd -set /dev/ip
                ip_respond_to_echo_broadcast 0↵ndd -set /dev/arp arp_cleanup_interval 60000↵ndd -set /dev/ip ip_ire_arp_interval 60000↵ndd
                -set /dev/ip ip_ignore_redirect 1↵ndd -set /dev/ip ip6_ignore_redirect 1↵ndd -set /dev/tcp tcp_extra_priv_ports_add 6112
                ↵END_SCRIPT↵chown root:root /etc/init.d/netconfig↵chmod 744 /etc/init.d/netconfig ln -s /etc/init.d/netconfig
                /etc/rc2.d/S05netconfig↵fi↵</xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Network Parameter Modificationss-->
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_forward_src_routed 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_forward_src_routed 0">
              <ecl:command>ndd -get /dev/ip ip_forward_src_routed</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip6_forward_src_routed 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip6_forward_src_routed 0">
              <ecl:command>ndd -get /dev/ip ip6_forward_src_routed</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/tcp tcp_rev_src_routes 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/tcp tcp_rev_src_routes 0">
              <ecl:command>ndd -get /dev/tcp tcp_rev_src_routes</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_forward_directed_broadcasts 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_forward_directed_broadcasts 0">
              <ecl:command>ndd -get /dev/ip ip_forward_directed_broadcasts</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/tcp tcp_conn_req_max_q0 4096-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/tcp tcp_conn_req_max_q0 4096">
              <ecl:command>ndd -get /dev/tcp tcp_conn_req_max_q0</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="4096"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/tcp tcp_conn_req_max_q 1024-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/tcp tcp_conn_req_max_q 1024">
              <ecl:command>ndd -get /dev/tcp tcp_conn_req_max_q</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="1024"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_respond_to_timestamp 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_respond_to_timestamp 0">
              <ecl:command>ndd -get /dev/ip ip_respond_to_timestamp</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_respond_to_timestamp_broadcast 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_respond_to_timestamp_broadcast 0">
              <ecl:command>ndd -get /dev/ip ip_respond_to_timestamp_broadcast</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_respond_to_address_mask_broadcast 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_respond_to_address_mask_broadcast 0">
              <ecl:command>ndd -get /dev/ip ip_respond_to_address_mask_broadcast</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_respond_to_echo_broadcast 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_respond_to_echo_broadcast 0">
              <ecl:command>ndd -get /dev/ip ip_respond_to_echo_broadcast</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/arp arp_cleanup_interval 60000-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/arp arp_cleanup_interval 60000">
              <ecl:command>ndd -get /dev/arp arp_cleanup_interval</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="60000"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_ire_arp_interval 60000-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_ire_arp_interval 60000">
              <ecl:command>ndd -get /dev/ip ip_ire_arp_interval</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="60000"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_ignore_redirect 1-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_ignore_redirect 1">
              <ecl:command>ndd -get /dev/ip ip_ignore_redirect</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="1"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip6_ignore_redirect 1-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip6_ignore_redirect 1">
              <ecl:command>ndd -get /dev/ip ip6_ignore_redirect</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="1"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/tcp tcp_extra_priv_ports_add 6112-->
          <xccdf:check-content>
            <ecl:shell-command check="at least one" comment="ndd -set /dev/tcp tcp_extra_priv_ports_add 6112">
              <ecl:command>ndd /dev/tcp tcp_extra_priv_ports</ecl:command>
              <ecl:line-selection op="pm" value="^(\d+).*$">
                <ecl:regex-group group="1" op="eq" value="6112"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="network-parameter-modifications-2" role="full" selected="false" weight="1.0">
      <title>Additional network parameter modifications</title>
      <xccdf:description>
        <xhtml:div> For a more complete discussion of these parameters and their effect on the security of the system, see the URL
                    noted in the previous item. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is this system going to be used as a firewall or gateway to pass network traffic between different networks? If
                the answer to this question is yes, then do not perform the action below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10710</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">routeadm -d ipv4-forwarding -d ipv6-forwarding if [ ! "`grep redirects
                /etc/init.d/netconfig`" ] then cat &lt;&lt;END_SCRIPT &gt;&gt;/etc/init.d/netconfig↵ndd -set /dev/ip
                ip_strict_dst_multihoming 1↵ndd -set /dev/ip ip6_strict_dst_multihoming 1↵ndd -set /dev/ip ip_send_redirects 0↵ndd -set
                /dev/ip ip6_send_redirects 0 END_SCRIPT↵fi↵</xccdf:fix>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_forwarding 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_forwarding 0">
              <ecl:command>ndd -get /dev/ip ip_forwarding</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip6_forwarding 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip6_forwarding 0">
              <ecl:command>ndd -get /dev/ip ip6_forwarding</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_strict_dst_multihoming 1-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_strict_dst_multihoming 1">
              <ecl:command>ndd -get /dev/ip ip_strict_dst_multihoming</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="1"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip6_strict_dst_multihoming 1-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip6_strict_dst_multihoming 1">
              <ecl:command>ndd -get /dev/ip ip6_strict_dst_multihoming</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="1"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip_send_redirects 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip_send_redirects 0">
              <ecl:command>ndd -get /dev/ip ip_send_redirects</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--ndd -set /dev/ip ip6_send_redirects 0-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="ndd -set /dev/ip ip6_send_redirects 0">
              <ecl:command>ndd -get /dev/ip ip6_send_redirects</ecl:command>
              <ecl:line-selection op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="eq" value="0"/>
              </ecl:line-selection>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="TCP-sequence-numbers" role="full" selected="false" weight="1.0">
      <title>Use better TCP sequence numbers</title>
      <xccdf:description>
        <xhtml:div> Setting this parameter in /etc/default/inetinit causes the system to use a better randomization algorithm for
                    generating initial TCP sequence numbers. This makes remote session hijacking attacks more difficult, as well as any
                    other network- based attack that relies on predicting TCP sequence number information. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10690</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/default↵awk '/TCP_STRONG_ISS=/ { $1 = "TCP_STRONG_ISS=2" }; \↵{ print }'
                inetinit &gt; inetinit.new↵mv inetinit.new inetinit↵pkgchk -f -n -p /etc/default/inetinit </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Use better TCP sequence numbers-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Use better TCP sequence numbers-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Use better TCP sequence numbers">
              <ecl:path dt="xs:string" op="eq">/etc/default/inetinit</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^TCP_STRONG_ISS\s*=\s*2\s*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/default/inetinit-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/default/inetinit" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/default/inetinit</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
  </Group>
  <Group id="id-5">
    <title>Logging</title>
    <xccdf:description>
      <xhtml:p>The items in this section cover enabling various different forms of system logging in order 
        to keep track of activity on the system.  Tools such as Swatch 
        (http://www.oit.ucsb.edu/~eta/swatch/) and Logcheck 
        (http://sourceforge.net/projects/sentrytools/) can be used to 
        automatically monitor logs for intrusion attempts and other suspicious system behavior.  
        Note that these tools are not officially supported by Sun Microsystems.</xhtml:p>
      
      <xhtml:p>In addition to the local log files created by the steps in this section, it is also recommended 
        that sites collect copies of their system logs on a secure, centralized log server.  Not only 
        does centralized logging help sites correlate events that may be occurring on multiple 
        systems, but having a second copy of the system log information may be critical after a 
        system compromise where the attacker has modified the local log files on the affected 
        system(s).</xhtml:p>
      
      <xhtml:p>Because it is often necessary to correlate log information from many different systems 
        (particularly after a security incident) experts recommend establishing some form of time 
        synchronization among systems and devices connected to the local network.  The standard 
        Internet protocol for time synchronization is the Network Time Protocol (NTP), which is 
        supported by most network-ready devices.  More information on NTP can be found at 
        http://www.sun.com/security/blueprints/ and 
        http://www.ntp.org. </xhtml:p>
    </xccdf:description>
    <Rule id="enable-inetd-logging" role="full" selected="false" weight="1.0">
      <title>Turn on inetd tracing</title>
      <xccdf:description>
        <xhtml:div> If inetd is running, it is a good idea to make use of the "tracing" (-t) feature of the Solaris inetd that logs
                    information about the source of any network connections seen by the daemon. This information is logged via Syslog and by
                    default Solaris systems deposit this logging information in /var/adm/messages with other system log messages. Should the
                    administrator wish to capture this information in a separate file, simply modify /etc/syslog.conf to log daemon.notice
                    to some other log file destination (see Item 5.3 below). In addition to the information provided by inetd tracing, the
                    popular free PortSentry tool (http://sourceforge.net/projects/sentrytools/) can be used to monitor access attempts on
                    unused ports. Note that running PortSentry may result in the CIS testing tools reporting "false positives" for "active"
                    ports that are actually being held by the PortSentry daemon. Note that PortSentry is not officially supported by Sun
                    Microsystems. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10750</xccdf:ident>
      <complex-check operator="AND">
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/default/inetd">
              <ecl:path dt="xs:string" op="eq">/etc/default/inetd</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^ENABLE_CONNECTION_LOGGING\s*=\s*YES"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:sys /etc/default/inetd-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:sys inetd" success="pass">
              <ecl:command>find /etc/default/inetd -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 444 inetd-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 444 inetd" success="pass">
              <ecl:command>find /etc/default/inetd -prune ! \( -perm u+r-w-x-s,g+r-w-x-s,o+r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </complex-check>
    </Rule>
    <Rule id="enable-ftpd-logging" role="full" selected="false" weight="1.0">
      <title>Turn on additional logging for FTP daemon</title>
      <xccdf:description>
        <xhtml:div> If the FTP daemon is left on, it is recommended that the "debugging" (-d) and connection logging (-l) flags also
                    be enabled to track FTP activity on the system. Note that enabling debugging on the FTP daemon can cause user passwords
                    to appear in clear-text form in the system logs, if the user accidentally types their password at the username prompt.
                    Information about FTP sessions will be logged via Syslog, but the system must be configured to capture these messages.
                    For further configuration information, see Item 5.3 below. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10760</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">Ensure in.ftpd is invoked with the -l and -d parameters in /etc/inet/inetd.conf</xccdf:fix>
      <complex-check operator="AND">
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/inet/inetd.conf">
              <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="\s+in\.ftpd\s+-(d|l)\s+-(l|d)\s+"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:sys /etc/default/inetd-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:sys inetd.conf" success="pass">
              <ecl:command>find /etc/inet/inetd.conf -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 444 inetd-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 444 inetd.conf" success="pass">
              <ecl:command>find /etc/inet/inetd.conf -prune ! \( -perm u+r-w-x-s,g+r-w-x-s,o+r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </complex-check>
    </Rule>
    <Rule id="enable-ftp_and_inetd_tracing-logging" role="full" selected="false" weight="1.0">
      <title>Capture FTP and inetd Connection Tracing Info</title>
      <xccdf:description>
        <xhtml:div> If the FTP service is enabled on the system, Item 4.2 enables the "debugging" (-d) and connection logging (-l)
                    flags to track FTP activity on the system. Similarly, the tracing (-t) option to inetd was enabled in Item 4.1 above.
                    All of this information is logged to Syslog, but the Syslog daemon must be configured to capture this information to a
                    file. The connlog file should be reviewed on a regular basis. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10770</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">if [ ! "`grep -v '^#' /etc/syslog.conf | \↵grep /var/log/connlog`" ]; then echo
                "daemon.debug\t\t\t/var/log/connlog" \↵&gt;&gt;/etc/syslog.conf↵fi↵touch /var/log/connlog↵chown root:root
                /var/log/connlog↵chmod 600 /var/log/connlog logadm -w connlog -C 13 -a 'pkill -HUP syslogd' \↵/var/log/connlog </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Capture FTP and inetd Connection Tracing Info-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--grep connlog /etc/syslog.conf-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="grep connlog  /etc/syslog.conf">
              <ecl:path dt="xs:string" op="eq">/etc/syslog.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^daemon\.debug\s+/var/log/connlog.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:root /var/log/connlog-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:root /var/log/connlog" success="pass">
              <ecl:command>find /var/log/connlog -prune ! \( -group root -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 600 /var/log/connlog-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 600 /var/log/connlog" success="pass">
              <ecl:command>find /var/log/connlog -prune ! \( -perm u+r+w-x-s,g-r-w-x-s,o-r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="id-5.4" role="full" selected="false" weight="1.0">
      <title>Capture messages sent to syslog AUTH facility</title>
      <xccdf:description>
        <xhtml:div>By default, Solaris systems do not capture logging information that is sent to the LOG_AUTH facility. However, a
                    great deal of important security-related information is sent via this channel (e.g., successful and failed su attempts,
                    failed login attempts, root login attempts, etc.). The above action causes this information to be captured in the
                    /var/log/authlog file (which is only readable by the superuser). The authlog file should be reviewed and archived on a
                    regular basis. A sample script for archiving log files is provided as Appendix B to this document. Solaris 9 systems
                    include the logadm utility for archiving log files. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10780</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">if [ ! "`grep -v '^#' /etc/syslog.conf | \↵grep /var/log/authlog`" ]; then echo
                "auth.info\t\t\t/var/log/authlog" \↵&gt;&gt;/etc/syslog.conf↵fi↵logadm -w authlog -C 13 -a 'pkill -HUP syslogd' \↵
                /var/log/authlog </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/syslog.conf-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Ensure /etc/syslog.conf is configured to log authentication events">
              <ecl:path dt="xs:string" op="eq">/etc/syslog.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^auth\.info\s+/var/log/authlog.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:sys /var/log/authlog-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:sys /var/log/authlog" success="pass">
              <ecl:command>find /var/log/authlog -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 600 /var/log/authlog-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 600 /var/log/authlog" success="pass">
              <ecl:command>find /var/log/authlog -prune ! \( -perm u+r+w-x-s,g-r-w-x-s,o-r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="id-5.5" role="full" selected="false" weight="1.0">
      <title>Create /var/adm/loginlog</title>
      <xccdf:description>
        <xhtml:div>If it exists, the file /var/adm/loginlog will capture failed login attempt messages (this file does not exist by
                    default). Starting with Solaris 8, administrators may also modify the SYSLOG_FAILED_LOGINS parameter in
                    /etc/default/login to control how many login failures are allowed before log messages are generated—if set to zero then
                    all failed logins will be logged. The loginlog file should be reviewed and archived on a regular basis. A sample script
                    for archiving log files is provided as Appendix B to this document. Solaris 9 systems include the logadm utility for
                    archiving log files. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10800</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">touch /var/adm/loginlog↵chown root:sys /var/adm/loginlog↵chmod 600 /var/adm/loginlog
                cd /etc/default↵awk '/SYSLOG_FAILED_LOGINS=/ \↵{ $1 = "SYSLOG_FAILED_LOGINS=0" }; \↵{ print }' login &gt;login.new ↵mv
                login.new login↵pkgchk -f -n -p /etc/default/login ↵logadm -w loginlog -C 13 /var/adm/loginlog </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Create /var/adm/loginlog-->
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:sys /var/adm/loginlog-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:sys /var/adm/loginlog" success="pass">
              <ecl:command>find /var/adm/loginlog -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 600 /var/adm/loginlog-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 600 /var/adm/loginlog" success="pass">
              <ecl:command>find /var/adm/loginlog -prune ! \( -perm u+r+w-x-s,g-r-w-x-s,o-r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--SYSLOG_FAILED_LOGINS=0-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="SYSLOG_FAILED_LOGINS=0">
              <ecl:path dt="xs:string" op="eq">/etc/default/login</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^SYSLOG_FAILED_LOGINS\s*=\s*0\s*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:sys login-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:sys login" success="pass">
              <ecl:command>find /etc/default/login -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 444 login-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 444 login" success="pass">
              <ecl:command>find /etc/default/login -prune ! \( -perm u+r-w-x-s,g+r-w-x-s,o+r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="id-5.6" role="full" selected="false" weight="1.0">
      <title>Turn on cron logging</title>
      <xccdf:description>
        <xhtml:div> Setting the CRONLOG parameter to YES in /etc/default/cron causes information to be logged for every cron job
                    that gets executed on the system. This setting is the default for Solaris. Log data can be found in /var/cron/log and
                    this file should be reviewed on a regular basis. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10810</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/default↵awk '/CRONLOG=/ { $1 = "CRONLOG=YES" }; \↵{ print }' cron &gt;
                cron.new↵mv cron.new cron↵pkgchk -f -n -p /etc/default/cron </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Turn on cron logging-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--CRONLOG=YES-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="CRONLOG=YES">
              <ecl:path dt="xs:string" op="eq">/etc/default/cron</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^CRONLOG\s*=\s*YES.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:sys cron-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:sys login" success="pass">
              <ecl:command>find /etc/default/cron -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 444 cron-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 444 cron" success="pass">
              <ecl:command>find /etc/default/cron -prune ! \( -perm u+r-w-x-s,g+r-w-x-s,o+r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="enable-system-accounting" role="full" selected="false" weight="1.0">
      <title>Enable system accounting</title>
      <xccdf:description>
        <xhtml:div> System accounting gathers baseline system data (CPU utilization, disk I/O, etc.) every 20 minutes. The data may
                    be accessed with the sar command, or by reviewing the nightly report files named /var/adm/sa/sar*. Once a normal
                    baseline for the system has been established, unauthorized activity (password crackers and other CPU- intensive jobs,
                    and activity outside of normal usage hours) may be detected due to departures from the normal system performance curve.
                    Note that this data is only archived for one week before being automatically removed by the regular nightly cron job.
                    Administrators may wish to archive the /var/adm/sa directory on a regular basis to preserve this data for longer
                    periods. </xhtml:div>
      </xccdf:description>
      <xccdf:conflicts idref="rule_6_13"/>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10820</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">/usr/bin/su sys -c crontab
                &lt;&lt;END_ENTRIES ↵0,20,40 * * * * /usr/lib/sa/sa1 ↵45 23 * * * /usr/lib/sa/sa2 -s 0:00 -e 23:59 -i 1200 -A
                ↵END_ENTRIES </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="all">
              <ecl:path dt="xs:string" op="eq">/etc/rc2.d/S21perf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^[^#]/usr/lib/sa/sadc\s+/var/adm/sa/sa"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/usr/lib/sa/sa1-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/usr/lib/sa/sa1">
              <ecl:path dt="xs:string" op="eq">/var/spool/cron/crontabs/sys</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^0,20,40 \* \* \* \* /usr/lib/sa/sa1$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/usr/lib/sa/sa2-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/usr/lib/sa/sa2">
              <ecl:path dt="xs:string" op="eq">/var/spool/cron/crontabs/sys</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^45 23 \* \* \* /usr/lib/sa/sa2 -s 0:00 -e 23:59 -i 1200 -A$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="enable-kernel-level-auditing" role="full" selected="false" weight="1.0">
      <title>Enable kernel-level auditing</title>
      <xccdf:description>
        <xhtml:div>Kernel-level auditing provides information on commands and system calls which are executed on the local system.
                    The audit trail may be reviewed with the praudit command. Note that enabling kernel-level auditing on Solaris disables
                    the automatic mounting of CD-ROMs and floppy disks via the Solaris volume manager daemon (vold). The
                    &lt;Stop&gt;-A keyboard abort sequence is also disabled via an entry in the /etc/system file. Kernel-level
                    auditing can consume large amounts of disk space and even cause a system performance impact, particularly on heavily
                    used machines. The consensus settings above are an effort to log "interesting" system events without consuming excessive
                    amounts of resources logging "significant but usually uninteresting" system calls. The document Auditing in the Solaris™
                    Operating Environment published by Sun Microsystems as part of their "Blueprints On-Line" series contains additional
                    information on reducing the amount of logging produced by the "administrative" (ad) audit class (see
                    http://www.sun.com/security/blueprints/ for more details). Note that DoD installations have much more stringent auditing
                    requirements than those listed here. DoD guidelines require "flags:lo,ad,cc,fw,-fc,-fd,-fr" to be set in the
                    audit_control file. Note that "-fr" in particular can cause extremely large audit trails to be generated. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10830</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">if [ ! "grep c2audit:audit_load /etc/system" ] ↵then ↵echo y | /etc/security/bsmconv
                ↵cd /etc/security ↵echo "0x08000000:cc:CIS custom class" &gt;&gt;audit_class↵awk 'BEGIN { FS = ":"; OFS = ":" } ($4
                ~ /fm/) &amp;&amp; ! ($2 ~ /MCTL|FCNTL|FLOCK|UTIME/) \↵{ $4 = $4 ",cc" } ($4 ~ /p[cms]/) &amp;&amp; \↵! ($2
                ~ /FORK|CHDIR|KILL|VTRACE|SETGROUPS|SETPGRP/) \↵{ $4 = $4 ",cc" } { print }' audit_event &gt;audit_event.new ↵mv
                audit_event.new audit_event ↵cat &lt;&lt;END_PARAMS &gt;audit_control ↵dir:/var/audit ↵flags:lo,ad,cc
                ↵naflags:lo,ad,ex ↵minfree:20 ↵END_PARAMS ↵echo root:lo,ad:no &gt;audit_user↵awk '/^auditconfig/ { $1 =
                "/usr/sbin/auditconfig" }; \↵{ print }' audit_startup &gt;audit_startup.new ↵echo '/usr/sbin/auditconfig -setpolicy
                +argv,arge' \↵&gt;&gt;audit_startup.new↵mv audit_startup.new audit_startup↵pkgchk -f -n -p /etc/security/audit_event
                ↵pkgchk -f -n -p /etc/security/audit_control↵pkgchk -f -n -p /etc/security/audit_startup ↵cd /var/spool/cron/crontabs
                ↵crontab -l &gt;root.tmp ↵echo '0 * * * * /usr/sbin/audit -n' &gt;&gt;root.tmp ↵crontab root.tmp ↵rm -f
                root.tmp↵fi↵</xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/security/audit_class custom class-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="0x08000000:cc:CIS custom in /etc/security/audit_class">
              <ecl:path dt="xs:string" op="eq">/etc/security/audit_class</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^0x08000000:cc:CIS custom"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--set c2audit_audit_load = 1 /etc/system-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="set c2audit_audit_load = 1 /etc/system">
              <ecl:path dt="xs:string" op="eq">/etc/system</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^set\s+c2audit:audit_load\s+=\s+1.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/audit/audit_control flags:lo,ad,cc-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/security/audit_control flags:lo,ad,cc">
              <ecl:path dt="xs:string" op="eq">/etc/security/audit_control</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^flags:lo,ad,cc$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/audit/audit_control naflags:lo,ad,ex-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/security/audit_control naflags:lo,ad,ex">
              <ecl:path dt="xs:string" op="eq">/etc/security/audit_control</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^naflags:lo,ad,ex$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/audit/audit_control minfree:20-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/security/audit_control minfree:20">
              <ecl:path dt="xs:string" op="eq">/etc/security/audit_control</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^minfree:20$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/audit/audit_control dir:/var/audit-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/security/audit_control dir:/var/audit">
              <ecl:path dt="xs:string" op="eq">/etc/security/audit_control</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^dir:/var/audit$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/audit/audit_user root:lo,ad:no-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/security/audit_user root:lo,ad:no">
              <ecl:path dt="xs:string" op="eq">/etc/security/audit_user</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^root:lo,ad:no$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/audit/audit_startup -setpolicy +argv,srge-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/security/audit_startup -setpolicy +argv,arge">
              <ecl:path dt="xs:string" op="eq">/etc/security/audit_startup</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^/usr/sbin/auditconfig\s+-setpolicy\s+\+argv,arge$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/security/audit_event-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/security/audit_event" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/security/audit_event</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/security/audit_control-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/security/audit_control" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/security/audit_control</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/security/audit_startup-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/security/audit_startup" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/security/audit_startup</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/security/audit_event changes-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="/etc/security/audit_event changes">
              <ecl:command>awk 'BEGIN { FS = ":"; OFS = ":" } ($4 ~ /fm/) &amp;&amp; ! ($2 ~
                                /MCTL|FCNTL|FLOCK|UTIME/); ($4 ~ /p[cms]/) &amp;&amp; ! ($2 ~
                                /FORK|CHDIR|KILL|VTRACE|SETGROUPS|SETPGRP/);' /etc/security/audit_event</ecl:command>
              <ecl:line-selection op="pm" value="^[^:]*:[^:]*:[^:]*:(fm|p[cms]),cc"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--audit in root crontab-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="audit in root crontab">
              <ecl:command>crontab -l root</ecl:command>
              <ecl:line-selection op="pm" value="^0 \* \* \* \* /usr/sbin/audit -n$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="system-log-file-permissions" role="full" selected="false" weight="1.0">
      <title>Confirm permissions on system log files</title>
      <xccdf:description>
        <xhtml:div> It's critical to protect system log files from being modified by unauthorized individuals. Also, certain logs
                    contain sensitive data that should only be available to the system administrator. Most of the settings enforced here
                    reflect the standard Solaris default permissions. Note that sites using the runacct script for generating billing
                    reports and other data from the system process accounting logs will notice that the script incorrectly sets the mode on
                    the wtmpx file to 664 (adds the "group writability" bit). The local site may wish to "chmod g-w /var/adm/wtmpx" after
                    running the runacct script. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10840</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">pkgchk -f -n -p /var/log/syslog↵pkgchk -f -n -p /var/log/authlog↵pkgchk -f -n -p
                /var/adm/utmpx↵pkgchk -f -n -p /var/adm/wtmpx↵chown root:sys /var/adm/loginlog↵chown root:root /var/cron/log
                /var/adm/messages \↵/var/log/connlog↵chmod go-wx /var/adm/messages↵chmod go-rwx /var/adm/loginlog /var/cron/log ↵
                /var/log/connlog↵chown sys:sys /var/adm/sa/*↵chmod go-wx /var/adm/sa/* dir=`awk -F: '($1 == "dir") { print $2 }' ↵
                /etc/security/audit_control`↵chown root:root $dir/*↵chmod go-rwx $dir/* </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Confirm permissions on system log files-->
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /var/log/syslog-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /var/log/syslog" success="pass">
              <ecl:command>pkgchk -a -n -p /var/log/syslog</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /var/log/authlog-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /var/log/authlog" success="pass">
              <ecl:command>pkgchk -a -n -p /var/log/authlog</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /var/adm/utmpx-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /var/adm/utmpx" success="pass">
              <ecl:command>pkgchk -a -n -p /var/adm/utmpx</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /var/adm/wtmpx-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /var/adm/wtmpx" success="pass">
              <ecl:command>pkgchk -a -n -p /var/adm/wtmpx</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod go-rwx /var/adm/loginlog-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod go-rwx /var/adm/loginlog" success="pass">
              <ecl:command>find /var/adm/loginlog -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:root /var/cron/log /var/adm/messages /var/log/connlog-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:root /var/cron/log /var/adm/messages /var/log/connlog" success="pass">
              <ecl:command>find /var/cron/log /var/adm/messages /var/log/connlog -prune ! \( -group root -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod go-wx /var/adm/messages-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod go-wx /var/adm/messages" success="pass">
              <ecl:command>find /var/adm/messages -prune \( -perm -g+w -o -perm -g+x -o -perm -o+w -o -perm -o+x \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod go-rwx /var/adm/loginlog-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod go-rwx /var/adm/loginlog" success="pass">
              <ecl:command>find /var/adm/loginlog -prune \( -perm -g+r -o -perm -g+w -o -perm -g+x -o -perm -o+r -o -perm -o+w
                                -o -perm -o+x \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod go-rwx  /var/cron/log -->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod go-rwx /var/cron/log " success="pass">
              <ecl:command>find /var/cron/log -prune \( -perm -g+r -o -perm -g+w -o -perm -g+x -o -perm -o+r -o -perm -o+w -o
                                -perm -o+x \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod go-rwx  /var/log/connlog-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod go-rwx /var/log/connlog" success="pass">
              <ecl:command>find /var/log/connlog -prune \( -perm -g+r -o -perm -g+w -o -perm -g+x -o -perm -o+r -o -perm -o+w
                                -o -perm -o+x \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown sys:sys /var/adm/sa/*-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown sys:sys /var/adm/sa/*" success="pass">
              <ecl:command>find /var/adm/sa/* -prune ! \( -group sys -user sys \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod go-wx /var/adm/sa/*-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod go-wx /var/adm/sa/*" success="pass">
              <ecl:command>find /var/adm/sa/* -prune \( -perm -g+w -o -perm -g+x -o -perm -o+w -o -perm -o+x \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/security/audit_control-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/security/audit_control">
              <ecl:command>find `egrep '^dir:' /etc/security/audit_control|cut -d: -f2` -type f -a ! \( -user root -a -group
                                root \)</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/security/audit_control-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/security/audit_control">
              <ecl:command>find `egrep '^dir:' /etc/security/audit_control|cut -d: -f2` -type f -a ! -perm u=rw</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
  </Group>
  <Group id="id-6">
    <title>File/Directory Permissions/Access</title>
    <xccdf:description>
      <xhtml:p>File and directory permission control is one of the greatest challenges of secure system 
        administration. The system administrator can and should monitor and secure permissions 
        on system files and directories, but has little control over user-owned files and directories. 
        This section provides guidance on how to secure system files and directories, set secure 
        defaults for users and monitor file permissions.</xhtml:p>
    </xccdf:description>
    <Rule id="id-6.1" role="full" selected="false" weight="1.0">
      <title>Add 'logging' option to root file system</title>
      <description>
        <xhtml:div>A corrupted root file system is one mechanism that an attacker with physical access to the system console can use
                    to compromise the system. By enabling the "logging" option on the root file system, it is much more difficult for the
                    root file system to become corrupted at all, thwarting this particular type of attack. However, other sorts of attacks
                    are possible if the attacker has unrestricted physical access to the system. Be sure to keep critical systems in limited
                    access data centers or other restricted facilities. Note that the administrator may also wish to add the "logging"
                    option to other ufs type file systems in /etc/vfstab. This will help the system to reboot faster in the event of a crash
                    at the cost of some disk overhead (up to a maximum of 64MB per partition) for the file system transaction log file.
                </xhtml:div>
      </description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10890</xccdf:ident>
      <complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command>
              <ecl:command>awk '($3 == "/") {print}' /etc/vfstab</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all">
              <ecl:command>awk '($3 == "/") {print}' /etc/vfstab|egrep 'logging'</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </complex-check>
    </Rule>
    <Rule id="id-6.2" role="full" selected="false" weight="1.0">
      <title>Add 'nosuid' option to /etc/rmmount.conf</title>
      <xccdf:description>
        <xhtml:div> Removable media is one vector by which malicious software can be introduced onto the system. By forcing these
                    file systems to be mounted with the "nosuid" option, the administrator prevents users from bringing set-UID programs
                    onto the system via CD- ROMs and floppy disks. Note that this setting is included in the default rmmount.conf file for
                    Solaris 8 and later. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10900</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">if [ ! "`grep -- '-o nosuid' /etc/rmmount.conf`" ]; then ↵fs=`awk '($1 == "ident")
                &amp;&amp; ($2 != "pcfs") \↵{ print $2 }' /etc/rmmount.conf` ↵echo mount \* $fs -o nosuid
                &gt;&gt;/etc/rmmount.conf↵fi↵</xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Add 'nosuid' option to /etc/rmmount.conf-->
        <xccdf:check-content>
          <ecl:file-content check="all" comment="Add 'nosuid' option to /etc/rmmount.conf">
            <ecl:path dt="xs:string" op="eq">/etc/rmmount.conf</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="^mount\s+\*\s+(hsfs ufs udfs)|(hsfs udfs ufs)\s+-o\s+nosuid$"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="passwd-file-permissions" role="full" selected="false" weight="1.0">
      <title>Verify passwd, shadow, and group file permissions</title>
      <xccdf:description>
        <xhtml:div> These are the default owners and access permissions for these files. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10960</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">pkgchk -f -n -p /etc/passwd↵pkgchk -f -n -p /etc/shadow↵pkgchk -f -n -p /etc/group </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Verify passwd, shadow, and group file permissions-->
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/passwd-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/passwd" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/passwd</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/shadow-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/shadow" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/shadow</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/group-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/group" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/group</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="world-writeable-directories-sticky" role="full" selected="false" weight="1.0">
      <title>World-writable directories should have their sticky bit set</title>
      <xccdf:description>
        <xhtml:div> When the so-called "sticky bit" is set on a directory, then only the owner of a file may remove that file from
                    the directory (as opposed to the usual behavior where anybody with write access to that directory may remove the file).
                    Setting the sticky bit prevents users from overwriting each other's files, whether accidentally or maliciously, and is
                    generally appropriate for most world-writable directories. However, consult appropriate vendor documentation before
                    blindly applying the sticky bit to any world writable directories found in order to avoid breaking any application
                    dependencies on a given directory. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10980</xccdf:ident>
      <xccdf:fixtext> The automated tool supplied with this benchmark will flag world-writable directories that do not have the sticky
                bit set. Administrators who wish to obtain a list of these directories may execute the following commands find / -local
                -type d \↵\( -perm -0002 -a ! -perm -1000 \) -print </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--World-writable directories should have their sticky bit set-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="World-writable directories should have their sticky bit set">
            <ecl:command>find / ! -local -prune -o -type d \( -perm -o+w -a ! -perm -+t \) -print</ecl:command>
            <ecl:line-selection op="pm" value="^.*$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="world-writeable-directories" role="full" selected="false" weight="1.0">
      <title>Find unauthorized world-writable files</title>
      <xccdf:description>
        <xhtml:div> Data in world-writable files can be modified and compromised by any user on the system. World writable files may
                    also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the
                    system's integrity. Generally removing write access for the "other" category (chmod o-w &lt;filename&gt; ) is
                    advisable, but always consult relevant vendor documentation in order to avoid breaking any application dependencies on a
                    given file. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">10990</xccdf:ident>
      <xccdf:fixtext> The automated testing tool supplied with this benchmark will flag unexpected world- writable files on the
                system. Administrators who wish to obtain a list of the world-writable files currently on the system may run the following
                commands: find / -local -type f -perm -0002 -print </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Find unauthorized world-writable files-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="Find unauthorized world-writable files">
            <ecl:command>find / ! -local -prune -o -type f -perm -o+w -print | egrep -v '^/(system|proc)/' | while read -d $'\0' file; do pkgchk -a $file 2&gt;&amp;1 | sort -u; done</ecl:command>
            <ecl:line-selection op="pm" value="^.*$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="suid-sgid-executables" role="full" selected="false" weight="1.0">
      <title>Find unauthorized SUID/SGID system executables</title>
      <xccdf:description>
        <xhtml:div> The administrator should take care to ensure that no rogue set-UID programs have been introduced into the
                    system. Checksums on set-UID binaries can be verified with the elfsign utility, e.g. "elfsign verify -e /usr/bin/su"
                    (for more information consult the elfsign manual page). The Solaris Fingerprint Database (see
                    http://sunsolve.sun.com/pub-cgi/fileFingerprints.pl) also contains cryptographic checksums for these files (along with
                    all other files in the Solaris OS). Tools for interacting with the Fingerprint Database are available from
                    http://www.sun.com/blueprints/tools/. Information on the set-UID and set-GID applications that normally ship with
                    Solaris systems can be found at http://ist.uwaterloo.ca/security/howto/. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11010</xccdf:ident>
      <xccdf:fixtext> The automated testing tool supplied with this benchmark will flag unexpected set-UID and set-GID applications on
                the system. Administrators who wish to obtain a list of the set-UID and set-GID programs currently installed on the system
                may run the following commands: find / -local -type f \↵\( -perm -04000 -o -perm -02000 \) -print </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Find unauthorized SUID/SGID system executables-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="Find unauthorized SUID/SGID system executables">
            <ecl:command>find / ! -local -prune -o -type f \( -perm -u+s -o -perm -g+s \) -print | egrep -v '^/(system|proc)/' | while read -d $'\0' file; do pkgchk -a $file 2&gt;&amp;1 | sort -u</ecl:command>
            <ecl:line-selection op="pm" value="^.*$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="unowned-nodes" role="full" selected="false" weight="1.0">
      <title>Find "Unowned" Files and Directories</title>
      <xccdf:description>
        <xhtml:div> Sometimes when administrators delete users from the password file they neglect to remove all files owned by
                    those users from the system. A new user who is assigned the deleted user's user ID or group ID may then end up "owning"
                    these files, and thus have more access on the system than was intended. It is a good idea to locate files that are owned
                    by users or groups not listed in the system configuration files, and make sure to reset the ownership of these files to
                    some active user on the system as appropriate. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11020</xccdf:ident>
      <xccdf:fixtext> The automated testing tool supplied with this benchmark will flag files and directories where the user or group
                owner of the file is not listed in the system password or group database. Administrators who wish to locate these files on
                their system may run the following command: find / -local \( -nouser -o -nogroup \) -print </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Find 'Unowned' Files and Directories-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="Find 'Unowned' Files and Directories">
            <ecl:command>find / ! -local -prune -o \( -nouser -o -nogroup \) -print</ecl:command>
            <ecl:line-selection op="pm" value="^.*$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="id-6.8" role="unscored" selected="false" weight="0.0">
      <title>Run fix-modes</title>
      <xccdf:description>
        <xhtml:p>The fix-modes software corrects various ownership and permission issues with files 
          throughout the Solaris OS file systems.  This program should be re-run every time 
          packages are added to the system, or patches are applied.  Administrators may wish to 
          run the tool periodically out of cron.</xhtml:p>
        
          <xhtml:p>Note that the actions below recommend using a pre-compiled version of fix-modes 
          supplied by Sun for use with their Solaris Security Toolkit framework.  The source 
          code for the tool is also available from the same URL.  Note that Sun's version of the 
          tool has been specifically modified to avoid well-known problems when running fix-
          modes on SSP systems for the E10K and E15K products.</xhtml:p>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11070</xccdf:ident>
    </Rule>
  </Group>
  <Group id="id-7">
    <title>System Access, Authentication, and Authorization</title>
    <description>
      <xhtml:div>Access Control is a huge security issue that relies on organization policies and procedures to manage. The actions
        describes in this section are just a few measures that can be taken on a system level to control access to services. It is
        strongly advised that organizations have a mechanism in place to authorized access privileges and to revoke that
        authorization. </xhtml:div>
    </description>
    <Rule id="id-7.1" role="full" selected="false" weight="1.0">
      <title>Set higher security level for sadmind service</title>
      <xccdf:description>
        <xhtml:p>The sadmind service is the primary daemon that enables the Solaris remote 
          administration framework for distributed system administration tasks.  Since the 
          operations allowed by this daemon are extremely powerful, it is best to use the highest 
          security setting available for authorizing client connections.  Note that given the history 
          of significant security issues with sadmind, the items in Section 2 of this document 
          actually disable the sadmind service, so this setting will only take effect if the service 
          is re-enabled in inetd.conf.</xhtml:p>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11090</xccdf:ident>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="all">
            <ecl:path dt="xs:string" op="eq">/etc/inet/inetd.conf</ecl:path>
            <ecl:line-selection dt="xs:string" op="pm" value="sadmind -S 2$"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="disable-secure-RPC-nobody" role="full" selected="false" weight="1.0">
      <title>Disable "nobody" access for secure RPC</title>
      <xccdf:description>
        <xhtml:div> The keyserv process stores user keys that are utilized with Sun's secure RPC mechanism. The above action
                    prevents keyserv from using default keys for the "nobody" user, effectively stopping this user from accessing
                    information via secure RPC. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11120</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/default↵awk '/ENABLE_NOBODY_KEYS=/ \↵{ $1 = "ENABLE_NOBODY_KEYS=NO" } { print
                }' keyserv &gt;keyserv.new↵pkgchk -f -n -p /etc/default/keyserv </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Disable 'nobody' access for secure RPC-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Disable 'nobody' access for secure RPC-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Disable 'nobody' access for secure RPC">
              <ecl:path dt="xs:string" op="eq">/etc/default/keyserv</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^ENABLE_NOBODY_KEYS\s*=\s*NO\s*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/default/keyserv-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/default/keyserv" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/default/keyserv</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="id-7.3" role="full" selected="false" weight="1.0">
      <title>Remove .rhosts support in /etc/pam.conf</title>
      <xccdf:description>
        <xhtml:div> Used in conjunction with the BSD-style “r-commands” (rlogin, rsh, rcp), .rhosts files implement a weak form of
                    authentication based on the network address or host name of the remote computer (which can be spoofed by a potential
                    attacker to exploit the local system). Disabling .rhosts support helps prevent users from subverting the system’s normal
                    access control mechanisms. If .rhosts support is required for some reason, some basic precautions should be taken when
                    creating and managing .rhosts files. Never use the "+" wildcard character in .rhosts files. In fact, .rhosts entries
                    should always specify a specific trusted host name along with the user name of the trusted account on that system (e.g.,
                    "trustedhost alice" and not just "trustedhost"). Avoid establishing trust relationships with systems outside of the
                    organization's security perimeter and/or systems not controlled by the local administrative staff. Firewalls and other
                    network security elements should actually block rlogin/rsh/rcp access from external hosts. Finally, make sure that
                    .rhosts files are only readable by the owner of the file (i.e., these files should be mode 600). </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11130</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc grep -v rhosts_auth pam.conf &gt; pam.conf.new↵mv pam.conf.new pam.conf
                ↵pkgchk -f -n -p /etc/pam.conf </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Remove .rhosts support in /etc/pam.conf-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Remove .rhosts support in /etc/pam.conf-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="Remove .rhosts support in /etc/pam.conf">
              <ecl:path dt="xs:string" op="eq">/etc/pam.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^[^#].*rhosts_auth"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/pam.conf-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/pam.conf" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/pam.conf</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="create-ftpusers" role="full" selected="false" weight="1.0">
      <title>Create /etc[/ftpd]/ftpusers</title>
      <xccdf:description>
        <xhtml:div> ftpusers contains a list of users who are not allowed to access the system via FTP. Generally, only normal users
                    should ever access the system via FTP—there should be no reason for “system” type accounts to be transferring
                    information via this mechanism. Certainly the root account should never be allowed to transfer files directly via FTP.
                    The file created by the action above is similar to the one that exists by default under Solaris. Consider also adding
                    the names of other privileged or shared accounts which may exist on your system such as user oracle and the account
                    which your Web server process runs under. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11180</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/ftpd for user in root daemon bin sys adm lp uucp nuucp \↵smmsp listen gdm
                webservd nobody \↵noaccess nobody4 ↵do ↵echo $user &gt;&gt;ftpusers ↵done ↵sort -u ftpusers &gt;ftpusers.new ↵mv
                ftpusers.new ftpusers↵pkgchk -f -n -p /etc/ftpd/ftpusers </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Create /etc/ftpd/ftpusers-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers root-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers root">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^root"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers daemon-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers daemon">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^daemon"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers bin-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers bin">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^bin"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers sys-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers sys">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^sys"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers adm-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers adm">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^adm"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers lp-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers lp">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^lp"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers uucp-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers uucp">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^uucp"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers nuucp-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers nuucp">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^nuucp"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers smmsp-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers smmsp">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^smmsp"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers listen-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers listen">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^listen"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers gdm-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers gdm">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^gdm"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers webservd-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers webservd">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^webservd"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers nobody-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers nobody">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^nobody"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers noaccess-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers noaccess">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^noaccess"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ftpd/ftpusers nobody4-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/ftpd/ftpusers nobody4">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpusers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^nobody4"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/ftpd/ftpusers-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/ftpd/ftpusers" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/ftpd/ftpusers</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="disable-syslog-remote" role="full" selected="false" weight="1.0">
      <title>Prevent Syslog from accepting messages from network</title>
      <xccdf:description>
        <xhtml:div> By default the system logging daemon, syslogd, listens for log messages from other systems on network port
                    514/udp. Unfortunately, the protocol used to transfer these messages does not include any form of authentication, so a
                    malicious outsider could simply barrage the local system's Syslog port with spurious traffic—either as a denial
                    -of-service attack on the system, or to fill up the local system's logging file systems so that subsequent attacks will
                    not be logged. Note that it is considered good practice to set up one or more machines as central "log servers" to
                    aggregate log traffic from all machines at a site. However, unless a system is set up to be one of these "log server"
                    systems, it should not be listening on 514/udp for incoming log messages. </xhtml:div>
      </xccdf:description>
      <xccdf:question> Is this machine a log server, or does it need to receive Syslog messages via the network from other systems? If
                the answer to this question is yes, then do not perform the action below. </xccdf:question>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11200</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/default↵awk '/LOG_FROM_REMOTE=/ { $1 = "LOG_FROM_REMOTE=NO" } { print }'
                syslogd &gt;syslogd.new↵mv syslogd.new syslogd↵pkgchk -f -n -p /etc/default/syslogd </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Prevent Syslog from accepting messages from network-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Prevent Syslog from accepting messages from network-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Prevent Syslog from accepting messages from network">
              <ecl:path dt="xs:string" op="eq">/etc/default/syslogd</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^LOG_FROM_REMOTE\s*=\s*NO\s*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/default/syslogd-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/default/syslogd" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/default/syslogd</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="disable-XDMCP" role="full" selected="false" weight="1.0">
      <title>Disable XDMCP port</title>
      <xccdf:description>
        <xhtml:div> The standard GUI login provided on most Unix systems can act as a remote login server to other devices
                    (including X terminals and other workstations). Setting Dtlogin.requestPort to zero in the Xconfig file and/or disabling
                    XDMCP in gdm.conf prevents these login GUIs from even hearing requests for remote login services. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11210</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">if [ ! -f /etc/dt/config/Xconfig ]; then↵mkdir -p /etc/dt/config cp
                /usr/dt/config/Xconfig /etc/dt/config↵fi↵cd /etc/dt/config↵awk '/Dtlogin.requestPort:/ \↵{ print "Dtlogin.requestPort: 0";
                next } { print }' Xconfig &gt; Xconfig.new↵mv Xconfig.new Xconfig↵chown root:root Xconfig↵chmod 444 Xconfig cd
                /etc/X11/gdm↵awk '/^\[xdmcp\]/, /^Enable=/ \↵{ if ($1 ~ /^Enable=/) $1 = "Enable=false" } { print }' gdm.conf &gt;
                gdm.conf.new↵mv gdm.conf.new gdm.conf↵pkgchk -f -n -p /etc/X11/gdm/gdm.conf </xccdf:fix>
      <xccdf:complex-check operator="OR">
        <xccdf:check system="http://cisecurity.org/check">
          <!--Xconfig does not exist -->
          <xccdf:check-content>
            <ecl:shell-command comment="/etc/dt/config/Xconfig does not exist" success="fail">
              <ecl:command>ls /etc/dt/config/Xconfig</ecl:command>              
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:complex-check operator="AND">  
          <!--Disable XDMCP port-->
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Dtlogin.requestPort: 0-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="Dtlogin.requestPort: 0">
                <ecl:path dt="xs:string" op="eq">/etc/dt/config/Xconfig</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^Dtlogin\.requestPort:\s+0$"/>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--file_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--chown root:root /etc/dt/config/Xconfig-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="chown root:root /etc/dt/config/Xconfig" success="pass">
                <ecl:command>find /etc/dt/config/Xconfig -prune ! \( -group root -user root \) -ls</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <!--file_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--chmod 444 /etc/dt/config/Xconfig-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="chmod 444 /etc/dt/config/Xconfig" success="pass">
                <ecl:command>find /etc/dt/config/Xconfig -prune ! \( -perm u+r-w-x-s,g+r-w-x-s,o+r-w-x-t \) -ls</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/etc/X11/gdm/gdm.conf [xdmcp] Enable=false-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/etc/X11/gdm/gdm.conf [xdmcp] Enable=false">
                <ecl:path dt="xs:string" op="eq">/etc/X11/gdm/gdm.conf</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\[xdmcp\]\n(^#.*$\n)*^Enable=false.*$"/>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--shellcommand_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--pkgchk -f -n -p /etc/X11/gdm/gdm.conf-->
            <xccdf:check-content>
              <ecl:shell-command comment="pkgchk -f -n -p /etc/X11/gdm/gdm.conf" success="pass">
                <ecl:command>pkgchk -a -n -p /etc/X11/gdm/gdm.conf</ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="id-7.7" role="full" selected="false" weight="1.0">
      <title>Prevent X server from listening on port 6000/tcp</title>
      <xccdf:description>
        <xhtml:div> X servers listen on port 6000/tcp for messages from remote clients running on other systems. However, X Windows
                    uses a relatively insecure authentication protocol—an attacker who is able to gain unauthorized access to the local X
                    server can easily compromise the system. Invoking the "-nolisten tcp" option causes the X server not to listen on port
                    6000/tcp by default. This does prevent authorized remote X clients from displaying windows on the local system as well.
                    However, the forwarding of X events via SSH will still happen normally. This is the preferred and more secure method
                    transmitting results from remote X clients in any event. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11230</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">if [ -f /etc/dt/config/Xservers ]; then file=/etc/dt/config/Xservers ↵else
                file=/usr/dt/config/Xservers↵fi↵awk '/Xserver/ &amp;&amp; !/^#/ &amp;&amp; !/-nolisten tcp/ \↵{ print $0 "
                -nolisten tcp"; next }; \↵{ print }' $file &gt; $file.new↵mkdir -p /etc/dt/config↵mv $file.new /etc/dt/config/Xservers
                ↵chown root:sys /etc/dt/config/Xservers↵chmod 444 /etc/dt/config/Xservers ↵cd /etc/X11/gdm↵awk '/^command=/
                &amp;&amp; !/-nolisten tcp/ \↵{ print $0 " -nolisten tcp"; next }; \↵{ print }' gdm.conf &gt; gdm.conf.new↵mv
                gdm.conf.new gdm.conf ↵pkgchk -f -n -p /etc/X11/gdm/gdm.conf </xccdf:fix>
      <xccdf:complex-check operator="OR">
      <xccdf:check system="http://cisecurity.org/check">
        <!--Xconfig does not exist -->
        <xccdf:check-content>
          <ecl:shell-command comment="/etc/dt/config/Xconfig does not exist" success="fail">
            <ecl:command>ls /etc/dt/config/Xconfig</ecl:command>              
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
      <xccdf:complex-check operator="AND">
        <!--Prevent X server from listening on port 6000/tcp-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/dt/config/Xservers -nolisten tcp-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/dt/config/Xservers -nolisten tcp">
              <ecl:path>/etc/dt/config/Xservers</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^[^#].*Xserver.*-nolisten\s+tcp.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:sys /etc/dt/config/Xservers-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:sys /etc/dt/config/Xservers" success="pass">
              <ecl:command>find /etc/dt/config/Xservers -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 444 /etc/dt/config/Xservers-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 444 /etc/dt/config/Xservers" success="pass">
              <ecl:command>find /etc/dt/config/Xservers -prune ! \( -perm u+r-w-x-s,g+r-w-x-s,o+r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/X11/gdm/gdm.conf -nolisten tcp-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/X11/gdm/gdm.conf -nolisten tcp">
              <ecl:path>/etc/X11/gdm/gdm.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^command=.*-nolisten\s+tcp.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/X11/gdm/gdm.conf-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/X11/gdm/gdm.conf" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/X11/gdm/gdm.conf</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
        </xccdf:complex-check>
    </Rule>
    <Rule id="locking-screensaver-timeout" role="full" selected="false" weight="1.0">
      <title>Set default locking screensaver timeout</title>
      <xccdf:description>
        <xhtml:div> The default timeout is 30 minutes of keyboard/mouse inactivity before a password- protected screen saver is
                    invoked by the CDE session manager or xscreensaver application used in the Gnome windowing environment. The above action
                    reduces these default timeout values to 10 minutes, though this setting can still be overridden by individual users in
                    their own environment. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11280</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">for file in /usr/dt/config/*/sys.resources; do dir=`dirname $file | sed s/usr/etc/`
                ↵mkdir -p $dir echo 'dtsession*saverTimeout: 10' &gt;&gt;$dir/sys.resources echo 'dtsession*lockTimeout: 10'
                &gt;&gt;$dir/sys.resources↵chown root:sys $dir/sys.resources↵chmod 444 $dir/sys.resources done cd
                /usr/openwin/lib/app-defaults↵awk '/^\*timeout:/ { $2 = "0:10:00" } /^\*lockTimeout:/ { $2 = "0:00:00" } /^\*lock:/ { $2 =
                "True" } { print }' XScreenSaver &gt;XScreenSaver.new↵mv XScreenSaver.new XScreenSaver↵pkgchk -f -n -p
                /usr/openwin/lib/app-defaults/XScreenSaver </xccdf:fix>
      <xccdf:complex-check operator="OR">
      <xccdf:check system="http://cisecurity.org/check">        
        <!--/usr/openwin/lib/app-defaults/XScreenSaver does not exist -->
        <xccdf:check-content>
          <ecl:shell-command comment="/usr/openwin/lib/app-defaults/XScreenSaver does not exist" success="fail">
            <ecl:command>ls /usr/openwin/lib/app-defaults/XScreenSaver</ecl:command>              
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
      <xccdf:complex-check operator="AND">
        <!--Set default locking screensaver timeout-->
        <xccdf:complex-check operator="AND">
          <!--Set default locking screensaver timeout-->
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--dtsession*saverTimeout-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="every /etc/dt/config/*/sys.resources contains dtsession*saverTimeout: 10">
                <ecl:command>for f in /etc/dt/config/*/sys.resources; do egrep -s '^dtsession\*saverTimeout: 10' $f || echo
                                    $f; done </ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--dtsession*lockTimeout-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="every /etc/dt/config/*/sys.resources contains dtsession*lockTimeout: 10">
                <ecl:command>for f in /etc/dt/config/*/sys.resources; do egrep -s '^dtsession\*lockTimeout: 10' $f || echo
                                    $f; done </ecl:command>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="AND">
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/usr/openwin/lib/app-defaults/XScreenSaver *timeout-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/usr/openwin/lib/app-defaults/XScreenSaver *timeout">
                <ecl:path dt="xs:string" op="eq">/usr/openwin/lib/app-defaults/XScreenSaver</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\*timeout:\s+0:10:00$"/>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/usr/openwin/lib/app-defaults/XScreenSaver-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/usr/openwin/lib/app-defaults/XScreenSaver">
                <ecl:path dt="xs:string" op="eq">/usr/openwin/lib/app-defaults/XScreenSaver</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\*lockTimeout:\s+0:00:00$"/>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
          <!--textfilecontent_test-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--/usr/openwin/lib/app-defaults/XScreenSaver *lockTimeout-->
            <xccdf:check-content>
              <ecl:file-content check="all" comment="/usr/openwin/lib/app-defaults/XScreenSaver *lockTimeout">
                <ecl:path dt="xs:string" op="eq">/usr/openwin/lib/app-defaults/XScreenSaver</ecl:path>
                <ecl:line-selection dt="xs:string" op="pm" value="^\*lock:\s+True$"/>
              </ecl:file-content>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /usr/openwin/lib/app-defaults/XScreenSaver *lock-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /usr/openwin/lib/app-defaults/XScreenSaver *lock" success="pass">
              <ecl:command>pkgchk -a -n -p /usr/openwin/lib/app-defaults/XScreenSaver</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="restrict-at-cron" role="full" selected="false" weight="1.0">
      <title>Restrict at/cron to authorized users</title>
      <xccdf:description>
        <xhtml:div> The cron.allow and at.allow files are a list of users who are allowed to run the crontab and at commands to
                    submit jobs to be run at scheduled intervals. On many systems, only the system administrator needs the ability to
                    schedule jobs. Note that even though a given user is not listed in cron.allow, cron jobs can still be run as that user
                    (e.g., the cron jobs running as user sys for system accounting tasks—see Item 4.7 above). cron.allow only controls
                    administrative access to the crontab command for scheduling and modifying cron jobs. Much more effective access controls
                    for the cron system can be obtained by using Role-Based Access Controls (RBAC). </xhtml:div>
      </xccdf:description>
      <xccdf:conflicts idref="rule_4_7"/>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11300</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/cron.d ↵rm -f cron.deny at.deny ↵echo root &gt;cron.allow ↵cp /dev/null
                at.allow ↵chown root:root cron.allow at.allow ↵chmod 400 cron.allow at.allow </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Restrict at/cron to authorized users-->
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command comment="rm -f cron.deny" success="fail">
              <ecl:command>test -f /etc/cron.d/cron.deny</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--rm -f cron.deny at.deny-->
          <xccdf:check-content>
            <ecl:shell-command comment="rm -f at.deny" success="fail">
              <ecl:command>test -f /etc/cron.d/at.deny</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--echo root >cron.allow-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="echo root &gt;cron.allow">
              <ecl:path dt="xs:string" op="eq">/etc/cron.d/cron.allow</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^(.+)$">
                <ecl:regex-group group="1" op="ne" value="root"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--cp /dev/null at.allow-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="cp /dev/null at.allow" success="pass">
              <ecl:command>find /etc/cron.d/at.allow -prune ! \( -size 0c \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:root at.allow-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:root at.allow" success="pass">
              <ecl:command>find /etc/cron.d/at.allow ! \( -group root -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:root cron.allow -->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:root cron.allow " success="pass">
              <ecl:command>find /etc/cron.d/cron.allow ! \( -group root -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 400 at.allow-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 400 at.allow" success="pass">
              <ecl:command>find /etc/cron.d/at.allow -prune ! \( -perm u+r-w-x-s,g-r-w-x-s,o-r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 400 cron.allow -->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 400 cron.allow" success="pass">
              <ecl:command>find /etc/cron.d/cron.allow ! \( -perm u+r-w-x-s,g-r-w-x-s,o-r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="restrict-crontab-permissions" role="full" selected="false" weight="1.0">
      <title>Remove empty crontab files and restrict file permissions</title>
      <xccdf:description>
        <xhtml:div> The system crontab files are accessed only by the cron daemon (which runs with superuser privileges) and the
                    crontab command (which is set-UID to root). Allowing unprivileged users to read or (even worse) modify system crontab
                    files can create the potential for a local user on the system to gain elevated privileges. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11290</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /var/spool/cron/crontabs ↵for file in * ↵do ↵lines=`grep -v '^#' $file | wc -l |
                sed 's/ //g'` ↵if [ "$lines" = "0" ]; then ↵crontab -r $file ↵fi ↵done ↵chown root:sys * ↵chmod 400 * </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Remove empty crontab files and restrict file permissions-->
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Remove empty crontab files-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Remove empty crontab files" success="pass">
              <ecl:command>find /var/spool/cron/crontabs/* -prune -size 0c -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/spool/cron/crontabs chown root:sys *-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/var/spool/cron/crontabs chown root:sys *" success="pass">
              <ecl:command>find /var/spool/cron/crontabs/* -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/spool/cron/crontabs chmod 400 *-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/var/spool/cron/crontabs chmod 400 *" success="pass">
              <ecl:command>find /var/spool/cron/crontabs/* -prune ! \( -perm u+r-w-x-s,g-r-w-x-s,o-r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="restrict-root-logins" role="full" selected="false" weight="1.0">
      <title>Restrict root logins to system console</title>
      <xccdf:description>
        <xhtml:div> Anonymous root logins should never be allowed, except on the system console in emergency situations (this is the
                    default configuration for Solaris). At all other times, the administrator should access the system via an unprivileged
                    account and use some authorized mechanism (such as the su command, or the freely-available sudo package) to gain
                    additional privilege. These mechanisms provide at least some limited audit trail in the event of problems. Note that in
                    addition to the configuration steps included here, there may be other login services (such as SSH in Item 6.3 above)
                    that require additional configuration in order to prevent root logins via these services. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11310</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/default ↵awk '/CONSOLE=/ { print "CONSOLE=/dev/console"; next }; \↵{ print }'
                login &gt;login.new ↵mv login.new login ↵pkgchk -f -n -p /etc/default/login </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Restrict root logins to system console-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Restrict root logins to system console-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Restrict root logins to system console">
              <ecl:path dt="xs:string" op="eq">/etc/default/login</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^CONSOLE\s*=\s*/dev/console\s*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/default/login-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/default/login" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/default/login</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="account-lockout" role="full" selected="false" weight="1.0">
      <title>Limit number of failed login attempts</title>
      <xccdf:description>
        <xhtml:div> The RETRIES parameter is the number of failed login attempts a user is allowed before being disconnected from
                    the system and forced to reconnect. When LOCK_AFTER_RETRIES is set in /etc/security/policy.conf, then the user's account
                    is locked after this many failed retries (the account can only be unlocked by the administrator using the "passwd -u
                    &lt;username&gt; " command). Setting these values helps discourage brute force password guessing attacks. Note
                    that while the actions above set the lockout limit at 5, the US Department of Defense standard is even more restrictive,
                    allowing only 3 failures. Users at DoD facilities are required to use this more restrictive setting. Be careful when
                    enabling these settings as they can create a denial-of-service situation for legitimate users and applications. Account
                    lockout can be disabled for specific users via the usermod command. For example, "usermod -K lock_after_retries=no
                    oracle" would disable account lockout for the "oracle" account. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11320</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/default ↵awk '/RETRIES=/ { $1 = "RETRIES=5" } { print }' login
                &gt;login.new ↵mv login.new login ↵pkgchk -f -n -p /etc/default/login ↵cd /etc/security ↵awk '/LOCK_AFTER_RETRIES=/ \↵{
                $1 = "LOCK_AFTER_RETRIES=YES" } { print }' policy.conf &gt;policy.conf.new ↵mv policy.conf.new policy.conf ↵pkgchk -f -n
                -p /etc/security/policy.conf </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Set retry limit for account lockout-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/default/login RETRIES=5-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/default/login RETRIES=5">
              <ecl:path dt="xs:string" op="eq">/etc/default/login</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^RETRIES\s*=\s*(\d+)\s*$">
                <!-- FIXME: should this be 3 or 5? -->
                <ecl:regex-group dt="xs:integer" group="1" op="le" value="5"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/default/login-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/default/login" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/default/login</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/security/policy.conf LOCK_AFTER_RETRIES=YES-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/security/policy.conf LOCK_AFTER_RETRIES=YES">
              <ecl:path dt="xs:string" op="eq">/etc/security/policy.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^LOCK_AFTER_RETRIES\s*=\s*YES\s*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/security/policy.conf-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/security/policy.conf" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/security/policy.conf</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="id-7.13" role="full" selected="false" weight="1.0">
      <title>Set EEPROM security-mode and log failed access</title>
      <xccdf:description>
        <xhtml:div> After entering the last command above, the administrator will be prompted for a password. This password will be
                    required to authorize any future command issued at boot-level on the system (the ‘ok’ or ‘&gt;’ prompt) except for
                    the normal multi-user boot command (i.e., the system will be able to reboot unattended). This helps prevent attackers
                    with physical access to the system console from booting off some external device (such as a CD-ROM or floppy) and
                    subverting the security of the system. Note that the administrator should write down this password and place the
                    password in a sealed envelope in a secure location (note that locked desk drawers are typically not secure). If the
                    password is lost or forgotten, simply run the command "eeprom security-mode=none" as root to erase the forgotten
                    password, and then set a new password with "eeprom security-mode=command". </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11330</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">eeprom security-#badlogins=0↵if [ ! "`crontab -l | grep security-#badlogins`" ];
                then↵cd /var/spool/cron/crontabs↵crontab -l &gt;root.tmp↵echo "0 0,8,16 * * * /usr/bin/logger -p auth.info \↵
                \`/usr/sbin/eeprom security-#badlogins\`" &gt;&gt;root.tmp↵crontab root.tmp↵rm -f root.tmp↵fi↵eeprom
                security-mode=command↵</xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Set EEPROM security-mode and log failed access-->
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Set EEPROM security-mode and log failed access-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Set EEPROM security-mode and log failed access">
              <ecl:command>eeprom</ecl:command>
              <ecl:line-selection op="pm" value="security-#badlogins=0"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Set EEPROM badlogins crontab entry-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Set EEPROM badlogins crontab entry">
              <ecl:path dt="xs:string" op="eq">/var/spool/cron/crontabs/root</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^0\s+0,8,16 \* \* \*\s+/usr/bin/logger\s+-p\s+auth.info\s+`/usr/sbin/eeprom\s+security-#badlogins`$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Set EEPROM security-mode and log failed access-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Set EEPROM security-mode and log failed access">
              <ecl:command>eeprom</ecl:command>
              <ecl:line-selection op="pm" value="security-mode=command"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
  </Group>
  <Group id="id-8">
    <title>User Accounts and Environment</title>
    <xccdf:description> Note that the items in this section are tasks that the local administrator should undertake on a regular,
      ongoing basis—perhaps in an automated fashion via cron. The automated host- based scanning tools provided from the Center for
      Internet Security can be used for this purpose. These scanning tools are typically provided with this document, but are also
      available for free download from http://www.CISecurity.org/. </xccdf:description>
    <Rule id="block-system-accounts" role="full" selected="false" weight="1.0">
      <title>Block system accounts</title>
      <xccdf:description>
        <xhtml:div> Accounts that are not being used by regular users should be locked. Not only should the password field for the
                    account be set to an invalid string (which is the default setting for these accounts under Solaris), but also the shell
                    field in the password file should contain an invalid shell. /dev/null is a good choice because it is not a valid login
                    shell, and should an attacker attempt to replace it with a copy of a valid shell the system will not operate properly.
                </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11360</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">passwd -l daemon ↵for user in bin nuucp smmsp listen gdm webservd nobody noaccess
                nobody4; ↵do ↵passwd -l $user ↵/usr/sbin/passmgmt -m -s /dev/null $user ↵done ↵passwd -N sys ↵for user in adm lp uucp; ↵do
                ↵passwd -N $user ↵/usr/sbin/passmgmt -m -s /dev/null $user ↵done </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Block system accounts-->
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="passwd -l daemon">
              <ecl:path>/etc/shadow</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^([^:]*):([^:]*)">
                <ecl:regex-group group="1" op="eq" value="daemon"/>
                <ecl:regex-group group="2" op="pn" value="^\*LK\*"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="for user in ... do passwd -l $user">
              <ecl:path>/etc/shadow</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^([^:]*):([^:]*)">
                <ecl:regex-group group="1" op="pm" value="^(bin|nuucp|smmsp|listen|gdm|webservd|nobody|noaccess|nobody4)"/>
                <ecl:regex-group group="2" op="pn" value="^\*LK\*"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="for user in ... do passmgmt -m -s /dev/null $user">
              <ecl:path>/etc/passwd</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^([^:]*):([^:]*):([^:]*):([^:]*):([^:]*):([^:]*):([^:]*)">
                <ecl:regex-group group="1" op="pm" value="^(bin|nuucp|smmsp|listen|gdm|webservd|nobody|noaccess|nobody4)$"/>
                <ecl:regex-group group="7" op="ne" value="/dev/null"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="passwd -N sys">
              <ecl:path>/etc/shadow</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^([^:]*):([^:]*)">
                <ecl:regex-group group="1" op="eq" value="daemon"/>
                <ecl:regex-group group="2" op="pn" value="NP$"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="for user in adm lp uucp do passwd -N ">
              <ecl:path>/etc/shadow</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^([^:]*):([^:]*)">
                <ecl:regex-group group="1" op="pm" value="^(adm|lp|uucp)$"/>
                <ecl:regex-group group="2" op="pn" value="NP$"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="for user in adm lp uucp do passmgmt -m -s /dev/null $user">
              <ecl:path>/etc/passwd</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^([^:]*):([^:]*):([^:]*):([^:]*):([^:]*):([^:]*):([^:]*)">
                <ecl:regex-group group="1" op="pm" value="^(adm|lp|uucp)$"/>
                <ecl:regex-group group="7" op="ne" value="/dev/null"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="empty-passwords" role="full" selected="false" weight="1.0">
      <title>Verify that there are no accounts with empty password fields</title>
      <xccdf:description>
        <xhtml:div>An account with an empty password field means that anybody may log in as that user without providing a password
                    at all. All accounts should have strong passwords or should be locked by using a password string like "NP" or
                    "*LOCKED*". </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11370</xccdf:ident>
      <xccdf:fixtext> The command logins -p should return no lines of output. </xccdf:fixtext>
      <complex-check operator="AND">
        <!-- FIXME: are both of these necessary? -->
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="no empty passwords">
              <ecl:path>/etc/shadow</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^([^:]*):([^:]*)">
                <ecl:regex-group group="2" op="eq" value=""/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="none exist">
              <ecl:command>logins -p</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </complex-check>
    </Rule>
    <Rule id="account-expiration-parameters" role="full" selected="false" weight="1.0">
      <title>Set account expiration parameters on active accounts</title>
      <xccdf:description>
        <xhtml:div> It is a good idea to force users to change passwords on a regular basis. The commands above will set all active
                    accounts (except the root account) to force password changes every 91 days (13 weeks), and then prevent password changes
                    for seven days (one week) thereafter. Users will begin receiving warnings 28 days (4 weeks) before their password
                    expires. Sites also have the option of expiring idle accounts after a certain number of days (see the on-line manual
                    page for the usermod command, particularly the –f option). These are recommended starting values, but sites may choose
                    to make them more restrictive depending on local policies. Note that due to the fact that /etc/default/passwd sets
                    defaults in terms of number of weeks (even though the actual values on user accounts are kept in terms of days), it is
                    probably best to choose interval values that are multiples of 7. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11380</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">logins -ox |awk -F: '($1 == "root" || $8 == "LK") { next } ↵{ $cmd = "passwd" } ↵($11
                &lt;= 0 || $11 &gt; 91) { $cmd = $cmd " -x 91" } ↵($10 &lt; 7) { $cmd = $cmd " -n 7" } ↵($12 &lt; 28) { $cmd
                = $cmd " -w 28" } ↵($cmd != "passwd") { print $cmd " " $1 }' &gt; /etc/CISupd_accounts ↵/sbin/sh /etc/CISupd_accounts
                ↵rm -f /etc/CISupd_accounts ↵cd /etc/default ↵grep -v WEEKS passwd &gt;passwd.new ↵cat &lt;&lt;EODefaults
                &gt;&gt;passwd.new ↵MAXWEEKS=13 ↵MINWEEKS=1 ↵WARNWEEKS=4 ↵EODefaults ↵mv passwd.new passwd ↵pkgchk -f -n -p
                /etc/default/passwd </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Set account expiration parameters on active accounts-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/default/passwd MAXWEEKS=13-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/default/passwd MAXWEEKS=13">
              <ecl:path dt="xs:string" op="eq">/etc/default/passwd</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^MAXWEEKS\s*=\s*(\d+).*$">
                <ecl:regex-group dt="xs:integer" group="1" op="le" value="13"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/default/passwd MINWEEKS=1-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/default/passwd MINWEEKS=1">
              <ecl:path dt="xs:string" op="eq">/etc/default/passwd</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^MINWEEKS\s*=\s*(\d+).*$">
                <ecl:regex-group dt="xs:integer" group="1" op="ge" value="1"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/default/passwd WARNWEEKS=4-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/default/passwd WARNWEEKS=4">
              <ecl:path dt="xs:string" op="eq">/etc/default/passwd</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^WARNWEEKS\s*=\s*(\d+).*$">
                <ecl:regex-group dt="xs:integer" group="1" op="le" value="4"/>
              </ecl:line-selection>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/default/passwd-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/default/passwd" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/default/passwd</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="remove-NIS-password-extension" role="full" selected="false" weight="1.0">
      <title>Verify no legacy '+' entries exist in passwd, shadow, and group files</title>
      <xccdf:description>
        <xhtml:div> '+' entries in various files used to be markers for systems to insert data from NIS maps at a certain point in a
                    system configuration file. These entries are no longer required on Solaris systems, but may exist in files that have
                    been imported from other platforms. These entries may provide an avenue for attackers to gain privileged access on the
                    system, and should be deleted if they exist. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11430</xccdf:ident>
      <xccdf:fixtext> The command grep '^+:' /etc/passwd /etc/shadow /etc/group should return no lines of output. </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <!--NIS + NIS +-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--grep '^+:' /etc/passwd-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="grep '^+:' /etc/passwd">
              <ecl:path dt="xs:string" op="eq">/etc/passwd</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^\+:"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--grep '^+:' /etc/shadow-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="grep '^+:' /etc/shadow">
              <ecl:path dt="xs:string" op="eq">/etc/shadow</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^\+:"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--grep '^+:' /etc/group-->
          <xccdf:check-content>
            <ecl:file-content check="none exist" comment="grep '^+:' /etc/group">
              <ecl:path dt="xs:string" op="eq">/etc/group</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^\+:"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="uid-0-accounts" role="full" selected="false" weight="1.0">
      <title>Verify that no UID 0 accounts exist other than root</title>
      <xccdf:description>
        <xhtml:div> Any account with UID 0 has superuser privileges on the system. The only superuser account on the machine should
                    be the default root account, and it should be accessed by logging in as an unprivileged user and using the su command to
                    gain additional privilege. Finer granularity access control for administrative access can be obtained by using the
                    freely-available sudo program (http://www.courtesan.com/sudo/) or Sun's own Role-Based Access Control (RBAC) system. For
                    more information on Solaris RBAC, see http://wwws.sun.com/software/whitepapers/wp-rbac/. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11440</xccdf:ident>
      <xccdf:fixtext> The command logins -o |↵awk -F: '($2 == 0) { print $1 }' should return only the word “root”. </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/passwd: non-root uid 0 accounts">
            <ecl:path>/etc/passwd</ecl:path>
            <ecl:line-selection op="pm" value="^([^:]*):([^:]*):(\d+):(\d+)">
              <ecl:regex-group dt="xs:integer" group="3" op="eq" value="0"/>
              <ecl:regex-group group="1" op="ne" value="root"/>
            </ecl:line-selection>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="id-8.6" role="full" selected="false" weight="1.0">
      <title>Set default group for root account</title>
      <xccdf:description>
        <xhtml:div> The default group for the root account under Solaris is the "other" group, which may be shared by many other
                    accounts on the system. Changing the default group for the root account helps prevent root-owned files accidentally
                    becoming accessible to non-privileged users. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11450</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">passmgmt -m -g 0 root </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="root gid 0">
            <ecl:path>/etc/passwd</ecl:path>
            <ecl:line-selection op="pm" value="^([^:]*):([^:]*):(\d+):(\d+)">
              <ecl:regex-group dt="xs:integer" group="4" op="ne" value="0"/>
              <ecl:regex-group group="1" op="eq" value="root"/>
            </ecl:line-selection>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="protected-root-path" role="full" selected="false" weight="1.0">
      <title>No '.' or group/world-writable directory in root $PATH</title>
      <xccdf:description>
        <xhtml:div> Including the current working directory ('.') or other writable directory in root's executable path makes it
                    likely that an attacker can gain superuser access by forcing an administrator operating as root to execute a Trojan
                    horse program. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11460</xccdf:ident>
      <xccdf:fixtext> The automated testing tool supplied with this benchmark will alert the administrator if action is required. </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <!--No '.' or group/world-writable directory in root $PATH-->
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--No '.' in root $PATH-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="No '.' in root $PATH">
              <ecl:command>echo $PATH</ecl:command>
              <ecl:line-selection op="pm" value="^\.:|:\.:|:\.$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--No group/world-writable directory in root $PATH-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="No group/world-writable directory in root $PATH">
              <ecl:command>find -L `echo $PATH|sed "s/:/ /g"` -prune -type d -perm -go+w -print 2&gt;/dev/null|egrep '^/'</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="user-home-permissions" role="full" selected="false" weight="1.0">
      <title>User home directories should be mode 750 or more restrictive</title>
      <xccdf:description>
        <xhtml:div> Group or world-writable user home directories may enable malicious users to steal or modify other users' data or
                    to gain another user's system privileges. Disabling "read" and "execute" access for users who are not members of the
                    same group (the "other" access category) allows for appropriate use of discretionary access control by each user. While
                    the above modifications are relatively benign, making global modifications to user home directories without alerting
                    your user community can result in unexpected outages and unhappy users. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11470</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">for dir in `logins -ox |↵awk -F: '($8 == "PS" &amp;&amp; $1 != "root") {
                print $6 }'` ↵do ↵chmod g-w $dir ↵chmod o-rwx $dir ↵done </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <!--User home directories should be mode 750 or more restrictive-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="User home directories should be mode 750 or more restrictive">
            <ecl:command>find -L `logins -uox|grep -v ':/:'|cut -d: -f6|sort -u` -type d -prune \( -perm -g+w -o -perm -o+r -o
                            -perm -o+w -o -perm -o+x \) -ls</ecl:command>
            <ecl:line-selection op="pm" value="^.*$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="user-dotfile-permissions" role="full" selected="false" weight="1.0">
      <title>No user dot-files should be group/world writable</title>
      <xccdf:description>
        <xhtml:div> Group or world-writable user configuration files may enable malicious users to steal or modify other users' data
                    or to gain another user's system privileges. While the above modifications are relatively benign, making global
                    modifications to user home directories without alerting your user community can result in unexpected outages and unhappy
                    users. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11480</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">for dir in `logins -ox |↵awk -F: '($8 == "PS") { print $6 }'` ↵do for file in
                $dir/.[A-Za-z0-9]*; ↵do ↵if [ ! -h "$file" -a -f "$file" ]; then ↵chmod go-w "$file" ↵fi ↵done ↵done </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <!--No user dot-files should be group/world writable-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="No user dot-files should be group/world writable">
            <ecl:command>find -L `logins -uox|grep -v ':/:'|cut -d: -f6|sort -u` -type f -name '\.*' -prune \( -perm -g+w -o
                            -perm -o+w \)</ecl:command>
            <ecl:line-selection op="pm" value="^.*$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="user-netrc-permissions" role="full" selected="false" weight="1.0">
      <title>Remove user .netrc files</title>
      <xccdf:description>
        <xhtml:div> .netrc files may contain unencrypted passwords which may be used to attack other systems. While the above
                    modifications are relatively benign, making global modifications to user home directories without alerting your user
                    community can result in unexpected outages and unhappy users. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11490</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">for dir in `logins -ox |↵awk -F: '($8 == "PS") { print $6 }'` ↵do ↵rm -f $dir/.netrc
                ↵done </xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Remove user .netrc files-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="Remove user .netrc files">
            <ecl:command>find -L `logins -uox|grep -v ':/:'|cut -d: -f6|sort -u` -type f -name '\.netrc'</ecl:command>
            <ecl:line-selection op="pm" value="^.*$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
    <Rule id="default-user-umask" role="full" selected="false" weight="1.0">
      <title>Set default umask for users</title>
      <xccdf:description>
        <xhtml:div> With a default umask setting of 077, files and directories created by users will not be readable by any other
                    user on the system. The user creating the file has the discretion of making their files and directories readable by
                    others via the chmod command. Users who wish to allow their files and directories to be readable by others by default
                    may choose a different default umask by inserting the umask command into the standard shell configuration files
                    (.profile, .cshrc, etc.) in their home directories. A umask of 027 would make files and directories readable by users in
                    the same Unix group, while a umask of 022 would make files readable by every user on the system. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11500</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/default ↵awk '/UMASK=/ { $1 = "UMASK=077" } { print }' login
                &gt;login.new ↵mv login.new login ↵cd /etc ↵for file in profile .login ↵do ↵if [ "`grep umask $file`" ]; then↵awk '$1 ==
                "umask" { $2 = "077" } { print }' $file &gt;$file.new ↵mv $file.new $file ↵else ↵echo umask 077 &gt;&gt;$file
                ↵fi ↵done ↵pkgchk -f -n -p /etc/default/login ↵pkgchk -f -n -p /etc/profile ↵pkgchk -f -n -p /etc/.login </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--umask-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/default/login UMASK=077-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/default/login UMASK=077">
              <ecl:path dt="xs:string" op="eq">/etc/default/login</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^UMASK=077.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/profile UMASK=077-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/profile UMASK=077">
              <ecl:path dt="xs:string" op="eq">/etc/profile</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^umask\s+077.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/.login UMASK=077-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/.login UMASK=077">
              <ecl:path dt="xs:string" op="eq">/etc/.login</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^umask\s+077.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/default/login-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/default/login" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/default/login</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/profile-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/profile" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/profile</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/.login-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/.login" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/.login</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="default-ftp-umask" role="full" selected="false" weight="1.0">
      <title>Set default umask for FTP users</title>
      <xccdf:description>
        <xhtml:div> The Solaris 9 FTP daemon is derived from the Washington University FTP daemon, so the default umask value is set
                    in /etc/ftpd/ftpaccess. Earlier releases (at least as far back as Solaris 2.6) set this value in /etc/default/ftpd.
                    Please see previous item for a discussion of different umask values. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11510</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc/ftpd ↵if [ "`grep '^defumask' ftpaccess`" ]; then↵awk '/^defumask/ { $2 =
                "077" } { print }' ftpaccess &gt;ftpaccess.new ↵mv ftpaccess.new ftpaccess ↵else ↵echo defumask 077
                &gt;&gt;ftpaccess ↵fi ↵pkgchk -f -n -p /etc/ftpd/ftpaccess </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Set default umask for FTP users-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Set default umask for FTP users-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Set default umask for FTP users">
              <ecl:path dt="xs:string" op="eq">/etc/ftpd/ftpaccess</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^defumask\s+077.*$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/ftpd/ftpaccess-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/ftpd/ftpaccess" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/ftpd/ftpaccess</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="mesg-n" role="full" selected="false" weight="1.0">
      <title>Set "mesg n" as default for all users</title>
      <xccdf:description>
        <xhtml:div> "mesg n" blocks attempts to use the write or talk commands to contact the user at their terminal, but has the
                    side effect of slightly strengthening permissions on the user's tty device. Since write and talk are no longer widely
                    used at most sites, the incremental security increase is worth the loss of functionality. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11520</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">cd /etc ↵for file in profile .login ↵do ↵if [ "`grep mesg $file`" ]; then↵awk '$1 ==
                "mesg" { $2 = "n" } { print }' $file &gt;$file.new ↵mv $file.new $file ↵else ↵echo mesg n &gt;&gt;$file ↵fi
                ↵pkgchk -f -n -p /etc/$file ↵done </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--Set 'mesg n' as default for all users-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Set 'mesg n' as default for all users-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Set 'mesg n' as default for all users">
              <ecl:path>/etc/profile</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^mesg\s+n$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Set 'mesg n' as default for all users-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="Set 'mesg n' as default for all users">
              <ecl:path>/etc/.login</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^mesg\s+n$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/profile-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/profile" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/profile</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/.login-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/.login" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/.login</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
  </Group>
  <Group id="id-9">
    <title>Warning Banners</title>
    <xccdf:description> Presenting some sort of statutory warning message prior to the normal user logon may assist the prosecution of
      trespassers on the computer system. Changing some of these login banners also has the side effect of hiding OS version
      information and other detailed system information from attackers attempting to target specific attacks at a system. Guidelines
      published by the US Department of Defense require that warning messages include at least the name of the organization that owns
      the system, the fact that the system is subject to monitoring and that such monitoring is in compliance with local statutes, and
      that use of the system implies consent to such monitoring. Clearly, the organization’s local legal counsel and/or site security
      administrator should review the content of all messages before any system modifications are made, as these warning messages are
      inherently site- specific. More information (including citations of relevant case law) can be found at
      http://www.usdoj.gov/criminal/cybercrime/s&amp;sappendix2002.htm </xccdf:description>
    <Rule id="login-banners" role="full" selected="false" weight="1.0">
      <title>Create warnings for physical access services</title>
      <xccdf:description>
        <xhtml:div>The contents of the /etc/issue file are displayed prior to the login prompt on the system's console and serial
                    devices. /etc/motd is generally displayed after all successful logins, no matter where the user is logging in from, but
                    is thought to be less useful because it only provides notification to the user after the machine has been accessed. The
                    OEM banner will be displayed only when the system is powered on. Setting this banner has the side effect of hiding the
                    standard Sun power-on banner, which normally displays the system host ID, MAC address, etc. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11550</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">echo "Authorized uses only. All activity may be monitored and reported."
                &gt;/etc/motd ↵echo "Authorized uses only. All activity may be monitored and reported." &gt;/etc/issue ↵pkgchk -f -n
                -p /etc/motd ↵chown root:root /etc/issue ↵chmod 644 /etc/issue </xccdf:fix>
      <xccdf:complex-check operator="AND">
        <!--login banners-->
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--create warning in /etc/motd-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="create warning in /etc/motd">
              <ecl:path dt="xs:string" op="eq">/etc/motd</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value=".+"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--create warning in /etc/issue-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="create warning in /etc/issue">
              <ecl:path dt="xs:string" op="eq">/etc/issue</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value=".+"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--pkgchk -f -n -p /etc/motd-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/motd" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/motd</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown root:root /etc/issue-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:root /etc/issue" success="pass">
              <ecl:command>find /etc/issue -prune ! \( -group root -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 644 /etc/issue-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 644 /etc/issue" success="pass">
              <ecl:command>find /etc/issue -prune ! \( -perm u+r+w-x-s,g+r-w-x-s,o+r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </Rule>
    <Rule id="login-banners-GUI" role="full" selected="false" weight="1.0">
      <title>Create warnings for GUI-based logins</title>
      <xccdf:description>
        <xhtml:div> The standard graphical login program for Solaris requires the user to enter their username in one dialog box and
                    their password in a second separate dialog. The commands above set the warning message on both to be the same message,
                    but the site has the option of using different messages on each screen. The Dtlogin*greeting.labelString is the message
                    for the first dialog where the user is prompted for their username, and …perslabelString is the message on the second
                    dialog box. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11560</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">for file in /usr/dt/config/*/Xresources↵do↵dir=`dirname $file | sed s/usr/etc/`
                ↵mkdir -p $dir ↵if [ ! -f $dir/Xresources ]; then↵cp $file $dir/Xresources ↵fi ↵echo "Dtlogin*greeting.labelString:
                Authorized uses only!" &gt;&gt;$dir/Xresources ↵echo "Dtlogin*greeting.persLabelString: All activity may be
                monitored." &gt;&gt;$dir/Xresources ↵done ↵chown root:sys /etc/dt/config/*/Xresources ↵chmod 644
                /etc/dt/config/*/Xresources ↵cd /etc/X11/gdm ↵awk '/^#?Greeter=/ { print "Greeter=/usr/bin/gdmlogin"; next } ↵/^#?Welcome=/
                { print "Welcome=Authorized uses only!\\n" "All activity may be monitored " "and reported." ↵next } ↵{ print }' gdm.conf
                &gt;gdm.conf.new ↵mv gdm.conf.new gdm.conf ↵pkgchk -f -n -p /etc/X11/gdm/gdm.conf </xccdf:fix>
      <xccdf:complex-check operator="OR">
        <xccdf:check system="http://cisecurity.org/check">
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="/etc/X11/gdm/gdm.conf does not exist" success="fail">
            <ecl:command>ls /etc/X11/gdm/gdm.conf</ecl:command>
          </ecl:shell-command>
        </xccdf:check-content>
        </xccdf:check>
      <xccdf:complex-check operator="AND">
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Create warnings for GUI-based logins-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="every /etc/dt/config/*/Xresources has Dtlogin*greeting.labelString" success="pass">
              <ecl:command>for f in /etc/dt/config/*/Xresources; do egrep -s '^Dtlogin\*greeting\.labelString: *Authorized
                                uses only!' $f || echo $f; done </ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Create warnings for GUI-based logins-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="every /etc/dt/config/*/Xresources has Dtlogin*greeting.persLabelString" success="pass">
              <ecl:command>for f in /etc/dt/config/*/Xresources; do egrep -s '^Dtlogin\*greeting\.persLabelString: *All
                                activity may be monitored' $f || echo $f; done</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Create warnings for GUI-based logins-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chown root:sys /etc/dt/config/*/Xresources" success="pass">
              <ecl:command>find /etc/dt/config/*/Xresources -prune ! \( -group sys -user root \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--file_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Create warnings for GUI-based logins-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="chmod 644 /etc/dt/config/*/Xresources" success="pass">
              <ecl:command>find /etc/dt/config/*/Xresources -prune ! \( -perm u+r+w-x-s,g+r-w-x-s,o+r-w-x-t \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Create warnings for GUI-based logins-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/X11/gdm/gdm.conf Greeter=/usr/bin/gdmlogin">
              <ecl:path dt="xs:string" op="eq">/etc/X11/gdm/gdm.conf</ecl:path>
              <ecl:line-selection dt="xs:string" op="pm" value="^Greeter\s*=\s*/usr/bin/gdmlogin$"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <!--textfilecontent_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Create warnings for GUI-based logins-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="/etc/X11/gdm/gdm.conf Greeter=/usr/bin/gdmlogin" success="pass">
              <ecl:command>egrep '^Greeter=/usr/bin/gdmlogin' /etc/X11/gdm/gdm.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="/etc/X11/gdm/gdm.conf Welcome=Authorized use..." success="pass">
              <ecl:command>egrep '^Welcome=Authorized use' /etc/X11/gdm/gdm.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <!--shellcommand_test-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Create warnings for GUI-based logins-->
          <xccdf:check-content>
            <ecl:shell-command comment="pkgchk -f -n -p /etc/X11/gdm/gdm.conf" success="pass">
              <ecl:command>pkgchk -a -n -p /etc/X11/gdm/gdm.conf</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
        </xccdf:complex-check>
    </Rule>
    <Rule id="login-banners-telnet" role="full" selected="false" weight="1.0">
      <title>Create warnings for telnet daemon</title>
      <xccdf:description>
        <xhtml:p>Setting this banner has the side effect of hiding the default telnet banner, which 
          advertises the version of Solaris running on the system.</xhtml:p>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11580</xccdf:ident>
      <complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command>
              <ecl:command>egrep 'BANNER=.+' /etc/default/telnetd</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <xccdf:check-content>
            <ecl:shell-command check="all">
              <ecl:command>egrep 'BANNER=.+' /etc/default/telnetd</ecl:command>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </complex-check>
    </Rule>
    <Rule id="login-banners-ftp" role="full" selected="false" weight="1.0">
      <title>Create warnings for FTP daemon</title>
      <xccdf:description>
        <xhtml:div> Setting this banner has the side effect of hiding the default telnet banner, which advertises the version of
                    Solaris running on the system. </xhtml:div>
      </xccdf:description>
      <xccdf:ident system="http://benchmarks.cisecurity.org/">11570</xccdf:ident>
      <xccdf:fix platform="cpe://sun:solaris:9">echo Authorized uses only. All activity may be monitored and reported.
                &gt;/etc/ftpd/banner.msg↵chown root:root /etc/ftpd/banner.msg↵chmod 444 /etc/ftpd/banner.msg</xccdf:fix>
      <xccdf:check system="http://cisecurity.org/check">
        <!--ftpd banner-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="ftpd banner">
            <ecl:command>find /etc/ftpd/banner.msg -prune -ls</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </Rule>
  </Group>
  <Group id="appendix-a">
    <title>Appendix A: File Backup Script</title>
    <xccdf:description>
      <xhtml:p>This script can be used to backup files</xhtml:p>
    </xccdf:description>
  </Group>
  <Group id="appendix-b">
    <title>Appendix B: Log Rotation Script</title>
    <xccdf:description>
      <xhtml:p>Script to help with log rotation</xhtml:p>
    </xccdf:description>
  </Group>
  <Group id="appendix-c">
    <title>Appendix C: Additional Security Notes</title>
    <xccdf:description>
      <xhtml:p>The items in this section are security configuration settings that have been suggested by 
        several other resources and system hardening tools.  However, given the other settings in 
        the benchmark document, the settings presented here provide relatively little incremental 
        security benefit.  Nevertheless, none of these settings should have a significant impact on 
        the functionality of the system, and some sites may feel that the slight security 
        enhancement of these settings outweighs the (sometimes minimal) administrative cost of 
        performing them.</xhtml:p>   
      <xhtml:p>None of these settings will be checked by the automated scoring tool provided with the 
        benchmark document.  They are purely optional and may be applied or not at the discretio
        of local site administrators. </xhtml:p>
    </xccdf:description>
  </Group>
  <Group id="references">
    <title>References</title>
    <xccdf:description>
      <xhtml:p>Area that contains links to additioanl information.</xhtml:p>
    </xccdf:description>
  </Group>
<xccdf:signature><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>eateoblLmBC39C8neR0WYlfO7fI=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
JQqnn/YdC6bPkfdbPam2HLrsslBKyxzzkqLzxiKub2g3o7gf4Dx0Je0NTMDi8Yiabjseb/JkYB2Z
4ocZiFTZOHil702NPWvOqF6fOVxcFfO8DX1jtYuU7+/6+YQfb2rZ0INc4Cdah08NiXs/n5yeAJz0
DiNnM3VJw4FgsP6S8oTKPYd7SxLud9LWgNmrqf8iHjUEr8DA06MiMZnLStxPLA6BnuxhWsLhE5w8
tciHuqQPu1qtHVTCuPgWFMgVucWv/Gol0gYvXbTy6ciNqkWxSyk1ZmQmUNdQbLtRXScGTvcp/4OW
2t+V6UGnqz/MTK/1hyDhgXFxtb/7jvWV7Ilqhg==
</ds:SignatureValue>
<ds:KeyInfo>
<ds:X509Data>
<ds:X509Certificate>
MIIFRzCCBC+gAwIBAgIHTwpN/4tOfDANBgkqhkiG9w0BAQsFADCBtDELMAkGA1UEBhMCVVMxEDAO
BgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxGjAYBgNVBAoTEUdvRGFkZHkuY29t
LCBJbmMuMS0wKwYDVQQLEyRodHRwOi8vY2VydHMuZ29kYWRkeS5jb20vcmVwb3NpdG9yeS8xMzAx
BgNVBAMTKkdvIERhZGR5IFNlY3VyZSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjAeFw0xNDA5
MTgxNDM0MjFaFw0xNzEwMjAxODU3NDRaMIGTMQswCQYDVQQGEwJVUzERMA8GA1UECBMITmV3IFlv
cmsxFzAVBgNVBAcTDkVhc3QgR3JlZW5idXNoMSswKQYDVQQKEyJDZW50ZXIgZm9yIEludGVybmV0
IFNlY3VyaXR5LCBJbmMuMSswKQYDVQQDEyJDZW50ZXIgZm9yIEludGVybmV0IFNlY3VyaXR5LCBJ
bmMuMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0MGnj6yX2QHklGadAfTBxssvP+2f
YegPpNGXfEmPXZXrWeME2BqIbO+hKXTuwUucRK6RvQJTjgzNgOhQx3HcclRwQB4xj/14hOoZSeQ3
haw/Xjl4WofsWizM5j/g1iWBgxi3xk/aREfKKb0ulBMtP/WYFpSRjZ/Z7m5QKii0feJPxbf+wrZ+
UvNZ8uBdO+SEmbhS/DVESsEWzXn6StbQpa2dno2aIOGZXQKcUY2d3WZ4Zk+zawFcRUYslVIrOhMb
0e3+hbJEtFwm5ekehdNimSozYyyLGZJonLlvr8PfmvQ1ceu7enWCRfZrRWAlDHFaouLdtU/OmXc+
Um7cLwz8VQIDAQABo4IBezCCAXcwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDAzAO
BgNVHQ8BAf8EBAMCB4AwNQYDVR0fBC4wLDAqoCigJoYkaHR0cDovL2NybC5nb2RhZGR5LmNvbS9n
ZGlnMnM1LTAuY3JsMFMGA1UdIARMMEowSAYLYIZIAYb9bQEHFwIwOTA3BggrBgEFBQcCARYraHR0
cDovL2NlcnRpZmljYXRlcy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5LzB2BggrBgEFBQcBAQRqMGgw
JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmdvZGFkZHkuY29tLzBABggrBgEFBQcwAoY0aHR0cDov
L2NlcnRpZmljYXRlcy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5L2dkaWcyLmNydDAfBgNVHSMEGDAW
gBRAwr0njsw0gzCiM9f7bLPwtCyAzjAdBgNVHQ4EFgQU+3zn+CEg6a2xPqlBXvn64hUyoB4wDQYJ
KoZIhvcNAQELBQADggEBAEh76h1GtJ0pj04in+RUymB7fqPh6HFILkOLlTPnveyXCoHYT2M46DET
EA/NKYkoF2KA3QiZ1b+PMViuTYG2pDs71eFVPADuBCGf9IFufCDY9mPvjQiFDlLNMknXxACD8TjC
hqz+uZT2uLPw/YxkJIsCxrTQJ//ga/fHfZDrKgQfbVzxjD/4WKDe8HktjKcn+NWGPJNMgmO+IHrK
if6TB1xTo32W9QzwoXvBdLnziAUGZZghEulq6h3RCMzKPzpx5JiLlOz6JzqXHvrua+yUbr4A29Vy
vkwWgJWjyvJd2uq9MQ9l49kkrD84m41PSwpaHO99nEHRgRykopxIt8AHsIQ=
</ds:X509Certificate>
</ds:X509Data>
<ds:KeyValue>
<ds:RSAKeyValue>
<ds:Modulus>
0MGnj6yX2QHklGadAfTBxssvP+2fYegPpNGXfEmPXZXrWeME2BqIbO+hKXTuwUucRK6RvQJTjgzN
gOhQx3HcclRwQB4xj/14hOoZSeQ3haw/Xjl4WofsWizM5j/g1iWBgxi3xk/aREfKKb0ulBMtP/WY
FpSRjZ/Z7m5QKii0feJPxbf+wrZ+UvNZ8uBdO+SEmbhS/DVESsEWzXn6StbQpa2dno2aIOGZXQKc
UY2d3WZ4Zk+zawFcRUYslVIrOhMb0e3+hbJEtFwm5ekehdNimSozYyyLGZJonLlvr8PfmvQ1ceu7
enWCRfZrRWAlDHFaouLdtU/OmXc+Um7cLwz8VQ==
</ds:Modulus>
<ds:Exponent>AQAB</ds:Exponent>
</ds:RSAKeyValue>
</ds:KeyValue>
</ds:KeyInfo>
</ds:Signature></xccdf:signature></Benchmark>