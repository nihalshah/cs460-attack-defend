<?xml version="1.0" encoding="UTF-8" standalone="no"?><xccdf:Benchmark xmlns:xccdf="http://checklists.nist.gov/xccdf/1.1" xmlns:cdfp="http://www.cisecurity.org/xccdf/platform/0.2.3" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" xmlns:ecl="http://cisecurity.org/check" xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:oval4="http://oval.mitre.org/XMLSchema/oval" xmlns:xccdf10="http://checklists.nist.gov/xccdf/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cis_ibm_aix_4.3_5.1_benchmark" xsi:schemaLocation="http://checklists.nist.gov/xccdf/1.1 ../misc/xsd/xccdf-1.1.4.xsd http://cisecurity.org/check ../misc/xsd/ecl.xsd">
  <xccdf:status date="2006-10-23">accepted</xccdf:status>
  <xccdf:title>CIS AIX 4.3.2, 4.3.3, 5L, 5.1 Benchmark</xccdf:title>
  <xccdf:description>This document, Security Configuration Benchmark for IBM AIX 4.3 - 5.1, provides prescriptive guidance for establishing a secure configuration posture for IBM AIX v4.3 - v5.1.</xccdf:description>
  <xccdf:notice id="terms-of-use" xml:lang="en">
    BACKGROUND.
    
    The Center for Internet Security ("CIS") provides benchmarks, scoring tools, software, data, information, suggestions, ideas, and other services and materials from the CIS website or elsewhere ("Products") as a public service to Internet users worldwide.  Recommendations contained in the Products ("Recommendations") result from a consensus-building process that involves many security experts and are generally generic in nature.  The Recommendations are intended to provide helpful information to organizations attempting to evaluate or improve the security of their networks, systems, and devices.  Proper use of the Recommendations requires careful analysis and adaptation to specific user requirements.  The Recommendations are not in any way intended to be a "quick fix" for anyone's information security needs.
    
    NO REPRESENTATIONS, WARRANTIES, OR COVENANTS.
    
    CIS makes no representations, warranties, or covenants whatsoever as to (i) the positive or negative effect of the Products or the Recommendations on the operation or the security of any particular network, computer system, network device, software, hardware, or any component of any of the foregoing or (ii) the accuracy, reliability, timeliness, or completeness of  the Products or the Recommendations.  CIS is providing the Products and the Recommendations "as is" and "as available" without representations, warranties, or covenants of any kind.  
    
    USER AGREEMENTS.
    
    By using the Products and/or the Recommendations, I and/or my organization ("We") agree and acknowledge that:
    
    1.	No network, system, device, hardware, software, or component can be made fully secure;
    2.	We are using the Products and the Recommendations solely at our own risk;
    3.	We are not compensating CIS to assume any liabilities associated with our use of the Products or the Recommendations, even risks that result from 		CIS's negligence or failure to perform; 
    4.	We have the sole responsibility to evaluate the risks and benefits of the Products and Recommendations to us and to adapt the Products and the 			Recommendations to our particular circumstances and requirements;
    5.	Neither CIS, nor any CIS Party (defined below) has any responsibility to make any corrections, updates, upgrades, or bug fixes; or to notify us of 		the need for any such corrections, updates, upgrades, or bug fixes; and
    6.	Neither CIS nor any CIS Party has or will have any liability to us whatsoever (whether based in contract, tort, strict liability or otherwise) for 		any direct, indirect, incidental, consequential, or special damages (including without limitation loss of profits, loss of sales, loss of or damage 		to reputation,loss of customers, loss of software, data, information or emails, loss of privacy, loss of use of any computer or other equipment, 	business interruption, wasted management or other staff resources or claims of any kind against us from third parties) arising out of or in any way 	Connected with our use of or our inability to use any of the Products or Recommendations (even if CIS has been advised of the possibility of such 	damages), including without limitation any liability associated with infringement of intellectual property, defects, bugs, errors, omissions, 	viruses, worms, backdoors, Trojan horses or other harmful items.
    
    GRANT OF LIMITED RIGHTS.
    
    CIS hereby grants each user the following rights, but only so long as the user complies with all of the terms of these Agreed Terms of Use:
    
    1.	Except to the extent that we may have received additional authorization pursuant to a written agreement with CIS, each user may download, install and 	use each of the Products on a single computer;
    2.	Each user may print one or more copies of any Product or any component of a Product that is in a .txt, .pdf, .doc, .mcw, or .rtf format, provided 		that all such copies are printed in full and are kept intact, including without limitation the text of this Agreed Terms of Use in its entirety.
    
    RETENTION OF INTELLECTUAL PROPERTY RIGHTS; LIMITATIONS ON DISTRIBUTION.
    
    The Products are protected by copyright and other intellectual property laws and by international treaties.  We acknowledge and agree that we are not acquiring title to any intellectual property rights in the Products and that full title and all ownership rights to the Products will remain the exclusive property of CIS or CIS Parties.  CIS reserves all rights not expressly granted to users in the preceding section entitled "Grant of limited rights."
    Subject to the paragraph entitled "Special Rules" (which includes a waiver, granted to some classes of CIS Members, of certain limitations in this paragraph), and except as we may have otherwise agreed in a written agreement with CIS, we agree that we will not (i) decompile, disassemble, reverse engineer, or otherwise attempt to derive the source code for any software Product that is not already in the form of source code; (ii) distribute, redistribute, encumber, sell, rent, lease, lend, sublicense, or otherwise transfer or exploit rights to any Product or any component of a Product; (iii) post any Product or any component of a Product on any website, bulletin board, ftp server, newsgroup, or other similar mechanism or device, without regard to whether such mechanism or device is internal or external, (iv) remove or alter trademark, logo, copyright or other proprietary notices, legends, symbols or labels in any Product or any component of a Product; (v) remove these Agreed Terms of Use from, or alter these Agreed Terms of Use as they appear in, any Product or any component of a Product; (vi) use any Product or any component of a Product with any derivative works based directly on a Product or any component of a Product; (vii) use any Product or any component of a Product with other products or applications that are directly and specifically dependent on such Product or any component for any part of their functionality, or (viii) represent or claim a particular level of compliance with a CIS Benchmark, scoring tool or other Product.  We will not facilitate or otherwise aid other individuals or entities in any of the activities listed in this paragraph.
    We hereby agree to indemnify, defend, and hold CIS and all of its officers, directors, members, contributors, employees, authors, developers, agents, affiliates, licensors, information and service providers, software suppliers, hardware suppliers, and all other persons who aided CIS in the creation, development, or maintenance of the Products or Recommendations ("CIS Parties") harmless from and against any and all liability, losses, costs, and expenses (including attorneys' fees and court costs) incurred by CIS or any CIS Party in connection with any claim arising out of any violation by us of the preceding paragraph, including without limitation CIS's right, at our expense, to assume the exclusive defense and control of any matter subject to this indemnification, and in such case, we agree to cooperate with CIS in its defense of such claim.  We further agree that all CIS Parties are third-party beneficiaries of our undertakings in these Agreed Terms of Use. 
    
    SPECIAL RULES.
    
    CIS has created and will from time to time create, special rules for its members and for other persons and organizations with which CIS has a written contractual relationship.  Those special rules will override and supersede these Agreed Terms of Use with respect to the users who are covered by the special rules.
    CIS hereby grants each CIS Security Consulting or Software Vendor Member and each CIS Organizational User Member, but only so long as such Member remains in good standing with CIS and complies with all of the terms of these Agreed Terms of Use, the right to distribute the Products and Recommendations within such Member's own organization, whether by manual or electronic means.  Each such Member acknowledges and agrees that the foregoing grant is subject to the terms of such Member's membership arrangement with CIS and may, therefore, be modified or terminated by CIS at any time.
    CHOICE OF LAW; JURISDICTION; VENUE.
    
    We acknowledge and agree that these Agreed Terms of Use will be governed by and construed in accordance with the laws of the State of Maryland, that any action at law or in equity arising out of or relating to these Agreed Terms of Use shall be filed only in the courts located in the State of Maryland, that we hereby consent and submit to the personal jurisdiction of such courts for the purposes of litigating any such action.  If any of these Agreed Terms of Use shall be determined to be unlawful, void, or for any reason unenforceable, then such terms shall be deemed severable and shall not affect the validity and enforceability of any remaining provisions.
    
    BY USING THE PRODUCTS I(WE) ACKNOWLEDGE THAT WE HAVE READ THESE AGREED TERMS OF USE IN THEIR ENTIRETY, UNDERSTAND THEM, AND I(WE) AGREE TO BE BOUND BY THEM IN ALL RESPECTS.      
  </xccdf:notice>
  <xccdf:version>1.0.1.5</xccdf:version>
  <xccdf:Profile id="aix-level-1-profile">
    <xccdf:title>Level 1 Profile</xccdf:title>
    <xccdf:description>
      <xhtml:p>This profile contains all Level 1 configuration items</xhtml:p>
    </xccdf:description>
    <xccdf:select idref="apply-latest-os-patches" selected="true"/>
    <xccdf:select idref="validate-your-system-before-making-changes" selected="true"/>
    <xccdf:select idref="configure-ssh" selected="true"/>
    <xccdf:select idref="install-tcp-wrappers-package" selected="true"/>
    <xccdf:select idref="disable-standard-services" selected="true"/>
    <xccdf:select idref="configure-tcp-wrappers-to-limit-access" selected="true"/>
    <xccdf:select idref="only-enable-telnet-if-abolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-ftp-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-rlogin-rsh-rcp-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-tftp-server-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-kerberos-related-daemons-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-rquotad-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-cde-related-daemons-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="disable-login-prompts-on-serial-ports" selected="true"/>
    <xccdf:select idref="disable-inetd-if-possible" selected="true"/>
    <xccdf:select idref="disable-email-server-if-possible" selected="true"/>
    <xccdf:select idref="disable-nis-server-processes-if-possible" selected="true"/>
    <xccdf:select idref="disable-nis-client-processes-if-possible" selected="true"/>
    <xccdf:select idref="disable-nfs-server-processes-if-possible" selected="true"/>
    <xccdf:select idref="disable-nfs-cllient-processes-if-possible" selected="true"/>
    <xccdf:select idref="disable-gui-login-if-possible" selected="true"/>
    <xccdf:select idref="turn-off-services-which-are-not-commonly-used" selected="true"/>
    <xccdf:select idref="only-enable-printer-daemons-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-snmp-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-portmap-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-ipv6-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-dhcp-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-i4ls-and-ncs-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="only-enable-writesrv-pmd-httpdlite-if-absolutely-necessary" selected="true"/>
    <xccdf:select idref="disable-core-dumps" selected="true"/>
    <xccdf:select idref="network-parameter-modifications" selected="true"/>
    <xccdf:select idref="restrict-nfs-client-requests-to-privileged-ports" selected="true"/>
    <xccdf:select idref="capture-messages-sent-to-syslog" selected="true"/>
    <xccdf:select idref="configure-syslogd-to-send-logs-to-a-remote-loghost" selected="true"/>
    <xccdf:select idref="prevent-syslog-from-accepting-messages-from-the-network" selected="true"/>
    <xccdf:select idref="enable-sar-accounting" selected="true"/>
    <xccdf:select idref="enable-kernel-level-auditing" selected="true"/>
    <xccdf:select idref="confirm-permissions-on-system-log-files" selected="true"/>
    <xccdf:select idref="verify-passwd-and-group-file-permissions" selected="true"/>
    <xccdf:select idref="world-writable-directories-should-have-their-sticky-bit-set" selected="true"/>
    <xccdf:select idref="find-unauthorized-world-writable-files" selected="true"/>
    <xccdf:select idref="find-unauthorized-suid-sgid-system-executables" selected="true"/>
    <xccdf:select idref="find-unowned-files-and-directories" selected="true"/>
    <xccdf:select idref="remove-etc-hosts-equiv" selected="true"/>
    <xccdf:select idref="create-etc-ftpusers" selected="true"/>
    <xccdf:select idref="disable-xdmcp-port" selected="true"/>
    <xccdf:select idref="prevent-x-server-from-listening-on-port-6000-tcp" selected="true"/>
    <xccdf:select idref="set-default-locking-screensaver-timeout" selected="true"/>
    <xccdf:select idref="remove-empty-crontab-files-and-restrict-file-permissions" selected="true"/>
    <xccdf:select idref="restrict-at-and-cron-to-authorized-users" selected="true"/>
    <xccdf:select idref="restrict-root-logins-to-system-console" selected="true"/>
    <xccdf:select idref="block-system-accounts" selected="true"/>
    <xccdf:select idref="set-password-and-account-expiration-on-active-accounts" selected="true"/>
    <xccdf:select idref="verify-there-are-no-accounts-with-empty-password-fields" selected="true"/>
    <xccdf:select idref="verify-no-legacy-entries-exist-in-passwd-and-group-files" selected="true"/>
    <xccdf:select idref="verify-no-uid-0-accounts-exist-other-than-root" selected="true"/>
    <xccdf:select idref="no-dot-or-group-world-writable-directory-in-roots-path" selected="true"/>
    <xccdf:select idref="user-home-directories-should-be-mode-750-or-more-restrictive" selected="true"/>
    <xccdf:select idref="no-user-dot-files-should-be-world-writable" selected="true"/>
    <xccdf:select idref="remove-user-netrc-and-rhosts-files" selected="true"/>
    <xccdf:select idref="set-default-umask-for-users" selected="true"/>
    <xccdf:select idref="set-default-umask-for-the-ftp-daemon" selected="true"/>
    <xccdf:select idref="set-mesg-n-as-the-default-for-all-users" selected="true"/>
    <xccdf:select idref="removing-unnecessary-default-user-accounts" selected="true"/>
    <xccdf:select idref="warnings" selected="true"/>
    <xccdf:select idref="create-warnings-for-gui-based-logins" selected="true"/>
    <xccdf:select idref="createwwarnings-for-telnet-daemon" selected="true"/>
    <xccdf:select idref="create-warnings-for-ftp-daemon" selected="true"/>
    <xccdf:select idref="r-reboot" selected="true"/>
  </xccdf:Profile>
  <xccdf:Group id="patches-and-additional-software">
    <xccdf:title>Patches and Additional Software</xccdf:title>
    <xccdf:description>This group specifies how patches should be applied on IBM AIX systems.</xccdf:description>
    <xccdf:Rule id="apply-latest-os-patches" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Apply latest OS patches</xccdf:title>
      <xccdf:description> Discussion: Installing up-to-date vendor patches and developing a procedure for keeping up-to-date with
                vendor patches is critical for the security and reliability of the system. The vast majority of successful attacks on
                systems use exploits against known vulnerabilities that have patches available. Vendors will issue operating system updates
                when they become aware of security vulnerabilities and other serious functionality issues, but it is up to their customers
                to actually download and install these patches.<xhtml:br/><xhtml:br/> Note that lppchk was designed to catch accidental breakage of software - it was not designed to resist
                intentional attack. lppchk -c checks only the size and checksums of files - it does not check file permissions. As a result,
                it will not notice a binary that is set-UID or set-GID that should not be, or a modified file that has been tailored to have
                the "correct" checksum. If lppchk -c reports an unexpected value, you do have a problem - the lack of errors does not
                guarantee that all is well. You may wish to consider installing packages such as TripWire or AIDE, which are designed to
                resist attempts to deceive it. Also - it is normal for lppchk -c to flag files that have been updated by an emergency fix,
                as those fixes are not packaged to update the LPP database.<xhtml:br/><xhtml:br/> To check if a a specific LPP level is installed (for example, bos.rte.shell):<xhtml:br/><xhtml:code> # lslpp -L bos.rte.shell<xhtml:br/> Fileset Level State Type Description (Uninstaller)<xhtml:br/>
                    --------------------------------------------------------------<xhtml:br/> bos.rte.shell 5.1.0.16 A F Shells (bsh, ksh, csh)<xhtml:br/><xhtml:br/></xhtml:code> To check if a specific APAR is installed (for example, IY25437):<xhtml:br/><xhtml:code> # instfix -ivk IY25437<xhtml:br/> IY25437 Abstract: SECURITY: Buffer overflow in CDE dtspcd<xhtml:br/> Fileset
                    X11.Dt.lib:5.1.0.16 is applied on the system.<xhtml:br/> All filesets for IY25437 were found.<xhtml:br/></xhtml:code><xhtml:br/> You should also subscribe to IBM's Security Bulletins Digest, which directs you to install specific security
                patches as they come out. Information on subscribing to the Security Bulletins Digest is available from https://techsupport.services.ibm.com/server/pseries.subscriptionSvcs<xhtml:br/><xhtml:br/> Small sites that do not have an Enterprise Update process<xhtml:br/> To download recommended maintenance levels
                or individual PTFs for AIX:<xhtml:br/> http://www.ibm.com/servers/eserver/support/pseries/aixfixes.html<xhtml:br/> and
                follow the instructions that IBM presents on the web site.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/> Update system per your Enterprise Update procedures. (Small sites, see discussion.)<xhtml:br/> Verify that all
                patches are properly configured with<xhtml:br/><xhtml:code> lppchk -c<xhtml:br/> lppchk -l<xhtml:br/> lppchk -v<xhtml:br/></xhtml:code><xhtml:br/> After applying patches, double-check that services that were previously disabled have remained disabled. Patches
                will occasionally re-enable services that you may have already disabled.<xhtml:br/></xccdf:fixtext>
    </xccdf:Rule>
    <xccdf:Rule id="validate-your-system-before-making-changes" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Validate your system before making changes</xccdf:title>
      <xccdf:description> Ensuring your system is functioning properly before you make a change is a prudent system administration
                best practice and will save you hours of aggravation. Applying this Benchmark to a system that already has issues makes
                troubleshooting very difficult and may lead you to believe the Benchmark is at fault.<xhtml:br/><xhtml:br/> Examine the system and application logs using <xhtml:code>errpt -a</xhtml:code> or using smit to view them.
                Resolve all issues before continuing.<xhtml:br/></xccdf:description>
    </xccdf:Rule>
    <xccdf:Rule id="configure-ssh" role="full" selected="false" weight="1.0">
      <xccdf:title>Configure SSH</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> OpenSSH is a popular free distribution of the standards-track SSH
                protocols, which allow secure encrypted network logins and file transfers. Compilation of OpenSSH is complicated by the fact
                that it is dependent upon several other freely-available software libraries which also need to be built before OpenSSH
                itself can be compiled. However, we feel it is necessary to put forth this extra effort in order to stay current with
                OpenSSH releases and patches. Additionally, pre-compiled versions are often not compiled with the options you might find
                necessary, such as Kerberos support. For more information on OpenSSH, see http://www.openssh.org.<xhtml:br/> If you feel
                that you need to use a pre-compiled package for OpenSSH, you have several options:<xhtml:br/> 1. An AIX version is supplied
                on the AIX Bonus Pack CD's.<xhtml:br/> 2. IBM maintains an installp image for AIX5L at
                http://publib16.boulder.ibm.com/doc_link/en_US/a_doc_lib/aixbman/security/openssh.htm. This site also includes instructions
                for compiling OpenSSH on AIX.<xhtml:br/> 3. Bull maintains a very large repository of Open Source software for AIX, and may
                be more current than the software on the Bonus Pack CD's. Bull's web site is http://www.bullfreeware.com/. Install and
                configure SSH using the IBM Redbook at http://www.redbooks.ibm.com/redbooks/pdfs/sg246873.pdf, section 5.2.<xhtml:br/><xhtml:br/> The settings in this section attempt to ensure safe defaults for both the client and the server. Specifically,
                both the ssh client and the sshd server are configured to use only SSH protocol 2, as security vulnerabilities have been
                found in the first SSH protocol. This may cause compatibility issues at sites still using the vulnerable SSH protocol 1
                these sites should endeavor to configure all systems to use only SSH protocol 2.<xhtml:br/><xhtml:br/> Note: If you installed the SSH package in this step, there will be no -preCIS backup of the configuration files.
                If SSH was previously existing, the <xhtml:code>do-backup.ksh</xhtml:code> script will capture a backup of the configuration files.<xhtml:br/><xhtml:br/> Note: Ensure sshd is working properly (including ability to start automatically on reboot) before proceeding
                with this Benchmark. Failure to do so could lock you out of your machine if <xhtml:code>sshd</xhtml:code> is not running and
                you disable <xhtml:code>telnetd</xhtml:code>.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> 1. Install SSH (see discussion for sources).<xhtml:br/> 2. Modify
                /usr/local/etc/sshd_config (may be /etc/sshd_config, depending on version installed) - the script below will find the
                correct location for you: <xhtml:br/><xhtml:code> unalias cp rm mv<xhtml:br/> case `find /usr /etc -type f | grep -c ssh_config$` in<xhtml:br/> 0) echo "Cannot
                    find ssh_config" <xhtml:br/> ;;<xhtml:br/> 1) DIR=`find /usr /etc -type f 2&gt;/dev/null | \<xhtml:br/> grep
                    ssh_config$ | sed -e "s:/ssh_config::"`<xhtml:br/> cd $DIR<xhtml:br/> cp ssh_config ssh_config.tmp<xhtml:br/> awk '/^#?
                    *Protocol/ { print "Protocol 2"; next };<xhtml:br/> { print }' ssh_config.tmp &gt; ssh_config <xhtml:br/> if [
                    "`grep -El ^Protocol ssh_config`" = "" ]; then<xhtml:br/> echo 'Protocol 2' &gt;&gt; ssh_config <xhtml:br/> fi
                    <xhtml:br/> rm ssh_config.tmp<xhtml:br/> chmod 600 ssh_config<xhtml:br/> ;;<xhtml:br/> *) echo "You have multiple
                    sshd_config files. Resolve"<xhtml:br/> echo "before continuing."<xhtml:br/> ;;<xhtml:br/> esac<xhtml:br/><xhtml:br/></xhtml:code> Manually edit <xhtml:code>$DIR/ssh_config</xhtml:code> to put "Protocol 2" under the "Host *"
                entry. Because of the substantially different ssh_config files in the various versions of SSH, a manual edit is
                required.<xhtml:br/> Note: The required entry may already be in place.<xhtml:br/><xhtml:code> cd $DIR<xhtml:br/> cp sshd_config sshd_config.tmp<xhtml:br/> awk '/^#? *Protocol/ { print "Protocol 2"; next
                    };<xhtml:br/> /^#? *X11Forwarding/ \<xhtml:br/> { print "X11Forwarding yes"; next };<xhtml:br/> /^#? *IgnoreRhosts/
                    \<xhtml:br/> { print "IgnoreRhosts yes"; next };<xhtml:br/> /^#? *RhostsAuthentication/ \<xhtml:br/> { print "
                    RhostsAuthentication no"; next };<xhtml:br/> /^#? *RhostsRSAAuthentication/ \<xhtml:br/> { print
                    "RhostsRSAAuthentication no"; next };<xhtml:br/> /^#? *HostbasedAuthentication/ \<xhtml:br/> { print
                    "HostbasedAuthentication no"; next };<xhtml:br/> /^#? *PermitRootLogin/ \<xhtml:br/> { print "PermitRootLogin no"; next
                    };<xhtml:br/> /^#? *PermitEmptyPasswords/ \<xhtml:br/> { print "PermitEmptyPasswords no"; next };<xhtml:br/> /^#?
                    *Banner/ \<xhtml:br/> { print "Banner /etc/motd"; next };<xhtml:br/> {print}' sshd_config.tmp &gt;
                    sshd_config<xhtml:br/> rm sshd_config.tmp<xhtml:br/> chmod 600 sshd_config<xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/ssh_config Protocol 2-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^Protocol[[:space:]]+2[[:space:]]*$' /etc/ssh/ssh_config&quot;" success="pass">
              <ecl:command>egrep '^Protocol[[:space:]]+2[[:space:]]*$' /etc/ssh/ssh_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config Protocol 2-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^Protocol[[:space:]]+2[[:space:]]*$' /etc/ssh/sshd_config&quot;" success="pass">
              <ecl:command>egrep '^Protocol[[:space:]]+2[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config X11Forwarding yes-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^X11Forwarding[[:space:]]+yes[[:space:]]*$' /etc/ssh/sshd_config&quot;" success="pass">
              <ecl:command>egrep '^X11Forwarding[[:space:]]+yes[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config IgnoreRhosts yes-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^IgnoreRhosts[[:space:]]+yes[[:space:]]*$' /etc/ssh/sshd_config&quot;" success="pass">
              <ecl:command>egrep '^IgnoreRhosts[[:space:]]+yes[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config HostbasedAuthentication no-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^HostbasedAuthentication[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config&quot;" success="pass">
              <ecl:command>egrep '^HostbasedAuthentication[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config RhostsAuthentication no-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^RhostsAuthentication[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config&quot;" success="pass">
              <ecl:command>egrep '^RhostsAuthentication[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config RhostsRSAAuthentication no-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^RhostsRSAAuthentication[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config&quot;" success="pass">
              <ecl:command>egrep '^RhostsRSAAuthentication[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config PermitRootLogin no-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^PermitRootLogin[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config&quot;" success="pass">
              <ecl:command>egrep '^PermitRootLogin[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config PermitEmptyPasswords no-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^PermitEmptyPasswords[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config&quot;" success="pass">
              <ecl:command>egrep '^PermitEmptyPasswords[[:space:]]+no[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/ssh/sshd_config Banner /etc/motd-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^Banner[[:space:]]+/etc/motd[[:space:]]*$' /etc/ssh/sshd_config&quot;" success="pass">
              <ecl:command>egrep '^Banner[[:space:]]+/etc/motd[[:space:]]*$' /etc/ssh/sshd_config</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="install-tcp-wrappers-package" role="full" selected="false" weight="1.0">
      <xccdf:title>Install TCP wrappers package</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/> TCP Wrappers is installed in this section and configured in section 2.2. This step is optional if you already
                have TCP Wrappers installed. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> 1. Download pre-compiled TCP Wrappers from http://www.bullfreeware.com/download/aix43/tcp_wrappers-7.6.1.0.exe<xhtml:br/><xhtml:br/> While the package is named aix43 it has been installed and tested on all versions up to AIX 5.2.<xhtml:br/><xhtml:br/> 2. Install software. </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Package &quot;tcp_wrappers&quot; is installed-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="Package &quot;tcp_wrappers&quot; is installed" success="pass">
            <ecl:command>lslpp -l tcp_wrappers</ecl:command>
            <ecl:line-selection op="pm" value=".*"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="minimize-inetd-network-services">
    <xccdf:title>Minimize inetd network services</xccdf:title>
    <xccdf:description>This group holds the recommendations for configuring inetd network services.</xccdf:description>
    <xccdf:Rule id="disable-standard-services" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable standard Services</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The stock <xhtml:code>/etc/inetd.conf</xhtml:code> file shipped with AIX
                contains many services which are rarely used, or which have more secure alternatives. Indeed, after enabling SSH (see Item
                1.3), it may be possible to completely do away with all inetd-based services, since SSH provides both a secure login
                mechanism and a means of transferring files to and from the system. Using the above commands effectively disables all
                inetd-based network services. You will need to re-enable any service you find absolutely necessary to your organization. By
                disabling all inetd-based services and only re-enabling what is necessary you avoid a common mistake of simply overlooking a
                service which may be vulnerable.<xhtml:br/><xhtml:br/> We strongly recommend that you implement local procedures to ensure that unwanted services remain disabled. This
                will ensure that an operating system patch doesn't re-enable a service. <xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> for SVC in ftp telnet shell kshell login klogin exec \<xhtml:br/> echo discard chargen daytime time ttdbserver
                    dtspc; do<xhtml:br/> echo "Disabling $SVC TCP"<xhtml:br/> chsubserver -d -v $SVC -p tcp<xhtml:br/> done<xhtml:br/><xhtml:br/> for SVC in ntalk rstatd rusersd rwalld sprayd pcnfsd \<xhtml:br/> echo discard chargen daytime time cmsd;
                    do<xhtml:br/> echo "Disabling $SVC UDP"<xhtml:br/> chsubserver -d -v $SVC -p udp<xhtml:br/> done<xhtml:br/> refresh -s inetd<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--standard tcp services disabled-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^(ftp|telnet|shell|kshell|login|klogin|exec|echo|discard|chargen|daytime|time|ttdbserver|dtspc)[[:space:]]+[^[:space:]]+[[:space:]]+tcp' /etc/inetd.conf&quot;" success="pass">
              <ecl:command>egrep
                                '^(ftp|telnet|shell|kshell|login|klogin|exec|echo|discard|chargen|daytime|time|ttdbserver|dtspc)[[:space:]]+[^[:space:]]+[[:space:]]+tcp'
                                /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value="^.+$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--standard udp services disabled-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^(ntalk rstatd|rusersd|rwalld|sprayd|pcnfsd|echo|discard|chargen|daytime|time|cmsd)[[:space:]]+[^[:space:]]+[[:space:]]+udp' /etc/inetd.conf&quot;" success="pass">
              <ecl:command>egrep '^(ntalk
                                rstatd|rusersd|rwalld|sprayd|pcnfsd|echo|discard|chargen|daytime|time|cmsd)[[:space:]]+[^[:space:]]+[[:space:]]+udp'
                                /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value="^.+$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="configure-tcp-wrappers-to-limit-access" role="full" selected="false" weight="1.0">
      <xccdf:title>Configure TCP wrappers to limit access</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is there a reason to allow unlimited network access to this server? If the answer to
                    this question is no, then perform the action below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> By limiting access to the server, you reduce your exposure to threats
                from attackers on remote systems. For Internet-connected servers that provide service to the whole Internet, limiting access
                may not make sense. Intranet servers, limited-access servers, and workstations should limit access to only authorized networks.<xhtml:br/><xhtml:br/> TCP Wrappers allows the administrator to control who has access to various network services based on the IP
                address of the remote end of the connection. TCP Wrappers also provides logging information via Syslog about both successful
                and unsuccessful connections. TCP Wrappers are generally triggered out of <xhtml:code>/etc/inetd.conf</xhtml:code> but other
                options exist for "wrappering" non-inetd-based software (see the documentation provided with the source code release).<xhtml:br/><xhtml:br/> If you would rather download and compile TCP Wrappers instead of using the pre-compiled version, the source code
                is available at http://www.porcupine.org. <xhtml:br/><xhtml:br/> IPv6 Note: The TCP Wrappers binary referenced above does not support IPv6. If you need IPv6 support, please see
                http://www-aix.gsi.de/~bio/DOCS/tcpwrapperinstall.html for instructions on compiling TCP Wrappers for IPv6 support.<xhtml:br/><xhtml:br/> Many daemons (SSH for example) are compiled with TCP Wrapper support, so you can use
                    <xhtml:code>/etc/hosts.allow</xhtml:code> and <xhtml:code>/etc/hosts.deny</xhtml:code> to limit SSH access to your systems.<xhtml:br/><xhtml:br/> It is important to note that TCP wrappers looks at <xhtml:code>hosts.allow</xhtml:code> first, then
                    <xhtml:code>hosts.deny</xhtml:code>, and controls access based on the first match. If you omit entries in
                    <xhtml:code>hosts.allow</xhtml:code> and deny access to ALL in <xhtml:code>hosts.deny</xhtml:code>, you will block
                network access to all network clients. <xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> 1. Create <xhtml:code>/etc/hosts.allow</xhtml:code> and
                    <xhtml:code>/etc/hosts.deny</xhtml:code> per available documentation and to suit your particular environment.
                Configuring TCP Wrappers is beyond the scope of this Benchmark.<xhtml:br/><xhtml:br/> Note: Do not deny access to your system without allowing access.<xhtml:br/><xhtml:br/> 2. Modify <xhtml:code>/etc/inetd.conf</xhtml:code>:<xhtml:br/><xhtml:code> cd /etc<xhtml:br/> awk '($3 ~ /^tcp/) &amp;&amp; ($6 !~ /(internal|tcpd)$/) \<xhtml:br/> { $7 = $6; $6
                    = "/usr/local/bin/tcpd" }; \<xhtml:br/> { print }' inetd.conf &gt; inetd.conf.with_tcp_wrappers<xhtml:br/> cp
                    inetd.conf.with_tcp_wrappers inetd.conf<xhtml:br/> chown root:system inetd.conf<xhtml:br/> chmod 644 inetd.conf
                    inetd.conf.with_tcp_wrappers<xhtml:br/></xhtml:code><xhtml:br/> Test your configuration now by using the <xhtml:code>/usr/local/bin/tcpdchk</xhtml:code> command and by logging
                in remotely. <xhtml:br/></xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/hosts.deny ALL:ALL-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^ALL[[:space:]]*:[[:space:]]*ALL$' /etc/hosts.deny&quot;" success="pass">
              <ecl:command>egrep '^ALL[[:space:]]*:[[:space:]]*ALL$' /etc/hosts.deny</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/hosts.allow ALL: localhost-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^ALL[[:space:]]*:[[:space:]]*localhost.*$' /etc/hosts.allow&quot;" success="pass">
              <ecl:command>egrep '^ALL[[:space:]]*:[[:space:]]*localhost.*$' /etc/hosts.allow</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-telnet-if-abolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable telnet if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is there a mission-critical reason that requires users to access this system via
                    telnet, rather than the more secure SSH protocol? If the answer to this question is yes, proceed with the actions below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code>telnet</xhtml:code> uses an unencrypted network protocol, which means data from the login session (such as
                passwords and all other data transmitted during the session) can be stolen by eavesdroppers on the network, and also that
                the session can be hijacked by outsiders to gain access to the remote system. SSH provides encrypted network logins and
                should be used instead. Sites that are already using Kerberos may take advantage of the various Kerberos-specific options to
                enable encryption and stronger authentication in the telnet daemon itself ("man telnetd" for more information).<xhtml:br/><xhtml:br/> To aid in the migration to SSH, there is a freely available SSH client for Windows called putty, which is
                available from Simon Tatham (see http://www.chiark.greenend.org.uk/~sgtatham/putty/). There are numerous commercially
                supported SSH clients as well - check to see if your Enterprise already has an Enterprise SSH client.<xhtml:br/><xhtml:br/> Some Enterprises are using telnet over SSL, however, the simpler and more standard solution is to use SSH.
                Configuring telnet over SSL is beyond the scope of a Level 1 Benchmark and will not be addressed here.<xhtml:br/><xhtml:br/> It is understood that large Enterprises deeply entrenched in using <xhtml:code>telnet</xhtml:code> may take
                considerable effort in migrating from <xhtml:code>telnet</xhtml:code> to <xhtml:code>ssh</xhtml:code>, so
                <xhtml:code>telnet</xhtml:code> may have to be enabled. When it can be disabled, disable <xhtml:code>telnetd</xhtml:code>
                and refresh <xhtml:code>initd</xhtml:code>. Note: Ensure you have tested an alternate remote access method for your servers
                before leaving <xhtml:code>telnet</xhtml:code> disabled. Failure to do so may result in being denied remote
                access.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chsubserver -a -v telnet -p tcp<xhtml:br/> refresh -s inetd<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="OR">
        <!--Service &quot;telnet&quot; does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service &quot;telnet&quot; does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service &quot;telnet&quot; does not exist">
              <ecl:command>egrep '^(telnet)[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service &quot;telnet&quot; is &quot;off&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service &quot;telnet&quot; is &quot;off&quot;" success="fail">
              <ecl:command>egrep '^(telnet)[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-ftp-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable FTP if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is this machine an (anonymous) FTP server, or is there a mission-critical reason why
                    data must be transferred to and from this system via an FTP server, rather than sftp or scp? If the answer to this
                    question is yes, proceed with the actions below </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Like <xhtml:code>telnet</xhtml:code>, the FTP protocol is unencrypted,
                which means passwords and other data transmitted during the session can be captured by sniffing the network, and that the
                FTP session itself can be hijacked by an external attacker. SSH provides two different encrypted file transfer mechanisms -
                scp and sftp - and should be used instead. Even if FTP is required because the local system is an anonymous FTP server,
                consider requiring non-anonymous users on the system to transfer files via SSH-based protocols. For further information on
                restricting FTP access to the system, see section 7.2 below.<xhtml:br/><xhtml:br/> Note: Any directory writable by an anonymous FTP server should have its own partition. This helps prevent an FTP
                server from filling a hard drive used by other services. <xhtml:br/><xhtml:br/> To aid in the migration away from FTP, there are a number of freely available <xhtml:code>scp</xhtml:code> and
                    <xhtml:code>sftp</xhtml:code> client for Windows, such as WinSCP (available from
                http://winscp.sourceforge.net/eng/index.php) for a Graphical interface to putty, and pscp, which is a part of the previously
                mentioned putty package.<xhtml:br/><xhtml:br/> Some Enterprises are using FTP over SSL, however, the simpler and more standard solution is to use SSH.
                Configuring FTP over SSL is beyond the scope of a Level 1 Benchmark and will not be addressed here.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chsubserver -a -v ftp -p tcp<xhtml:br/> refresh -s inetd<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="OR">
        <!--Service &quot;ftp&quot; does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service &quot;ftp&quot; does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service &quot;ftp&quot; does not exist">
              <ecl:command>egrep '^(ftp)[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service &quot;ftp&quot; is &quot;off&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service &quot;ftp&quot; is &quot;off&quot;" success="fail">
              <ecl:command>egrep '^(ftp)[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-rlogin-rsh-rcp-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable rlogin/rsh/rcp if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is there a mission-critical reason why rlogin/rsh/rcp must be used instead of the
                    more secure ssh/scp? If the answer to this question is yes, proceed with the actions below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> SSH was designed to be a drop-in replacement for these protocols. It
                seems unlikely that there is ever a case where these tools cannot be replaced with SSH. Note that sites that are using the
                Kerberos security system may wish to look into using the "Kerberized" versions of <xhtml:code>rlogin/rsh</xhtml:code> that
                are provided with AIX (<xhtml:code>klogin</xhtml:code>, and <xhtml:code>kshell</xhtml:code>). </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chsubserver -a -v shell -p tcp<xhtml:br/> chsubserver -a -v login -p tcp<xhtml:br/> refresh -s inetd<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--Service &quot;shell&quot; does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service &quot;shell&quot; does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service &quot;shell&quot; does not exist">
                <ecl:command>egrep '^(shell)[[:space:]]+' /etc/inetd.conf</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service &quot;shell&quot; is &quot;off&quot;-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service &quot;shell&quot; is &quot;off&quot;" success="fail">
                <ecl:command>egrep '^(shell)[[:space:]]+' /etc/inetd.conf</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service &quot;login&quot; does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service &quot;login&quot; does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service &quot;login&quot; does not exist">
                <ecl:command>egrep '^(login)[[:space:]]+' /etc/inetd.conf</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service &quot;login&quot; is &quot;off&quot;-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service &quot;login&quot; is &quot;off&quot;" success="fail">
                <ecl:command>egrep '^(login)[[:space:]]+' /etc/inetd.conf</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-tftp-server-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable TFTP Server if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is this system a boot server or is there some other mission-critical reason why data
                    must be transferred to and from this system via TFTP? If the answer to this question is yes, proceed with the actions
                    below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> TFTP is typically used for network booting of diskless workstations,
                X-terminals, and other similar devices. Also, IBM RS/6000 SP systems require tftp to operate. Routers and other network
                devices may copy configuration data to remote systems via TFTP for backup. However, unless this system is needed in one of
                these roles, it is best to leave the TFTP service disabled.<xhtml:br/><xhtml:br/> Note: The tftp-server software is not installed by default. You will have to install it if you need to use it.
                After installing it, perform the actions above.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chsubserver -a -v tftp -p udp<xhtml:br/> refresh -s inetd<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="OR">
        <!--Service &quot;tftp&quot; does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service &quot;tftp&quot; does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service &quot;tftp&quot; does not exist">
              <ecl:command>egrep '^(tftp)[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service &quot;tftp&quot; is &quot;off&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service &quot;tftp&quot; is &quot;off&quot;" success="fail">
              <ecl:command>egrep '^(tftp)[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-kerberos-related-daemons-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable Kerberos-related daemons if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is the Kerberos security system in use at this site? Is there a mission-critical
                    reason that requires users to access this system via Kerberized rlogin/remsh, rather than the more secure SSH protocol?
                    If the answer to these questions is yes, proceed with the actions below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Kerberized <xhtml:code>rlogin</xhtml:code> offers a higher degree of
                security than traditional <xhtml:code>rlogin</xhtml:code> or <xhtml:code>telnet</xhtml:code> by eliminating many clear-text
                password exchanges from the network. However, it is still not as secure as SSH, which encrypts all traffic. For instance, if
                you use <xhtml:code>klogin</xhtml:code> to login to a system, that password isn't sent in the clear - but if you 'su' to
                another userid, that password is fair game for any network-sniffing programs.<xhtml:br/><xhtml:br/> Given the wide availability of free SSH implementations, it seems unlikely that there is ever a case where these
                tools cannot be replaced with SSH (again, see http://www.openssh.org).<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chsubserver -a -v klogin -p tcp<xhtml:br/> chsubserver -a -v kshell -p tcp <xhtml:br/> refresh -s
                    inetd<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:complex-check operator="OR">
          <!--Service &quot;klogin&quot; does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service &quot;klogin&quot; does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service &quot;klogin&quot; does not exist">
                <ecl:command>egrep '^(klogin)[[:space:]]+' /etc/inetd.conf</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service &quot;klogin&quot; is &quot;off&quot;-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service &quot;klogin&quot; is &quot;off&quot;" success="fail">
                <ecl:command>egrep '^(klogin)[[:space:]]+' /etc/inetd.conf</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
        <xccdf:complex-check operator="OR">
          <!--Service &quot;kshell&quot; does not exist or is disabled-->
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service &quot;kshell&quot; does not exist-->
            <xccdf:check-content>
              <ecl:shell-command check="none exist" comment="Service &quot;kshell&quot; does not exist">
                <ecl:command>egrep '^(kshell)[[:space:]]+' /etc/inetd.conf</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
          <xccdf:check system="http://cisecurity.org/check">
            <!--Service &quot;kshell&quot; is &quot;off&quot;-->
            <xccdf:check-content>
              <ecl:shell-command check="all" comment="Service &quot;kshell&quot; is &quot;off&quot;" success="fail">
                <ecl:command>egrep '^(kshell)[[:space:]]+' /etc/inetd.conf</ecl:command>
                <ecl:line-selection op="pm" value=".+"/>
              </ecl:shell-command>
            </xccdf:check-content>
          </xccdf:check>
        </xccdf:complex-check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-rquotad-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable rquotad if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is this system an NFS file server with disk quotas enabled? If the answer to this
                    question is yes, proceed with the actions below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code>rquotad</xhtml:code> allows NFS clients to enforce disk quotas on file systems that are mounted from the local
                system. If your site does not use disk quotas, then you may leave the <xhtml:code>rquotad</xhtml:code> service disabled. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chsubserver -a -v rquotad -p udp<xhtml:br/> refresh -s inetd<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="OR">
        <!--Service &quot;rquotad&quot; does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service &quot;rquotad&quot; does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service &quot;rquotad&quot; does not exist">
              <ecl:command>egrep '^(rquotad)[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service &quot;rquotad&quot; is &quot;off&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service &quot;rquotad&quot; is &quot;off&quot;" success="fail">
              <ecl:command>egrep '^(rquotad)[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-cde-related-daemons-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable CDE-related daemons if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is there a mission-critical reason to run a GUI on this system? If the answer to this
                    question is yes, proceed with the actions below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The <xhtml:code>rpc.ttdbserverd</xhtml:code> process supports many tools
                and applications in the CDE windowing environment, but has historically been a major security issue for Unix-based systems.
                If you do plan to leave this service enabled, not only is it vital to keep up to date on vendor patches, but also never
                enable this service on any system which is not well protected by a complete network security infrastructure (including
                network and host-based firewalls, packet filters, and intrusion detection infrastructure).<xhtml:br/><xhtml:br/> Note that since this service uses Sun's standard RPC mechanism, it is important that the system's RPC portmapper
                (rpcbind) also be enabled when this service is turned on.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chsubserver -a -v 100083 -p tcp<xhtml:br/> refresh -s inetd<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="OR">
        <!--Service &quot;ttdbserver&quot; does not exist or is disabled-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service &quot;ttdbserver&quot; does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="Service &quot;ttdbserver&quot; does not exist">
              <ecl:command>egrep '^(ttdbserver)[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--Service &quot;ttdbserver&quot; is &quot;off&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="Service &quot;ttdbserver&quot; is &quot;off&quot;" success="fail">
              <ecl:command>egrep '^(ttdbserver)[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="minimize-daemon-services">
    <xccdf:title>Minimize Daemon Services</xccdf:title>
    <xccdf:description>This group defines recommendations for minimizing the attack surface by minimizing daemon services.</xccdf:description>
    <xccdf:Rule id="disable-login-prompts-on-serial-ports" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable login prompts on serial ports</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> By disabling the getty process on the system serial ports, we make it
                more difficult for unauthorized users to attach modems, terminals, and other remote access devices to these ports. Note that
                this action may safely be performed even if console access to the system is provided via the serial ports, because the
                system console's getty process uses <xhtml:code>/dev/console</xhtml:code> rather than a <xhtml:code>/dev/tty</xhtml:code>. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action - AIX5L only:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> for i in `grep ^tty /etc/inittab | cut -f1 -d:`; do<xhtml:br/> echo "Disabling login from port
                    /dev/$i"<xhtml:br/> chitab "$i:2:off:/usr/sbin/getty /dev/$i"<xhtml:br/> done<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;lsitab -a|egrep '^tty'|egrep -v '^.+:.+:off'&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;lsitab -a|egrep '^tty'|egrep -v '^.+:.+:off'&quot;" success="pass">
            <ecl:command>lsitab -a|egrep '^tty'|egrep -v '^.+:.+:off'</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="disable-inetd-if-possible" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable inetd, if possible</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> If the actions in Section 2 of this benchmark resulted in all
                inetd-based services being disabled, there is no point in running <xhtml:code>inetd</xhtml:code> at boot time.<xhtml:br/><xhtml:br/> The code added to the <xhtml:code>newinetsvc</xhtml:code> boot script will result in
                <xhtml:code>inetd</xhtml:code> automatically being restarted at boot time if services are ever enabled in
                    <xhtml:code>inetd.conf</xhtml:code>. However, it may be necessary to manually start <xhtml:code>inetd</xhtml:code> if
                the administrator wishes to enable some of these services without rebooting.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> if [ `grep -Evc '^[ \t]*(#|$)' /etc/inetd.conf` -eq 0 ]; then<xhtml:br/> echo "Turning off inetd"<xhtml:br/>
                    chrctcp -d inetd<xhtml:br/> stopsrc -s inetd<xhtml:br/> fi<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;lssrc -s inetd|tail -1|egrep 'active$'&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;lssrc -s inetd|tail -1|egrep 'active$'&quot;">
            <ecl:command>lssrc -s inetd|tail -1|egrep 'active$'</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="disable-email-server-if-possible" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable email server, if possible</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> It is possible to run a Unix system with the Sendmail daemon disabled
                and still allow users (and programs such as 'cron') on that system to send email out from that machine. Running Sendmail in
                "daemon mode" (with the -bd command-line option) is only required on machines that act as mail servers, receiving and
                processing email from other hosts on the network.<xhtml:br/><xhtml:br/> Note that after disabling the -bd option on the local mail server on AIX 5L (or any system running Sendmail
                v8.12 or later) it is also necessary to modify the <xhtml:code>/etc/mail/submit.cf</xhtml:code> file. Find the line that
                reads "D{MTAHost}localhost" and change localhost to the name of some other local mail server for the organization. This will
                cause email generated on the local system to be relayed to that mail server for further processing and delivery.<xhtml:br/><xhtml:br/><xhtml:u>Closing AIX Sendmail Open Relay</xhtml:u><xhtml:br/><xhtml:br/> The default behavior of Sendmail in AIX 4.3.3 allows open relaying - the mail server will accept and process
                mail sent from outside your organization to addresses that are also outside your organization. This defect is commonly used
                by "spammers" to send e-mail to thousands of addresses, all originating from your mail server. <xhtml:br/><xhtml:br/> Before enabling sendmail in daemon mode, the sendmail configuration file must be modified to prevent this misuse
                of your system. The above steps explain how to update the <xhtml:code>sendmail.cf</xhtml:code> configuration file. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action - No, this machine does not process mail:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> stopsrc -s sendmail<xhtml:br/> chrctcp -d sendmail<xhtml:br/> cd /var/spool/cron/crontabs<xhtml:br/> crontab -l
                    &gt; root.tmp<xhtml:br/> if [ `grep -c "sendmail -q" root.tmp` -eq 0 ]; then<xhtml:br/> echo "0 * * * *
                    /usr/sbin/sendmail -q" &gt;&gt; root.tmp<xhtml:br/> crontab root.tmp<xhtml:br/> fi<xhtml:br/> rm -f
                    root.tmp<xhtml:br/></xhtml:code>
        <xhtml:br/> This will make sendmail run the queue once an hour, sending out any mail that may<xhtml:br/> have accumulated on
                the machine (from cron jobs, etc).<xhtml:br/><xhtml:br/><xhtml:strong>Action - Yes, this machine processes mail:</xhtml:strong><xhtml:br/> Sendmail is preconfigured to allow
                relaying from outside your domain. CIS is preparing a Sendmail Benchmark that will replace this section and address other
                Sendmail issues. In the interim, please follow the guidelines presented by Sandor Sklar at
                http://www.securitymap.net/sdm/docs/system-sec/Securing%20AIX%20Network%20Services.htm. </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--sendmail subsystem is disabled-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lssrc -s sendmail|tail -1|egrep 'active$'&quot;">
              <ecl:command>lssrc -s sendmail|tail -1|egrep 'active$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sendmail is disabled in rc.tcpip-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^[^#].*sendmail' /etc/rc.tcpip&quot;">
              <ecl:command>egrep '^[^#].*sendmail' /etc/rc.tcpip</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--sendmail is running via cron-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;crontab -l|egrep '^[^#].*sendmail -q'&quot;">
              <ecl:command>crontab -l|egrep '^[^#].*sendmail -q'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="disable-nis-server-processes-if-possible" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable NIS Server processes if possible</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is this machine an NIS (Network Information Service) server? If the answer to this
                    question is no, then perform the action below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> This service must be enabled if the local site is using the NIS naming
                service to distribute system and user configuration information. NIS services are a convenient method to manage user
                accounts and home directories across a large network of servers, however they are also a favored entry point for attackers.
                If the NIS software is installed but not configured, an attacker can cripple a machine by starting NIS. In addition, tools
                like <xhtml:code>ypsnarf</xhtml:code> allow an attacker to grab the contents of your NIS maps, providing large amounts of
                information about your site. Use the <xhtml:code>/etc/yp/securenets</xhtml:code> file to restrict what machines your NIS
                server will talk to. Also utilize secure NIS to encrypt communication between the client and server.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> Use the SMIT fast-path<xhtml:br/><xhtml:code> smit remove<xhtml:br/></xhtml:code> to remove the <xhtml:code>bos.net.nis.server</xhtml:code> fileset or use the command:<xhtml:br/><xhtml:code> [ `lslpp -L bos.net.nis.server 2&gt;&amp;1 | \<xhtml:br/> grep -c "not installed"` -eq 0 ]
                    &amp;&amp; \<xhtml:br/> /usr/lib/instl/sm_inst installp_cmd -u \<xhtml:br/> -f'bos.net.nis.server'<xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Package bos.net.nis.server is not installed-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="Package &quot;bos.net.nis.server&quot; does not exist" success="pass">
            <ecl:command>lslpp -l bos.net.nis.server</ecl:command>
            <ecl:line-selection op="pm" value=".*"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="disable-nis-client-processes-if-possible" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable NIS Client processes if possible</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is this machine an NIS (Network Information Service) client? If the answer to this
                    question is no, then perform the action below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> NIS services are a convenient method to manage user accounts and home
                directories across a large network of servers, however they are also a favored entry point for attackers. For this reason,
                many organizations choose not to use NIS. If you do not need NIS, remove it from the system.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> Use the SMIT fast-path<xhtml:br/><xhtml:code> smit remove<xhtml:br/></xhtml:code><xhtml:br/> to remove the <xhtml:code>bos.net.nis.client</xhtml:code> fileset or use the command:<xhtml:br/><xhtml:code> [ `lslpp -L bos.net.nis.client 2&gt;&amp;1 | \<xhtml:br/> grep -c "not installed"` -eq 0 ]
                    &amp;&amp; \<xhtml:br/> /usr/lib/instl/sm_inst installp_cmd -u \<xhtml:br/> -f'bos.net.nis.client'<xhtml:br/><xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Package bos.net.nis.client is not installed-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="Package &quot;bos.net.nis.client&quot; does not exist" success="pass">
            <ecl:command>lslpp -l bos.net.nis.client</ecl:command>
            <ecl:line-selection op="pm" value=".*"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="disable-nfs-server-processes-if-possible" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable NFS Server processes if possible</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is this machine an NFS file server? If the answer to this question is no, then
                    perform the action below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> NFS is frequently exploited to gain unauthorized access to files and
                systems. Clearly there is no need to run the NFS server-related daemons on hosts that are not NFS servers. If the machine is
                an NFS server, the administrator should take reasonable precautions when exporting file systems, including restricting NFS
                access to a specific range of local IP addresses and exporting file systems "read-only" and "nosuid" where appropriate.
                Also, you must ensure that all of the UID/GID on the server and clients systems are unique. NFS file access is based on the
                UID/GID pair so if there are conflicting UID/GID pairs between the servers and clients, there is a possibility of
                unauthorized file access. You should also strongly consider using the AIX Secure NFS facility. This facility uses DES
                encryption and public key cryptography to identify users and servers.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> [ -f /etc/exports ] &amp;&amp; rm -f /etc/exports<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--/etc/exports does not exist-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="/etc/exports does not exist" success="pass">
            <ecl:command>find /etc/exports -follow -prune -ls 2&gt;/dev/null</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="disable-nfs-cllient-processes-if-possible" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable NFS Client processes if possible</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is there a mission-critical reason why this system must access file systems from
                    remote servers via NFS (or uses NIS)? If the answer to this question is no, then perform the action below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> While this action disables the standard NFS client processes, it is
                important to note that it is still possible for the superuser to mount remote file systems on the local machine via NFS. The
                administrator can completely disable NFS client access by removing the NFS client software packages, but these packages will
                have to be re-installed and repatched if NFS is to be re-enabled at a later date.<xhtml:br/><xhtml:br/> Note that other file transfer schemes (such as rdist via SSH) can often be preferable to NFS for certain
                applications. The use of secure RPC or Kerberos can significantly improve NFS security. NIS is also started in /etc/rc.nfs,
                so do not run rmnfs if your site uses NIS.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> rmnfs -B<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;lsitab rcnfs&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;lsitab rcnfs&quot;" success="pass">
            <ecl:command>lsitab rcnfs</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="disable-gui-login-if-possible" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable GUI login if possible</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is there a mission-critical reason to run a GUI on this system? If the answer to this
                    question is no, then perform the action below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Note that for the CDE GUI to function properly, it is also necessary to
                enable the rpcbind process (see Item 3.11) and the rpc.ttdbserverd process (see Item 2.8). The X Windows-based CDE GUI
                systems, as well as the rpcbind and rpc.ttdbserverd processes have had a history of security issues. Never run any
                GUI-oriented service or application on a system unless that machine is protected by a strong network security
                infrastructure.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chmod ug-s /usr/dt/bin/dtaction \<xhtml:br/> /usr/dt/bin/dtappgather /usr/dt/bin/dtprintinfo<xhtml:br/>
                    /usr/dt/bin/dtsession<xhtml:br/> /usr/dt/bin/dtconfig -d<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod ug-s /usr/dt/bin/dtaction /usr/dt/bin/dtappgather /usr/dt/bin/dtprintinfo /usr/dt/bin/dtsession-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;(cd /usr/dt/bin;for f in dtaction dtappgather dtprintinfo dtsession; do find $f -perm -ug=s -ls ; done)&quot;">
              <ecl:command>(cd /usr/dt/bin;for f in dtaction dtappgather dtprintinfo dtsession; do find $f -perm -ug=s -ls ;
                                done)</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lsitab dt&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lsitab dt&quot;" success="pass">
              <ecl:command>lsitab dt</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="turn-off-services-which-are-not-commonly-used" role="full" selected="false" weight="1.0">
      <xccdf:title>Turn off services which are not commonly used</xccdf:title>
      <xccdf:description>
        <xhtml:strong> Discussion:</xhtml:strong>
        <xhtml:br/> Disabling these services in the System Resource Controller will disable
                a wide variety of infrequently used subsystems. The resources are made inoperative (rather than removed outright) so that
                the local administrator can easily "restore" any of these resources if they discover a mission-critical need for one of
                these services. Note also that vendor patches may restore some of the original entries in the System Resource Controller -
                it is always a good idea to check the System Resource Controller using lssrc -a for any resources that may have been added
                by the patch installation process. <xhtml:br/><xhtml:br/> The rest of the actions in this section give the administrator the option of re-enabling certain services in
                particular, the services that are disabled. Rather than disabling and then re-enabling these services, experienced
                administrators may wish to simply disable only those services that they know are unnecessary for their systems.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action (AIX 4.3.3):</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> for SVC in routed gated named timed rwhod \<xhtml:br/> snmpd dpid2 lpd portmap ndpd-router ndpd-host;
                    do<xhtml:br/> echo "Turning off $SVC"<xhtml:br/> stopsrc -s $SVC<xhtml:br/> chrctcp -d $SVC<xhtml:br/> done<xhtml:br/><xhtml:br/> for SVC in piobe httpdlite pmd writesrv; do<xhtml:br/> echo "Turning off $SVC"<xhtml:br/> rmitab
                    $SVC<xhtml:br/> done<xhtml:br/><xhtml:br/><xhtml:strong>Action (AIX 5):</xhtml:strong><xhtml:br/> for SVC in routed gated named timed rwhod mrouted \<xhtml:br/>
                    snmpd hostmibd dpid2 lpd portmap autoconf6 \<xhtml:br/> ndpd-router ndpd-host; do<xhtml:br/> echo "Turning off
                    $SVC"<xhtml:br/> stopsrc -s $SVC<xhtml:br/> chrctcp -d $SVC<xhtml:br/> done<xhtml:br/><xhtml:br/> for SVC in piobe i4ls httpdlite pmd writesrv; do<xhtml:br/> echo "Turning off $SVC"<xhtml:br/> stopsrc -s
                    $SVC<xhtml:br/> rmitab $SVC<xhtml:br/> done<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;for SVC in routed gated named timed rwhod mrouted snmpd hostmibd dpid2 lpd portmap autoconf6 ndpd-router ndpd-host; do lssrc -s $SVC|tail -1; done|grep 'active'&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;for SVC in routed gated named timed rwhod mrouted snmpd hostmibd dpid2 lpd portmap autoconf6 ndpd-router ndpd-host; do lssrc -s $SVC|tail -1; done|grep 'active'&quot;" success="pass">
              <ecl:command>for SVC in routed gated named timed rwhod mrouted snmpd hostmibd dpid2 lpd portmap autoconf6
                                ndpd-router ndpd-host; do lssrc -s $SVC|tail -1; done|grep 'active'</ecl:command>
              <ecl:line-selection op="pm" value="^.+$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;for SVC in piobe i4ls httpdlite pmd writesrv; do lsitab $SVC; done&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;for SVC in piobe i4ls httpdlite pmd writesrv; do lsitab $SVC; done&quot;" success="pass">
              <ecl:command>for SVC in piobe i4ls httpdlite pmd writesrv; do lsitab $SVC; done</ecl:command>
              <ecl:line-selection op="pm" value="^.+$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-printer-daemons-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable printer daemons if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is this system a print server, or is there a mission-critical reason why users must
                    submit print jobs from this system? If the answer to the question is yes, then perform the action below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> PIOBE stands for Printer IO Back End. If users will never print files
                from this machine and the system will never be used as a print server by other hosts on the network, then it is safe to
                disable these services. Note that the RFC 1179 service is a BSD-compatible print spooler, which only has to be enabled if
                the machine is being used as a network print server by machines that require a BSD-style remote printer interface. In most
                cases, this RFC 1179 service is not necessary and should not be enabled.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> mkitab -i cron \<xhtml:br/> "piobe:2:wait:/usr/lib/lpd/pio/etc/pioinit &gt;/dev/null
                    2&gt;&amp;1"<xhtml:br/> chrctcp -a lpd<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;egrep '^lpd[[:space:]]+' /etc/inetd.conf&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;egrep '^lpd[[:space:]]+' /etc/inetd.conf&quot;">
            <ecl:command>egrep '^lpd[[:space:]]+' /etc/inetd.conf</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-snmp-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable SNMP if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Does a tool (e.g., IBM OpenView, MRTG, Cricket) that relies on SNMP remotely monitor
                    this system? If the answer to the question is yes, then perform the action below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> If you are using SNMP to monitor the hosts on your network, it is
                prudent to change the default community string used to access data via SNMP. Use the community and view statements in
                    <xhtml:code>/etc/snmpd.conf</xhtml:code> to change the community strings. In addition, use the address/netmask and
                permissions parameters on the community statement to restrict SNMP access to only your management stations.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chrctcp -a snmpd<xhtml:br/> chrctcp -a dpid2<xhtml:br/> chrctcp -a hostmibd <xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^snmpd[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^snmpd[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^snmpd[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^dpid2[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^dpid2[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^dpid2[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^hostmibd[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^hostmibd[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^hostmibd[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-portmap-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable portmap if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Are any of the following statements true? This machine is an NFS client or server;
                    This machine is an NIS (YP) or NIS+ client or server; This machine runs the CDE GUI; The machine runs a third-party
                    software application which is dependent on RPC support; If any of the answers to these questions is yes, then proceed
                    with the actions below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> RPC-based services typically use very weak or non-existent
                authentication and yet may share very sensitive information. Unless one of the services listed above is required on this
                machine, it is best to disable RPC-based tools completely. If you are unsure whether or not a particular third-party
                application requires RPC services, consult with the application vendor.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chrctcp -a portmap </xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;egrep '^portmap[[:space:]]+' /etc/inetd.conf&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;egrep '^portmap[[:space:]]+' /etc/inetd.conf&quot;">
            <ecl:command>egrep '^portmap[[:space:]]+' /etc/inetd.conf</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-ipv6-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable IPv6 if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Does the system in question use the IPv6 protocol? If the answer is yes, then perform
                    the following action. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Although IPv6 is being deployed at many sites, it is still not
                widespread. Unless your network already has IPv6 support, running the IPv6 daemons is pointless (and can allow other hosts
                on the same physical subnet to connect via IPv6 even when the network doesn't support it). AIX's support of IPv6 (for
                instance, in inetd) does not require these daemons to be running unless you want to communicate with another machine using
                IPv6 - the IPv6-aware software works just fine in IPv4-only or standalone mode without these daemons.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chrctcp -a autoconf6<xhtml:br/> chrctcp -a ndpd-router<xhtml:br/> chrctcp -a ndpd-host<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^autoconf6[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^autoconf6[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^autoconf6[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^ndpd-router[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^ndpd-router[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^ndpd-router[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^ndpd-host[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^ndpd-host[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^ndpd-host[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-dhcp-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable DHCP if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Does the system in question function as a DHCP client, server, or relay agent? For
                    each of the three cases, if the answer is yes, then perform the applicable action below (shown in the comment to the
                    right of the command). </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> DHCP is a popular protocol for dynamically assigning IP addresses and
                other network information to systems on the network (rather than having administrators manually manage this information on
                each host). However, if this system is not a DHCP server for the network, a DHCP client, or a DHCP relay agent, there is no
                need to be running this service.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> DHCP client<xhtml:br/><xhtml:code> chrctcp -a dhcpcd # client daemon<xhtml:br/></xhtml:code> DHCP server<xhtml:br/><xhtml:code> chrctcp -a dhcpsd # server daemon<xhtml:br/></xhtml:code> DHCP relay agent <xhtml:br/><xhtml:code> chrctcp -a dhcprd # relay daemon </xhtml:code></xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^dhcpcd[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^dhcpcd[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^dhcpcd[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^dhcpsd[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^dhcpsd[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^dhcpsd[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^dhcprd[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^dhcprd[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^dhcprd[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-i4ls-and-ncs-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable i4ls and NCS if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Does the system require the i4ls licensing software? If the answer is yes, then
                    perform the following action. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> As a particular special-case, the IBM VisualAge compilers can be
                installed with a nodelocked license in <xhtml:code>/var/ifor/nodelock</xhtml:code>, eliminating the requirement for the i4ls
                daemons. This in turn will probably result in the Network Computing System (NCS) daemons not being started either, as i4ls
                is one of the few products that uses NCS.M<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> mkitab -i cron "i4ls:2:wait:/usr/bin/startsrc -swritesrv"<xhtml:br/> chrctcp -a
                writesrv<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;lsitab i4ls&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;lsitab i4ls&quot;">
            <ecl:command>lsitab i4ls</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="only-enable-writesrv-pmd-httpdlite-if-absolutely-necessary" role="full" selected="false" weight="1.0">
      <xccdf:title>Only enable writesrv, pmd, httpdlite if absolutely necessary</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Are the writesrv, pmd, or httpdlite services required? If the answer is yes, then
                    perform the corresponding action below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> These services are started from the
                <xhtml:code>/etc/inittab</xhtml:code> file. The <xhtml:code>rmitab</xhtml:code> command removes a specified service. The
                following services are started by <xhtml:code>inittab</xhtml:code> and can be removed if not needed: <xhtml:ul><xhtml:li><xhtml:code>writesrv</xhtml:code> - allows users to chat using the system write facility on a terminal.</xhtml:li><xhtml:li><xhtml:code>pmd</xhtml:code> - Power management service that turns your machine off if it has been idle a
                        specific amount of time.</xhtml:li><xhtml:li><xhtml:code>httpdlite</xhtml:code> - Lite NetQuestion Web server software for online documentation. This is
                        only needed for the "search" function for web-browsable documentation. The 'man' command does not need this to work
                        correctly.</xhtml:li></xhtml:ul></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> writesrv<xhtml:br/> mkitab -i cron "writesrv:2:wait:/usr/bin/startsrc -swritesrv"<xhtml:br/> chrctcp -a
                    writesrv<xhtml:br/> pmd<xhtml:br/> mkitab -i cron "pmd:2:wait:/usr/bin/pmd &gt; /dev/console 2&gt;&amp;1 #
                    Start PM daemon"<xhtml:br/> chrctcp -a pmd<xhtml:br/> httpdlite<xhtml:br/> mkitab -i cron
                    "httpdlite:2:once:/usr/IMNSearch/httpdlite/httpdlite -r /etc/IMNSearch/httpdlite/httpdlite.conf &amp;
                    &gt;/dev/console 2&gt;&amp;1"<xhtml:br/> chrctcp -a httpdlite<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lsitab writesrv&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lsitab writesrv&quot;">
              <ecl:command>lsitab writesrv</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^writesrv[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^writesrv[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^writesrv[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lsitab pmd&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lsitab pmd&quot;">
              <ecl:command>lsitab pmd</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^pmd[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^pmd[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^pmd[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lsitab httpdlite&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lsitab httpdlite&quot;">
              <ecl:command>lsitab httpdlite</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^httpdlite[[:space:]]+' /etc/inetd.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep '^httpdlite[[:space:]]+' /etc/inetd.conf&quot;">
              <ecl:command>egrep '^httpdlite[[:space:]]+' /etc/inetd.conf</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="Kernel-tuning">
    <xccdf:title>Kernel tuning</xccdf:title>
    <xccdf:description>This group has recommendations that modify the Kernel settings.</xccdf:description>
    <xccdf:Rule id="disable-core-dumps" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable core dumps</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Some vulnerabilities attempt to cause a core dump. Since applications
                can dump the entire contents of that application's memory at the time of the fault, sensitive information can be contained
                in the core file and be extracted by attackers. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> Edit <xhtml:code>/etc/security/limits</xhtml:code> and change the core value
                in the default stanza to:<xhtml:br/><xhtml:code> core 0<xhtml:br/></xhtml:code><xhtml:br/> Add the following line below it:<xhtml:br/><xhtml:br/><xhtml:code> core_hard = 0<xhtml:br/></xhtml:code><xhtml:br/> Execute these commands:<xhtml:br/><xhtml:code> echo "# Added by CISecurity Benchmark" &gt;&gt; /etc/profile<xhtml:br/> echo "ulimit -c 0"
                    &gt;&gt; /etc/profile <xhtml:br/> chdev -l sys0 -a fullcore=false<xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lssec -f /etc/security/limits -s default -a core|egrep -v 'core=0$'&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lssec -f /etc/security/limits -s default -a core|egrep -v 'core=0$'&quot;">
              <ecl:command>lssec -f /etc/security/limits -s default -a core|egrep -v 'core=0$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lssec -f /etc/security/limits -s default -a core_hard|egrep -v 'core_hard=0$'&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lssec -f /etc/security/limits -s default -a core_hard|egrep -v 'core_hard=0$'&quot;">
              <ecl:command>lssec -f /etc/security/limits -s default -a core_hard|egrep -v 'core_hard=0$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^ulimit[[:space:]]+-c[[:space:]]+0[[:space:]]*$' /etc/profile&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^ulimit[[:space:]]+-c[[:space:]]+0[[:space:]]*$' /etc/profile&quot;" success="pass">
              <ecl:command>egrep '^ulimit[[:space:]]+-c[[:space:]]+0[[:space:]]*$' /etc/profile</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lsattr -l sys0 -E -a fullcore|egrep -v '^fullcore true'&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lsattr -l sys0 -E -a fullcore|egrep -v '^fullcore true'&quot;">
              <ecl:command>lsattr -l sys0 -E -a fullcore|egrep -v '^fullcore true'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="network-parameter-modifications" role="full" selected="false" weight="1.0">
      <xccdf:title>Network parameter modifications</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> We are creating a new script that will be executed at boot time to
                reconfigure various network parameters, to be in line with current best practices.<xhtml:br/><xhtml:br/> Note also that support for source-routed packets is needed in some cluster configurations, so the four
                'srcroute' options should be omitted in those environments.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> cat &lt;&lt;EOF &gt; /etc/rc.net-tune<xhtml:br/> #!/bin/ksh<xhtml:br/> # Deal with SYN-flood
                    attacks as best we can.<xhtml:br/> /usr/sbin/no -o clean_partial_conns=1<xhtml:br/> # Do not allow SMURF broadcast
                    attacks.<xhtml:br/> /usr/sbin/no -o directed_broadcast=0<xhtml:br/> # Don't allow other machines to reset our
                    netmask<xhtml:br/> /usr/sbin/no -o icmpaddressmask=0<xhtml:br/> # Ignore redirects, don't send them
                    ourselves.<xhtml:br/> # ICMP Redirect is a poor excuse for a routing protocol.<xhtml:br/> /usr/sbin/no -o
                    ipignoreredirects=1<xhtml:br/> /usr/sbin/no -o ipsendredirects=0<xhtml:br/> # Refuse to have anything to do with
                    source-routed packets.<xhtml:br/> /usr/sbin/no -o ipsrcrouteforward=0<xhtml:br/> /usr/sbin/no -o
                    ipsrcrouterecv=0<xhtml:br/> /usr/sbin/no -o ipsrcroutesend=0<xhtml:br/> /usr/sbin/no -o nonlocsrcroute=0<xhtml:br/>
                    EOF<xhtml:br/> chmod +x /etc/rc.net-tune<xhtml:br/> mkitab -i rctcpip "rcnettune:2:wait:/etc/rc.net-tune &gt;
                    \<xhtml:br/> /dev/console 2&gt;&amp;1"<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--no -o clean_partial_conns=1-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;no -o clean_partial_conns|egrep -v '^clean_partial_conns = 1$'&quot;">
              <ecl:command>no -o clean_partial_conns|egrep -v '^clean_partial_conns = 1$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--no -o directed_broadcast=0-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;no -o directed_broadcast|egrep -v '^directed_broadcast = 0$'&quot;">
              <ecl:command>no -o directed_broadcast|egrep -v '^directed_broadcast = 0$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--no -o icmpaddressmask=0-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;no -o icmpaddressmask|egrep -v '^icmpaddressmask = 0$'&quot;">
              <ecl:command>no -o icmpaddressmask|egrep -v '^icmpaddressmask = 0$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--no -o ipignoreredirects=1-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;no -o ipignoreredirects|egrep -v '^ipignoreredirects = 1$'&quot;">
              <ecl:command>no -o ipignoreredirects|egrep -v '^ipignoreredirects = 1$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--no -o ipsendredirects=0-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;no -o ipsendredirects|egrep -v '^ipsendredirects = 0$'&quot;">
              <ecl:command>no -o ipsendredirects|egrep -v '^ipsendredirects = 0$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--no -o ipsrcrouteforward=0-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;no -o ipsrcrouteforward|egrep -v '^ipsrcrouteforward = 0$'&quot;">
              <ecl:command>no -o ipsrcrouteforward|egrep -v '^ipsrcrouteforward = 0$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--no -o ipsrcrouterecv=0-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;no -o ipsrcrouterecv|egrep -v '^ipsrcrouterecv = 0$'&quot;">
              <ecl:command>no -o ipsrcrouterecv|egrep -v '^ipsrcrouterecv = 0$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--no -o ipsrcroutesend=0-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;no -o ipsrcroutesend|egrep -v '^ipsrcroutesend = 0$'&quot;">
              <ecl:command>no -o ipsrcroutesend|egrep -v '^ipsrcroutesend = 0$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--no -o nonlocsrcroute=0-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;no -o nonlocsrcroute|egrep -v '^nonlocsrcroute = 0$'&quot;">
              <ecl:command>no -o nonlocsrcroute|egrep -v '^nonlocsrcroute = 0$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="restrict-nfs-client-requests-to-privileged-ports" role="full" selected="false" weight="1.0">
      <xccdf:title>Restrict NFS Client requests to privileged ports</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Setting this parameter causes the NFS server process on the local system
                to ignore NFS client requests that do not originate from the privileged port range (ports less than 1024). This should not
                hinder normal NFS operations but may block some NFS attacks that are run by unprivileged users.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> cat &lt;&lt;EOF &gt;&gt; /etc/rc.net-tune<xhtml:br/> # Require NFS to use privileged
                    ports<xhtml:br/> /usr/sbin/nfso -o portcheck=1 -o nfs_use_reserved_ports=1<xhtml:br/> EOF<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--nfso -o portcheck=1-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;nfso -o portcheck|egrep -v '^portcheck = 1$'&quot;">
              <ecl:command>nfso -o portcheck|egrep -v '^portcheck = 1$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--nfso -o  nfs_use_reserved_ports=1-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;nfso -o nfs_use_reserved_ports|egrep -v '^ nfs_use_reserved_ports = 1$'&quot;">
              <ecl:command>nfso -o nfs_use_reserved_ports|egrep -v '^ nfs_use_reserved_ports = 1$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="logging">
    <xccdf:title>Logging</xccdf:title>
    <xccdf:description>
      <xhtml:p>The items in this section cover enabling various different forms of system
      logging in order to keep track of activity on the system. Tools such as Swatch
      (<xhtml:a href="http://www.oit.ucsb.edu/~eta/swatch/">http://www.oit.ucsb.edu/~eta/swatch</xhtml:a>), Logcheck (<xhtml:a href="http://sourceforge.net/projects/sentrytools/">http://sourceforge.net/projects/sentrytools</xhtml:a>), and HP's IDS/9000 for
      HP-UX 11 (<xhtml:a href="http://www.software.hp.com/ISS_products_list.html">http://www.software.hp.com/ISS_products_list.html</xhtml:a>) can be used to
      automatically monitor logs for intrusion attempts and other suspicious system
      behavior. Note that Swatch and Logcheck are not officially supported by
      HP.</xhtml:p>
      <xhtml:p>In addition to the local log files created by the steps in this section, it is
        also recommended that sites collect copies of their system logs on a secure,
        centralized log server. Not only does centralized logging help sites correlate
        events that may be occurring on multiple systems, but having a second copy of the
        system log information may be critical after a system compromise where the attacker
        has modified the local log files on the affected system(s).</xhtml:p>
      <xhtml:p>Log centralization is typically done in HP-UX environments using the standard
        Unix Syslog capability, though HP also supports the more secure and robust
        Systlog-NG as part of the HP Distributed Systems Administration Utilities (DSAU),
        shipped with later updates of HP-UX 11i v2.</xhtml:p>
      <xhtml:p>Because it is often necessary to correlate log information from many different
        systems (particularly after a security incident) experts recommend establishing some
        form of time synchronization among systems and devices connected to the local
        network. The standard Internet protocol for time synchronization is the Network Time
        Protocol (NTP), which is supported by most network-ready devices. More information
        on NTP can be found at <xhtml:a href="http://www.ntp.org/">http://www.ntp.org</xhtml:a>.</xhtml:p>
    </xccdf:description>
    <xccdf:Rule id="capture-messages-sent-to-syslog" role="full" selected="false" weight="1.0">
      <xccdf:title>Capture messages sent to syslog (especially the AUTH facility)</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> By default, AIX systems do not capture logging information sent to
                syslogd. This is unfortunate, since a great deal of important security-related information (successful and failed su
                attempts, failed login attempts, root login attempts, etc.) is sent via the LOG_AUTH channel. If this data is not logged,
                you don't have any way of knowing what is going on.<xhtml:br/><xhtml:br/> The above action causes this information to be captured in the <xhtml:code>/var/adm/authlog</xhtml:code> file,
                which is only readable by the superuser. This file should be reviewed and archived on a regular basis. In addition, messages
                sent to syslog channels other than LOG_AUTH are sent to <xhtml:code>/var/adm/syslog</xhtml:code> (which should also be
                reviewed). Note: Some AIX administrators prefer to log syslog events to <xhtml:code>/var/log</xhtml:code> - if this is your
                preference, change the above script to reflect <xhtml:code>/var/log</xhtml:code> instead of
                <xhtml:code>/var/adm</xhtml:code>. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> printf "### Following lines added by CISecurity \<xhtml:br/> AIX Benchmark Section 5.1\n\<xhtml:br/>
                    auth.info\t\t/var/adm/authlog\n\<xhtml:br/> *.info;auth.none\t\t/var/adm/syslog\n" \<xhtml:br/> &gt;&gt;
                    /etc/syslog.conf<xhtml:br/> touch /var/adm/authlog /var/adm/syslog<xhtml:br/> chown root:system
                    /var/adm/authlog<xhtml:br/> chmod 600 /var/adm/authlog<xhtml:br/> chmod 640 /var/adm/syslog<xhtml:br/> stopsrc -s
                    syslogd<xhtml:br/> startsrc -s syslogd<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^auth\.info[[:space:]]+/var/adm/authlog$' /etc/syslog.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^auth\.info[[:space:]]+/var/adm/authlog$' /etc/syslog.conf&quot;" success="pass">
              <ecl:command>egrep '^auth\.info[[:space:]]+/var/adm/authlog$' /etc/syslog.conf</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/adm/authlog ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/var/adm/authlog ownership and permission">
              <ecl:command>find /var/adm/authlog -follow -prune ! \( -user root -group system -perm u=rw,g=,o= \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^\*\.info;auth.[[:space:]]+/var/adm/syslog$' /etc/syslog.conf&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^\*\.info;auth.[[:space:]]+/var/adm/syslog$' /etc/syslog.conf&quot;" success="pass">
              <ecl:command>egrep '^\*\.info;auth.[[:space:]]+/var/adm/syslog$' /etc/syslog.conf</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/adm/syslog ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/var/adm/syslog ownership and permission">
              <ecl:command>find /var/adm/syslog -follow -prune ! \( -user root -group system -perm u=rw,g=r,o= \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="configure-syslogd-to-send-logs-to-a-remote-loghost" role="full" selected="false" weight="1.0">
      <xccdf:title>Configure syslogd to send logs to a remote loghost</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Remote logging is essential in detecting intrusion and monitoring
                several servers operating in concert. An intruder - once he/she has obtained root - can edit the system logs to remove all
                traces of the attack. If the logs are stored off the machine, those logs can be analyzed for anomalies and used for
                prosecuting the attacker.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> In the script below, replace loghost with the proper name (FQDN, if
                necessary) of your loghost.<xhtml:br/><xhtml:code> printf "### Following lines added by CISecurity \<xhtml:br/> AIX Benchmark Section 5.2\n\<xhtml:br/>
                    auth.info\t\t@loghost<xhtml:br/> *.info;auth.none\t\t@loghost<xhtml:br/> *.emerg\t\t@loghost\n\<xhtml:br/>
                    local7.*\t\t@loghost\n" &gt;&gt; /etc/syslog.conf<xhtml:br/> stopsrc -s syslogd<xhtml:br/> startsrc -s syslogd<xhtml:br/><xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--auth.info\t\t@loghost-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^auth\.info[[:space:]]+@' /etc/syslog.conf&quot;" success="pass">
              <ecl:command>egrep '^auth\.info[[:space:]]+@' /etc/syslog.conf</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--*.info;auth.none\t\t@loghost @loghost-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^\*\.info;auth\.none[[:space:]]+@' /etc/syslog.conf&quot;" success="pass">
              <ecl:command>egrep '^\*\.info;auth\.none[[:space:]]+@' /etc/syslog.conf</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--*.emerg @loghost-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^\*\.emerg[[:space:]]+@' /etc/syslog.conf&quot;" success="pass">
              <ecl:command>egrep '^\*\.emerg[[:space:]]+@' /etc/syslog.conf</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--local7.*\t@loghost-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^local7\.\*[[:space:]]+@' /etc/syslog.conf&quot;" success="pass">
              <ecl:command>egrep '^local7\.\*[[:space:]]+@' /etc/syslog.conf</ecl:command>
              <ecl:line-selection op="pm" value="^.*$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="prevent-syslog-from-accepting-messages-from-the-network" role="full" selected="false" weight="1.0">
      <xccdf:title>Prevent Syslog from accepting messages from the network</xccdf:title>
      <xccdf:description>
        <xhtml:div class="question"> Question: Is this machine a log server, or does it need to receive Syslog messages via the
                    network from other systems? If the answer to this question is no, then perform the action below. </xhtml:div>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> By default the system logging daemon, syslogd, listens for log messages
                from other systems on network port 514/udp. Unfortunately, the protocol used to transfer these messages does not include any
                form of authentication, so a malicious outsider could simply barrage the local system's Syslog port with spurious traffic
                either as a denial-of- service attack on the system, or to fill up the local system's logging file systems so that
                subsequent attacks will not be logged.<xhtml:br/><xhtml:br/> Note that it is considered good practice to set up one or more machines as central "log servers" to aggregate
                log traffic from all machines at a site. However, unless a system is set up to be one of these "log server" systems, it
                should not be listening on 514/udp for incoming log messages.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chssys -s syslogd -a "-r"<xhtml:br/> stopsrc -s syslogd<xhtml:br/> startsrc -s syslogd<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;lssrc -S -s syslogd|egrep '^syslogd:'|egrep -v '^syslogd::-r:'&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;lssrc -S -s syslogd|egrep '^syslogd:'|egrep -v '^syslogd::-r:'&quot;">
            <ecl:command>lssrc -S -s syslogd|egrep '^syslogd:'|egrep -v '^syslogd::-r:'</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="enable-sar-accounting" role="full" selected="false" weight="1.0">
      <xccdf:title>Enable sar accounting</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> System accounting gathers baseline system data (CPU utilization, disk
                I/O, etc.) every few minutes. The data may be accessed with the <xhtml:code>sar</xhtml:code> command, or by reviewing the
                nightly report files named <xhtml:code>/var/adm/sa/sar*</xhtml:code>. Once a normal baseline for the system has been
                established, unauthorized activity (password crackers and other CPU-intensive jobs, and activity outside of normal usage
                hours) may be detected due to departures from the normal system performance curve. Note that this data is only archived for
                one week before being automatically removed by the regular nightly cron job. Administrators may wish to archive the
                    <xhtml:code>/var/adm/sa/</xhtml:code> directory on a regular basis to preserve this data for longer periods.<xhtml:br/><xhtml:br/> Note: The above crontab entries are an example only. You need to adjust the times of the report and the period
                the data is collected. Refer to sar documentation. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> Install the <xhtml:code>bos.acct</xhtml:code> fileset as it is required when
                making use of the <xhtml:code>sar</xhtml:code> utility.<xhtml:br/> Note: The following crontab entries are an example only.
                You need to adjust the times of the report and the period the data is collected. Refer to sar documentation.<xhtml:br/><xhtml:code> lslpp -i bos.acct &gt;/dev/null 2&gt;&amp;1<xhtml:br/> if [ "$?" != 0 ]; then<xhtml:br/> echo
                    "bos.acct not installed, cannot proceed"<xhtml:br/> else<xhtml:br/> su - adm -c "crontab -l &gt;
                    /tmp/crontab.adm"<xhtml:br/> cat &lt;&lt; EOF &gt;&gt; /tmp/crontab.adm<xhtml:br/> 0 8-17 * * 1-5
                    /usr/lib/sa/sa1 1200 3 &amp;<xhtml:br/> 0 * * * 0,6 /usr/lib/sa/sa1 &amp;<xhtml:br/> 0 18-7 * * 1-5
                    /usr/lib/sa/sa1 &amp;<xhtml:br/> 5 18 * * 1-5 /usr/lib/sa/sa2 -s 8:00 -e 18:01 -i 3600 -A &amp;<xhtml:br/>
                    EOF<xhtml:br/> mkdir -p /var/adm/sa<xhtml:br/> chown adm:adm /var/adm/sa<xhtml:br/> chmod 755 /var/adm/sa<xhtml:br/> su
                    - adm -c "crontab /tmp/crontab.adm"<xhtml:br/> fi<xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Package &quot;bos.acct&quot; is installed-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="Package &quot;bos.acct&quot; is installed" success="pass">
            <ecl:command>lslpp -l bos.acct</ecl:command>
            <ecl:line-selection op="pm" value=".*"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="enable-kernel-level-auditing" role="full" selected="false" weight="1.0">
      <xccdf:title>Enable kernel-level auditing</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> For information on auditing, see
                http://www.redbooks.ibm.com/redbooks/pdfs/sg246020.pdf, note chapter 2. Quote from chapter of note:<xhtml:br/><xhtml:br/> An audit is defined as an examination of a group, individual account, or activity. Thus, the auditing subsystem
                provides a means of tracing and recording what is happening on your system.<xhtml:br/><xhtml:br/> By default, auditing is not activated in AIX. When you start the audit subsystem, it gathers information
                depending on your configuration file. It may be unnecessary for you to start auditing if you just let the files sit in your
                busy system. What is important is for you to be able to interpret an auditing record. Depending on your environment, it may
                or may not be necessary for auditing to run every time. It is a decision you have to make.<xhtml:br/><xhtml:br/> We recommended that you explore kernel level auditing before implementing it in your startup scripts. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> To activate auditing:<xhtml:br/><xhtml:code> audit on<xhtml:br/></xhtml:code><xhtml:br/> To start auditing automatically at next boot:<xhtml:br/><xhtml:code> mkitab -i cron "audit:2:once:/usr/sbin/audit start 2&gt;&amp;1 &gt; /dev/console"<xhtml:br/>
                    telinit q<xhtml:br/> echo "audit shutdown" &gt;&gt; /usr/sbin/shutdown<xhtml:br/><xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Package &quot;bos.acct&quot; is installed-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="Package &quot;bos.acct&quot; is installed" success="pass">
            <ecl:command>lslpp -l bos.acct</ecl:command>
            <ecl:line-selection op="pm" value=".*"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="confirm-permissions-on-system-log-files" role="full" selected="false" weight="1.0">
      <xccdf:title>Confirm Permissions On System Log Files </xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> It is critical to protect system log files from being modified by
                unauthorized individuals. Also, certain logs contain sensitive data that should only be available to the system administrator.<xhtml:br/><xhtml:br/> If you should add any of the services that affect the above logs, please revisit this section to ensure the logs
                have the correct/secure permissions.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> for FILE in \<xhtml:br/> /smit.log \<xhtml:br/> /var/adm/cron/log \<xhtml:br/> /var/tmp/dpid2.log \<xhtml:br/>
                    /var/tmp/hostmibd.log \<xhtml:br/> /var/tmp/snmpd.log \<xhtml:br/> /var/adm/ras/*<xhtml:br/>
                    /var/ct/RMstart.log<xhtml:br/> do<xhtml:br/> if [ -f $FILE ]; then<xhtml:br/> echo "Fixing log file permissions on
                    $FILE"<xhtml:br/> chmod o-rw $FILE<xhtml:br/> fi<xhtml:br/> done<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Package &quot;bos.acct&quot; is installed-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="Package &quot;bos.acct&quot; is installed" success="pass">
            <ecl:command>lslpp -l bos.acct</ecl:command>
            <ecl:line-selection op="pm" value=".*"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="file-directory-permissions-access">
    <xccdf:title>File/Directory Permissions/Access</xccdf:title>
    <xccdf:description>This group has recommendations on file permissions.</xccdf:description>
    <xccdf:Rule id="verify-passwd-and-group-file-permissions" role="full" selected="false" weight="1.0">
      <xccdf:title>Verify passwd and group file permissions</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> These are the proper owners and access permissions for these files.
                <xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chown -R root:security /etc/passwd /etc/group /etc/security<xhtml:br/> chown -R root:audit
                    /etc/security/audit<xhtml:br/> chmod 644 /etc/passwd /etc/group<xhtml:br/> chmod 750 /etc/security<xhtml:br/> chmod -R
                    go-w,o-r /etc/security<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/passwd ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/passwd ownership and permission">
              <ecl:command>find /etc/passwd -follow -prune ! \( -user root -group security -perm u=rw,g=r,o=r \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/group ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/group ownership and permission">
              <ecl:command>find /etc/group -follow -prune ! \( -user root -group security -perm u=rwx,g=rw,o= \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--chown -R root:audit /etc/security/audit-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;find /etc/security/audit ! \( -user root -group audit \) -ls&quot;">
              <ecl:command>find /etc/security/audit ! \( -user root -group audit \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod -R go-w,o-r /etc/security-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;find /etc/security ! \( -perm +g=w,o=rw \) -ls&quot;">
              <ecl:command>find /etc/security ! \( -perm +g=w,o=rw \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="world-writable-directories-should-have-their-sticky-bit-set" role="full" selected="false" weight="1.0">
      <xccdf:title>World-writable directories should have their sticky bit set</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> When the so-called "sticky bit" is set on a directory, then only the
                owner of a file may remove that file from the directory (as opposed to the usual behavior where anybody with write access to
                that directory may remove the file). Setting the sticky bit prevents users from overwriting each other's files, whether
                accidentally or maliciously, and is generally appropriate for most world-writable directories. However, consult appropriate
                vendor documentation before blindly applying the sticky bit to any world writable directories found in order to avoid
                breaking any application dependencies on a given directory.<xhtml:br/><xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> The automated tool supplied with this benchmark will flag world-writable
                directories that do not have the sticky bit set.<xhtml:br/><xhtml:br/> Administrators who wish to obtain a list of these directories may execute the following commands:<xhtml:br/><xhtml:code> for part in `mount | grep dev | awk '{print $2}' | \<xhtml:br/> grep -Ev 'cdrom|nfs'`; do<xhtml:br/> echo
                    "Searching $part"<xhtml:br/> find $part -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print<xhtml:br/> done<xhtml:br/><xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--World-Writable Directories Should Have Their Sticky Bit Set-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;for part in `mount | grep dev | awk '{print $2}' | grep -Ev 'cdrom|nfs'`; do find $part -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -ls; done&quot;">
            <ecl:command>for part in `mount | grep dev | awk '{print $2}' | grep -Ev 'cdrom|nfs'`; do find $part -xdev -type d
                            \( -perm -0002 -a ! -perm -1000 \) -ls; done</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="find-unauthorized-world-writable-files" role="full" selected="false" weight="1.0">
      <xccdf:title>Find unauthorized world-writable files</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Data in world-writable files can be modified and compromised by any user
                on the system. World-writable files may also indicate an incorrectly written script or program that could potentially be the
                cause of a larger compromise to the system's integrity. Generally removing write access for the "other" category
                    (<xhtml:code>chmod o-w &lt;filename&gt;</xhtml:code>) is advisable, but always consult relevant vendor
                documentation in order to avoid breaking any application dependencies on a given file. <xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> The automated testing tool supplied with this benchmark will flag unexpected
                world-writable files on the system.<xhtml:br/><xhtml:br/> Administrators who wish to obtain a list of the world-writable files currently installed on the system may run
                the following commands: <xhtml:br/><xhtml:code> for part in `mount | grep dev | awk '{print $2}' | \<xhtml:br/> egrep -v 'cdrom|nfs'`; do<xhtml:br/> echo
                    "Searching $part"<xhtml:br/> find $part -xdev -type f \<xhtml:br/> \( -perm -0002 -a ! -perm -1000 \) -print<xhtml:br/>
                    done<xhtml:br/></xhtml:code><xhtml:br/> There should be no entries returned. <xhtml:br/></xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Unauthorized World-Writable Files-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;for part in `mount | grep dev | awk '{print $2}' | grep -Ev 'cdrom|nfs'`; do find $part -xdev -type f \( -perm -0002 -a ! -perm -1000 \) -ls; done&quot;">
            <ecl:command>for part in `mount | grep dev | awk '{print $2}' | grep -Ev 'cdrom|nfs'`; do find $part -xdev -type f
                            \( -perm -0002 -a ! -perm -1000 \) -ls; done</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="find-unauthorized-suid-sgid-system-executables" role="full" selected="false" weight="1.0">
      <xccdf:title>Find unauthorized SUID/SGID system executables</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The administrator should take care to ensure that no rogue set-UID
                programs have been introduced into the system. In addition, if possible, the administrator should attempt a Set-UID audit
                and reduction.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> The automated testing tool supplied with this benchmark will flag unexpected
                set-UID and set-GID applications on the system.<xhtml:br/><xhtml:br/> Administrators who wish to obtain a list of the set-UID and set-GID programs currently installed on the system
                may run the following commands:<xhtml:br/><xhtml:code> for part in `mount | grep dev | awk '{print $2}' | \<xhtml:br/> egrep -v 'cdrom|nfs'`; do<xhtml:br/> echo
                    "Searching $part"<xhtml:br/> find $part \( -perm -04000 -o -perm -02000 \) \<xhtml:br/> -type f -xdev -ls<xhtml:br/>
                    done<xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Unauthorized SUID/SGID System Executables-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;for part in `mount | grep dev | awk '{print $2}' | grep -Ev 'cdrom|nfs'`; do find $part \( -perm -04000 -a ! -perm -02000 \) -xdev -type f -ls; done&quot;">
            <ecl:command>for part in `mount | grep dev | awk '{print $2}' | grep -Ev 'cdrom|nfs'`; do find $part \( -perm -04000
                            -a ! -perm -02000 \) -xdev -type f -ls; done</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="find-unowned-files-and-directories" role="full" selected="false" weight="1.0">
      <xccdf:title>Find "unowned" files and directories</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Sometimes when administrators delete users from the password file they
                neglect to remove all files owned by those users from the system. A new user who is assigned the deleted user's user ID or
                group ID may then end up "owning" these files, and thus have more access on the system than was intended. It is a good idea
                to locate files that are owned by users or groups not listed in the system configuration files, and make sure to reset the
                ownership of these files to some active user on the system as appropriate. <xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> The automated testing tool supplied with this benchmark will flag files and
                directories where the user or group owner of the file is not listed in the <xhtml:code>/etc/passwd</xhtml:code> or
                    <xhtml:code>/etc/group</xhtml:code> files.<xhtml:br/><xhtml:br/> Administrators who wish to locate these files on their system may run the following command:<xhtml:br/><xhtml:code> find / \( -nouser -o -nogroup \) -ls </xhtml:code></xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Unowned Files-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;find / \( -nouser -o -nogroup \) -ls&quot;">
            <ecl:command>find / \( -nouser -o -nogroup \) -ls</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="system-access-authentication-and-authorization">
    <xccdf:title>System access, authentication, and authorization </xccdf:title>
    <xccdf:description>This group specifies recommendations for system access, authentication and authorization.</xccdf:description>
    <xccdf:Rule id="remove-etc-hosts-equiv" role="full" selected="false" weight="1.0">
      <xccdf:title>Remove /etc/hosts.equiv</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The <xhtml:code>/etc/hosts.equiv</xhtml:code> file provides total trust
                in any machines listed. If a machine listed is compromised, the attacker can immediately get full access to your machine.
                    <xhtml:code>/etc/hosts.equiv</xhtml:code> sets up global trust relationships for all accounts on the system, which work
                in an analogous fashion to .rhosts files in user home directories. See the discussion of <xhtml:code>.rhosts</xhtml:code>
                files in the items below. <xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> [ -f /etc/hosts.equiv ] &amp;&amp; rm -f /etc/hosts.equiv </xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--Remove /etc/hosts.equiv-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="/etc/hosts.equiv does not exist" success="pass">
            <ecl:command>find /etc/hosts.equiv -follow -prune -ls 2&gt;/dev/null</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="create-etc-ftpusers" role="full" selected="false" weight="1.0">
      <xccdf:title>Create /etc/ftpusers</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code>/etc/ftpusers</xhtml:code> contains a list of users who are not allowed to access the system via FTP. Consider
                also adding the names of other privileged or shared accounts which may exist on your system such as user oracle and the
                account under which your Web server process runs.<xhtml:br/><xhtml:br/> Generally, only normal users should ever access the system via FTP - there should be no reason for "system" type
                accounts to transfer information via this mechanism. If a system userid is allowed to FTP files into the system, that userid
                can be used to upload malicious software and store it with the system userid's permissions (which are probably higher than a
                normal user's). Certainly, the root account should never be allowed to transfer files directly via FTP. (Of course, there is
                probably no reason for FTP to be enabled at all - this is mostly "defense in depth" in case FTP accidentally becomes
                re-enabled, or if it's required for some function that is unable to use SSH instead).<xhtml:br/><xhtml:br/> The above script places all users those user id is less than 200 in the <xhtml:code>/etc/ftpusers</xhtml:code>
                file, which blocks all system account from being used for FTP. <xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> lsuser -c ALL | grep -v ^#name | cut -f1 -d: | while read NAME; do<xhtml:br/> if [ `lsuser -f $NAME | grep id |
                    cut -f2 -d=` -lt 200 ]; then<xhtml:br/> echo "Adding $NAME to /etc/ftpusers"<xhtml:br/> echo $NAME &gt;&gt;
                    /etc/ftpusers.new<xhtml:br/> fi <xhtml:br/> done <xhtml:br/> sort -u /etc/ftpusers.new &gt; /etc/ftpusers<xhtml:br/>
                    rm /etc/ftpusers.new<xhtml:br/> chown root:system /etc/ftpusers<xhtml:br/> chmod 600 /etc/ftpusers<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--/etc/ftpusers ownership and permission-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="/etc/ftpusers ownership and permission">
            <ecl:command>find /etc/ftpusers -follow -prune ! \( -user root -group system -perm u=r,g=,o= \) -ls</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="disable-xdmcp-port" role="full" selected="false" weight="1.0">
      <xccdf:title>Disable XDMCP port</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The standard GUI login provided on most Unix systems can act as a remote
                login server to other devices (including X terminals and other workstations). Setting
                <xhtml:code>Dtlogin.requestPort</xhtml:code> to zero in the <xhtml:code>Xconfig</xhtml:code> file prevents the login GUI
                from ever hearing requests for remote login services. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> if [ ! -f /etc/dt/config/Xconfig ]; then<xhtml:br/> mkdir -p /etc/dt/config<xhtml:br/> cp
                    /usr/dt/config/Xconfig /etc/dt/config<xhtml:br/> fi<xhtml:br/> cd /etc/dt/config<xhtml:br/> awk '/Dtlogin.requestPort:/
                    \<xhtml:br/> { print "Dtlogin.requestPort: 0"; next } \<xhtml:br/> { print }' Xconfig &gt; Xconfig.new<xhtml:br/> mv
                    Xconfig.new Xconfig<xhtml:br/> chown root:bin Xconfig<xhtml:br/> chmod 444 Xconfig<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <!--/etc/dt/config/Xconfig-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/dt/config/Xconfig text content-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/dt/config/Xconfig text content">
              <ecl:path>/etc/dt/config/Xconfig</ecl:path>
              <ecl:line-selection op="pm" value="^[^#].*Dtlogin.requestPort:\s+0"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/dt/config/Xconfig ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/dt/config/Xconfig ownership and permission">
              <ecl:command>find /etc/dt/config/Xconfig -follow -prune ! \( -user root -group bin -perm u=r,g=r,o=r \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="prevent-x-server-from-listening-on-port-6000-tcp" role="full" selected="false" weight="1.0">
      <xccdf:title>Prevent X Server from listening on port 6000/tcp</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> X servers listen on port <xhtml:code>6000/tcp</xhtml:code> for messages
                from remote clients running on other systems. However, X Windows uses a relatively insecure authentication protocol - an
                attacker who is able to gain unauthorized access to the local X server can easily compromise the system. Invoking the
                    <xhtml:code>"-nolisten tcp"</xhtml:code> option causes the X server not to listen on port
                <xhtml:code>6000/tcp</xhtml:code> by default.<xhtml:br/><xhtml:br/> This does prevent authorized remote X clients from displaying windows on the local system as well. However, the
                forwarding of X events via SSH will still happen normally. This is the preferred and more secure method transmitting results
                from remote X clients in any event. <xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> if [ -f /etc/dt/config/Xservers ]; then<xhtml:br/> file=/etc/dt/config/Xservers<xhtml:br/> else<xhtml:br/>
                    file=/usr/dt/config/Xservers<xhtml:br/> fi<xhtml:br/> awk '/Xsun/ &amp;&amp; !/^#/ &amp;&amp;
                    !/-nolisten tcp/ \<xhtml:br/> { print $0 " -nolisten tcp"; next }; \<xhtml:br/> { print }' $file &gt;
                    $file.new<xhtml:br/> mkdir -p /etc/dt/config<xhtml:br/> mv $file.new /etc/dt/config/Xservers<xhtml:br/> chown root:bin
                    /etc/dt/config/Xservers<xhtml:br/> chmod 444 /etc/dt/config/Xservers<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <!--/etc/dt/config/Xservers-->
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/dt/config/Xservers text content-->
          <xccdf:check-content>
            <ecl:file-content check="all" comment="/etc/dt/config/Xservers text content">
              <ecl:path>/etc/dt/config/Xservers</ecl:path>
              <ecl:line-selection op="pm" value="(^#.*$)|(^\s*$)|(^.*Xsun -nolisten tcp.*$)"/>
            </ecl:file-content>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/dt/config/Xservers ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/etc/dt/config/Xservers ownership and permission">
              <ecl:command>find /etc/dt/config/Xservers -follow -prune ! \( -user root -group bin -perm u=r,g=r,o=r \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="set-default-locking-screensaver-timeout" role="full" selected="false" weight="1.0">
      <xccdf:title>Set default locking screensaver timeout</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The default timeout is 30 minutes of keyboard/mouse inactivity before a
                password protected screen saver is invoked by the CDE session manager. The above action reduces this default timeout value
                to 10 minutes, although this setting can still be overridden by individual users in their own environment.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> for file in /usr/dt/config/*/sys.resources; do<xhtml:br/> dir=`dirname $file | sed -e s/usr/etc/`<xhtml:br/>
                    mkdir -p $dir<xhtml:br/> echo 'dtsession*saverTimeout: 10' &gt;&gt; $dir/sys.resources<xhtml:br/> echo
                    'dtsession*lockTimeout: 10' &gt;&gt; $dir/sys.resources<xhtml:br/> done<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--dtsession*saverTimeout: 10-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;ls /etc/dt/config/*/sys.resources|while read $f; do egrep '^[^#!]dtsession\*saverTimeout:[[:space:]]+10[[:space:]]*' $f || echo $f lacks timeout; done&quot;">
              <ecl:command>ls /etc/dt/config/*/sys.resources|while read $f; do egrep
                                '^[^#!]dtsession\*saverTimeout:[[:space:]]+10[[:space:]]*' $f || echo $f lacks timeout; done</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--dtsession*lockTimeout: 10-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;ls /etc/dt/config/*/sys.resources|while read $f; do egrep '^[^#!]dtsession\*lockTimeout:[[:space:]]+10[[:space:]]*' $f || echo $f lacks timeout; done&quot;">
              <ecl:command>ls /etc/dt/config/*/sys.resources|while read $f; do egrep
                                '^[^#!]dtsession\*lockTimeout:[[:space:]]+10[[:space:]]*' $f || echo $f lacks timeout; done</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="remove-empty-crontab-files-and-restrict-file-permissions" role="full" selected="false" weight="1.0">
      <xccdf:title>Remove empty crontab files and restrict file permissions</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The system <xhtml:code>crontab</xhtml:code> files are accessed only by
                the cron daemon (which runs with superuser privileges) and the <xhtml:code>crontab</xhtml:code> command (which is set-UID to
                root). Allowing unprivileged users to read or (even worse) modify system <xhtml:code>crontab</xhtml:code> files can create
                the potential for a local user on the system to gain elevated privileges. <xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> cd /var/spool/cron/crontabs<xhtml:br/> for file in *; do<xhtml:br/> lines=`grep -Ev '^[ \t]*#' $file | wc -l |
                    sed 's/ //g'`<xhtml:br/> if [ $lines -eq 0 ]; then<xhtml:br/> echo "Removing $file"<xhtml:br/> rm $file<xhtml:br/>
                    fi<xhtml:br/> done<xhtml:br/> chgrp -R cron /var/spool/cron/crontabs<xhtml:br/> chmod -R o=
                    /var/spool/cron/crontabs<xhtml:br/> chmod 770 /var/spool/cron/crontabs<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--Remove empty crontab files-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;find /var/spool/cron/crontabs -type f -size 0&quot;">
              <ecl:command>find /var/spool/cron/crontabs -type f -size 0</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--chgrp -R cron /var/spool/cron/crontabs-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;find /var/spool/cron/crontabs ! \( -user cron \) -ls&quot;">
              <ecl:command>find /var/spool/cron/crontabs ! \( -user cron \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod -R o= /var/spool/cron/crontabs-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;find /var/spool/cron/crontabs ! \( -perm +o=rwx \) -ls&quot;">
              <ecl:command>find /var/spool/cron/crontabs ! \( -perm +o=rwx \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--chmod 770 /var/spool/cron/crontabs-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;find /var/spool/cron/crontabs -maxdepth 0 ! \( -perm u=rwx,g=,o= \) -ls&quot;">
              <ecl:command>find /var/spool/cron/crontabs -maxdepth 0 ! \( -perm u=rwx,g=,o= \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="restrict-at-and-cron-to-authorized-users" role="full" selected="false" weight="1.0">
      <xccdf:title>Restrict at and cron to authorized users</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The <xhtml:code>cron.allow</xhtml:code> and
                <xhtml:code>at.allow</xhtml:code> files are a list of users who are allowed to run the <xhtml:code>crontab</xhtml:code> and
                    <xhtml:code>at</xhtml:code> commands to submit jobs to be run at scheduled intervals. On many systems, only the system
                administrator needs the ability to schedule jobs.<xhtml:br/><xhtml:br/> Note that with <xhtml:code>cron.deny</xhtml:code> or <xhtml:code>at.deny</xhtml:code> removed, if a given user
                is not listed in <xhtml:code>cron.allow</xhtml:code> or <xhtml:code>at.allow</xhtml:code>, their cron jobs will not be
                executed. This includes administrative accounts - all users will be denied until explicitly defined in
                    <xhtml:code>cron.allow</xhtml:code> or <xhtml:code>at.allow</xhtml:code>.<xhtml:br/><xhtml:br/> To prevent an unintentional impact to the existing system, the above script adds the currently existing users to
                    <xhtml:code>cron.allow</xhtml:code> and <xhtml:code>at.allow</xhtml:code>. These users and their jobs are found in
                    <xhtml:code>/var/spool/cron/atjobs</xhtml:code> and <xhtml:code>/var/spool/cron/cronjobs</xhtml:code>. You should review
                these users and jobs before adding them to your <xhtml:code>at.allow</xhtml:code> and <xhtml:code>cron.allow</xhtml:code>
                files.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> cd /var/adm/cron<xhtml:br/> rm -f cron.deny at.deny<xhtml:br/> echo root &gt; cron.allow<xhtml:br/> echo
                    root &gt; at.allow<xhtml:br/> ls /var/spool/cron/crontabs | grep -v root &gt;&gt; cron.allow<xhtml:br/> ls
                    /var/spool/cron/atjobs | grep -v root &gt;&gt; at.allow <xhtml:br/> chown root:sys cron.allow
                    at.allow<xhtml:br/> chmod 400 cron.allow at.allow<xhtml:br/> cat at.allow<xhtml:br/> cat cron.allow<xhtml:br/> cat
                    at.deny cron.deny # this should fail<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/adm/cron/cron.deny does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/var/adm/cron/cron.deny does not exist" success="pass">
              <ecl:command>find /var/adm/cron/cron.deny -follow -prune -ls 2&gt;/dev/null</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/adm/cron/at.deny does not exist-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/var/adm/cron/at.deny does not exist" success="pass">
              <ecl:command>find /var/adm/cron/at.deny -follow -prune -ls 2&gt;/dev/null</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep -v root /var/adm/cron/cron.allow&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep -v root /var/adm/cron/cron.allow&quot;" success="pass">
              <ecl:command>egrep -v root /var/adm/cron/cron.allow</ecl:command>
              <ecl:line-selection op="pm" value="^.+$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep -v root /var/adm/cron/at.allow&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;egrep -v root /var/adm/cron/at.allow&quot;" success="pass">
              <ecl:command>egrep -v root /var/adm/cron/at.allow</ecl:command>
              <ecl:line-selection op="pm" value="^.+$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/adm/cron/cron.allow ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/var/adm/cron/cron.allow ownership and permission">
              <ecl:command>find /var/adm/cron/cron.allow -follow -prune ! \( -user root -group sys -perm u=r,g=,o= \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/var/adm/cron/at.allow ownership and permission-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="/var/adm/cron/at.allow ownership and permission">
              <ecl:command>find /var/adm/cron/at.allow -follow -prune ! \( -user root -group sys -perm u=r,g=,o= \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="restrict-root-logins-to-system-console" role="full" selected="false" weight="1.0">
      <xccdf:title>Restrict root logins to system console</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Anonymous root logins should never be allowed, except on the system
                console in emergency situations. At all other times, the administrator should access the system via an unprivileged account
                and use some authorized mechanism (such as the su command, or the freely-available sudo package) to gain additional
                privilege. These mechanisms provide at least some limited audit trail in the event of problems. The command above
                additionally restricts 'su' to root to members of the 'system' group, making it harder for an attacker to use a stolen root
                password (as they will first have to get access to a 'system' userid).<xhtml:br/><xhtml:br/> Note: Ensure you have at least one user account in the system group that can log in remotely. Failure to do so
                will prevent any remote user from becoming root. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chuser rlogin=false login=true su=true sugroups=system root </xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lsuser -a rlogin root|egrep -v 'false$'&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lsuser -a rlogin root|egrep -v 'false$'&quot;">
              <ecl:command>lsuser -a rlogin root|egrep -v 'false$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lsuser -a login root|egrep -v 'true$'&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lsuser -a login root|egrep -v 'true$'&quot;">
              <ecl:command>lsuser -a login root|egrep -v 'true$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lsuser -a su root|egrep -v 'true$'&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lsuser -a su root|egrep -v 'true$'&quot;">
              <ecl:command>lsuser -a su root|egrep -v 'true$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;lsuser -a sugroups root|egrep -v 'system$'&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lsuser -a sugroups root|egrep -v 'system$'&quot;">
              <ecl:command>lsuser -a sugroups root|egrep -v 'system$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="user-accounts-and-environment">
    <xccdf:title>User Accounts and environment</xccdf:title>
    <xccdf:description>
      <xhtml:p>Note that the items in this section are tasks that the local administrator
        should undertake on a regular, ongoing basis. The administrator can automate the
        auditing these items by running the host-based scanning tools provided from the
        Center for Internet Security on a regular basis—perhaps in an automated fashion via
        cron. These scanning tools are available for free download from <xhtml:a href="http://www.cisecurity.org/">http://www.CISecurity.org/</xhtml:a>.</xhtml:p>
    </xccdf:description>
    <xccdf:Rule id="block-system-accounts" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Block system accounts</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> These accounts are non-human system accounts that should be made less
                useful to an attacker by locking them. They can even be deleted if the machines does not use the daemon/service that each is
                responsible for, though it is safest to simply deactivate them as is done here. To deactivate them, use chuser to disable
                remote and local logins.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> for user in daemon bin sys adm uucp nuucp printq guest nobody lpd sshd; do<xhtml:br/> chuser rlogin=false
                    login=false "$user"<xhtml:br/> done<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
    </xccdf:Rule>
    <xccdf:Rule id="set-password-and-account-expiration-on-active-accounts" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Set password and account expiration on active accounts</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The above command adds a number of restrictions to enforce password
                changing and the use of more complicated passwords.<xhtml:br/><xhtml:br/> It is a good idea to force users to change passwords on a regular basis. The commands above will set all active
                accounts (except the root account) to force password changes every 91 days (13 weeks), and then prevent password changes for
                seven days (one week) thereafter. Users will begin receiving warnings 28 days (4 weeks) before their password expires. Sites
                also have the option of expiring idle accounts after a certain number of days (see the on-line manual page for the usermod
                command, particularly the f option).<xhtml:br/><xhtml:br/> These are recommended starting values, but sites may choose to make them more restrictive depending on local
                policies. A complete list of the options can be found in <xhtml:code>/etc/security/passwd</xhtml:code> file. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action (AIX 4.3.3)</xhtml:strong>:<xhtml:br/><xhtml:code> chsec -f /etc/security/user -s default -a maxage=13<xhtml:br/> chsec -f /etc/security/user -s default -a
                    minlen=6<xhtml:br/> chsec -f /etc/security/user -s default -a minage=1<xhtml:br/> chsec -f /etc/security/user -s default
                    -a pwdwarntime=28<xhtml:br/><xhtml:br/></xhtml:code></xccdf:fixtext>
    </xccdf:Rule>
    <xccdf:Rule id="verify-there-are-no-accounts-with-empty-password-fields" role="full" selected="false" weight="1.0">
      <xccdf:title>Verify there are no accounts with empty password fields</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> An account with an empty password field means that anybody may log in as
                that user without providing a password at all. All accounts should have strong passwords or should be locked by using a
                password string like "*".<xhtml:br/><xhtml:br/> The <xhtml:code>pwdck</xhtml:code> command will verify a number of other items for correctness. The '-n' flag
                will tell it to report errors but not change anything (running with '-t' instead will prompt you for each proposed fix - the
                '-y' and '-p' flags are dangerous). Note that <xhtml:code>pwdck</xhtml:code> won't flag null passwords unless the minlen
                attribute is set to a non-zero value. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> pwdck -n ALL </xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;pwdck -n ALL&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;pwdck -n ALL&quot;">
            <ecl:command>pwdck -n ALL</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="verify-no-legacy-entries-exist-in-passwd-and-group-files" role="full" selected="false" weight="1.0">
      <xccdf:title>Verify no legacy '+' entries exist in passwd, and group files</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> '+' entries in various files used to be markers for systems to insert
                data from NIS maps at a certain point in a system configuration file. These entries may provide an avenue for attackers to
                gain privileged access on the system, and should be deleted if they exist. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> The command:<xhtml:br/><xhtml:br/><xhtml:code> grep ^+: /etc/passwd /etc/group<xhtml:br/><xhtml:br/></xhtml:code> should return no lines of output. </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--/etc/^(passwd|group)$ text content-->
        <xccdf:check-content>
          <ecl:file-content check="none exist" comment="/etc/^(passwd|group)$ text content">
            <ecl:path>/etc/^(passwd|group)$</ecl:path>
            <ecl:line-selection op="pm" value="^+:.*$"/>
          </ecl:file-content>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="verify-no-uid-0-accounts-exist-other-than-root" role="full" selected="false" weight="1.0">
      <xccdf:title>Verify no UID 0 accounts exist other than root</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Any account with UID 0 has superuser privileges on the system. The only
                superuser account on the machine should be the root account, and it should be accessed by logging in as an unprivileged user
                and using the <xhtml:code>su</xhtml:code> command (or equivalent) to gain additional privilege. <xhtml:br/><xhtml:br/> Finer granularity access control for administrative access can be obtained by using the freely-available
                    <xhtml:code>sudo</xhtml:code> program (http://www.courtesan.com/sudo/). </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> The command:<xhtml:br/><xhtml:code> lsuser -a id ALL | grep "id=0" | awk '{print $1}'<xhtml:br/></xhtml:code><xhtml:br/> should return only the word "root". </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;lsuser -a id ALL | grep "id=0" | egrep -v '^root[[:space:]]+'&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;lsuser -a id ALL | grep &quot;id=0&quot; | egrep -v '^root[[:space:]]+'&quot;">
            <ecl:command>lsuser -a id ALL | grep "id=0" | egrep -v '^root[[:space:]]+'</ecl:command>
            <ecl:line-selection op="pm" value="^.+$"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="no-dot-or-group-world-writable-directory-in-roots-path" role="full" selected="false" weight="1.0">
      <xccdf:title>No '.' or group/world-writable directory in root's $PATH</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Including the current working directory ('.') or other writable
                directory in root's executable path makes it likely that an attacker can gain superuser access by forcing an administrator
                operating as root to execute a Trojan horse program.<xhtml:br/></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> The automated testing tool supplied with this benchmark will alert the
                administrator if action is required. <xhtml:br/><xhtml:br/> To find '.' in $PATH:<xhtml:br/><xhtml:br/><xhtml:code> echo $PATH | grep -E '(^|:)(\.|:|$)'<xhtml:br/></xhtml:code><xhtml:br/> To find group- or world-writable directories in $PATH:<xhtml:br/><xhtml:br/><xhtml:code> find `echo $PATH | tr ':' ' '` -type d \<xhtml:br/> \( -perm -002 -o -perm -020 \) -ls<xhtml:br/><xhtml:br/></xhtml:code> These commands should produce no output. </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;echo $PATH&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;echo $PATH&quot;">
              <ecl:command>echo $PATH</ecl:command>
              <ecl:line-selection op="pm" value="^\.:|:\.:|:\.$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;find `echo $PATH|sed "s/:/ /g"` -prune -type d \( -perm -g+w -o -perm -o+w \) 2>/dev/null&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;find `echo $PATH|sed &quot;s/:/ /g&quot;` -prune -type d \( -perm -g+w -o -perm -o+w \) 2&gt;/dev/null&quot;">
              <ecl:command>find `echo $PATH|sed "s/:/ /g"` -prune -type d \( -perm -g+w -o -perm -o+w \) 2&gt;/dev/null</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="user-home-directories-should-be-mode-750-or-more-restrictive" role="full" selected="false" weight="1.0">
      <xccdf:title>User home directories should be mode 750 or more restrictive</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Group or world-writable user home directories may enable malicious users
                to steal or modify other users' data or to gain another user's system privileges. Disabling "read" and "execute" access for
                users who are not members of the same group (the "other" access category) allows for appropriate use of discretionary access
                control by each user. <xhtml:br/><xhtml:br/> If you need more restrictive permissions on the home directories, set the appropriate permissions in the
                variable NEW_PERMS.<xhtml:br/><xhtml:br/> While the above modifications are relatively benign, making global modifications to user home directories
                without alerting the user community can result in unexpected outages and unhappy users. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> NEW_PERMS=750<xhtml:br/> lsuser -c ALL | grep -v ^#name | cut -f1 -d: | while read NAME; do<xhtml:br/> if [
                    `lsuser -f $NAME | grep id | cut -f2 -d=` -ge 200 ]; then<xhtml:br/> HOME=`lsuser -a home $NAME | cut -f 2 -d
                    =`<xhtml:br/> echo "Changing $NAME homedir $HOME"<xhtml:br/> chmod $NEW_PERMS $HOME<xhtml:br/> fi <xhtml:br/> done
                    <xhtml:br/> if [ `grep -c "chmod $NEW_PERMS $1" \<xhtml:br/> /usr/lib/security/mkuser.sys` -eq 0 ]; then<xhtml:br/> sed
                    -e "s/mkdir \$1/mkdir \$1 \&amp;\&amp; chmod $NEW_PERMS \$1/g" \<xhtml:br/> /usr/lib/security/mkuser.sys
                    &gt; /tmp/mkuser.tmp<xhtml:br/> mv /tmp/mkuser.tmp /usr/lib/security/mkuser.sys<xhtml:br/> chmod 750
                    /usr/lib/security/mkuser.sys<xhtml:br/> fi<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type d -prune \( -perm -g+w -o -perm -o+r -o -perm -o+w -o -perm -o+x \) -ls&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type d -prune \( -perm -g+w -o -perm -o+r -o -perm -o+w -o -perm -o+x \) -ls&quot;">
            <ecl:command>find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type d -prune \( -perm -g+w -o -perm -o+r -o -perm
                            -o+w -o -perm -o+x \) -ls</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="no-user-dot-files-should-be-world-writable" role="full" selected="false" weight="1.0">
      <xccdf:title>No user dot-files should be world-writable</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Group or world-writable user configuration files may enable malicious
                users to steal or modify other users' data or to gain another user's system privileges. While the above modifications are
                relatively benign, making global modifications to user home directories without alerting the user community can result in
                unexpected outages and unhappy users. <xhtml:br/><xhtml:br/> Note: <xhtml:code>/usr/lib/security/mkuser.sys</xhtml:code> issues a <xhtml:code>chmod go-w
                $1/.login</xhtml:code> upon creation of accounts with <xhtml:code>csh</xhtml:code> as default shell, so no additional work
                is needed after a new account is created. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> lsuser -a home ALL |cut -f2 -d= | while read HOMEDIR; do<xhtml:br/> echo "Examining $HOMEDIR"<xhtml:br/> if [
                    -d $HOMEDIR ]; then<xhtml:br/> ls -a $HOMEDIR | grep -Ev "^.$|^..$" | \<xhtml:br/> while read FILE; do<xhtml:br/> if [
                    -f $FILE ]; then<xhtml:br/> echo "Adjusting $FILE"<xhtml:br/> chmod go-w $FILE<xhtml:br/> fi<xhtml:br/> done<xhtml:br/>
                    else<xhtml:br/> echo "No home dir for $HOMEDIR"<xhtml:br/> fi<xhtml:br/> done<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type f -name '\.*' -prune \( -perm -g+w -o -perm -o+w \) 2>/dev/null&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type f -name '\.*' -prune \( -perm -g+w -o -perm -o+w \) 2&gt;/dev/null&quot;">
            <ecl:command>find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type f -name '\.*' -prune \( -perm -g+w -o -perm
                            -o+w \) 2&gt;/dev/null</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="remove-user-netrc-and-rhosts-files" role="full" selected="false" weight="1.0">
      <xccdf:title>Remove user .netrc and .rhosts files</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code>.netrc</xhtml:code> files may contain unencrypted passwords that may be used to attack other systems, while
                    <xhtml:code>.rhosts</xhtml:code> files used in conjunction with the BSD-style "r-commands" (rlogin, remsh, rcp)
                implement a weak form of authentication based on the network address or host name of the remote computer (which can be
                spoofed by a potential attacker to exploit the local system). While the above modifications are relatively benign, making
                global modifications to user home directories without alerting your user community can result in unexpected outages and
                unhappy users. If the first command returns any results, carefully evaluate the ramifications of removing those files before
                executing the remaining commands as you may end up impacting an application that has not had time to revise its architecture
                to a more secure design. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> find / -name .netrc<xhtml:br/> find / -name .rhosts<xhtml:br/><xhtml:br/></xhtml:code> Stop!!! Read the discussion before proceeding.<xhtml:br/><xhtml:br/><xhtml:code> lsuser -a home ALL |cut -f2 -d= | while read HOME; do<xhtml:br/> if [ -e "$HOME/.netrc" ]; then<xhtml:br/> echo
                    "Removing $HOME/.netrc"<xhtml:br/> rm -f "$HOME/.netrc"<xhtml:br/> fi<xhtml:br/> if [ -e "$HOME/.rhosts" ];
                    then<xhtml:br/> echo "Removing $HOME/.rhosts"<xhtml:br/> rm -f "$HOME/.rhosts"<xhtml:br/> fi<xhtml:br/> done<xhtml:br/><xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type f -name '.netrc' 2>/dev/null&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type f -name '.netrc' 2&gt;/dev/null&quot;">
              <ecl:command>find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type f -name '.netrc' 2&gt;/dev/null</ecl:command>
              <ecl:line-selection op="pm" value="^.+$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type f -name '.rhosts' 2>/dev/null&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type f -name '.rhosts' 2&gt;/dev/null&quot;">
              <ecl:command>find `lsuser -a home ALL |cut -f2 -d=` -maxdepth 1 -type f -name '.rhosts' 2&gt;/dev/null</ecl:command>
              <ecl:line-selection op="pm" value="^.+$"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="set-default-umask-for-users" role="full" selected="false" weight="1.0">
      <xccdf:title>Set Default umask for users</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The above actions change the default umask for existing users, and then
                it changes the default profile, which applies to all newly created users. <xhtml:br/><xhtml:br/> With a default umask setting of 077 - a setting agreed to as part of the consensus process with DISA and NSA -
                files and directories created by users will not be readable by any other user on the system. The user creating the file has
                the discretion of making their files and directories readable by others via the <xhtml:code>chmod</xhtml:code> command.
                Users who wish to allow their files and directories to be readable by others by default may choose a different default umask
                by inserting the <xhtml:code>umask</xhtml:code> command into the standard shell configuration files (.profile, .cshrc, etc.)
                in their home directories. A umask of 027 would make files and directories readable by users in the same Unix group, while a
                umask of 022 would make files readable by every user on the system.<xhtml:br/><xhtml:br/> Note: This is been shown to cause problems with the installation of software packages where the installation
                script uses the default umask - the directories are owned by root with 700 permissions, and then the application and/or
                daemon cannot read its files. A simple fix to this problem is to manually issue a less restrictive
                <xhtml:code>umask</xhtml:code> (such as umask 022) for the shell session doing the installation, or place such a
                    <xhtml:code>umask</xhtml:code> command (in the beginning of the installation script) to a less restrictive value before
                the installation, or in the beginning of the installation script. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> Change existing users<xhtml:br/><xhtml:br/><xhtml:code> lsuser -a home ALL | awk '{print $1}' | while read user; do<xhtml:br/> chuser umask=077 $user<xhtml:br/> done<xhtml:br/><xhtml:br/> Change default profile<xhtml:br/><xhtml:br/> To set a system-wide default, edit the file <xhtml:code>/etc/security/user</xhtml:code> and replace the
                    default umask value in the umask line entry for the default stanza with 077. </xhtml:code></xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--user umasks-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lsuser -a umask ALL|egrep -v '077$'&quot;" success="pass">
              <ecl:command>lsuser -a umask ALL|egrep -v '077$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--default umask-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;lssec -f /etc/security/user -s default -a umask|egrep -v '077$'&quot;">
              <ecl:command>lssec -f /etc/security/user -s default -a umask|egrep -v '077$'</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="set-default-umask-for-the-ftp-daemon" role="full" selected="false" weight="1.0">
      <xccdf:title>Set default umask for the FTP daemon</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> This command changes the umask of the FTP user to 077. The umask should
                be set to at least 027 in order to prevent the FTP daemon process from creating world-writable files by default.<xhtml:br/><xhtml:br/> Note: If <xhtml:code>ftpd</xhtml:code> is disabled, you will receive the following error:<xhtml:br/><xhtml:br/><xhtml:code> chsubserver: ftp not in /etc/inetd.conf<xhtml:br/></xhtml:code><xhtml:br/> Note: If <xhtml:code>inetd</xhtml:code> is disabled, you will receive the following error:<xhtml:br/><xhtml:br/><xhtml:code> 0513-036 The request could not be passed to the inetd subsystem.<xhtml:br/> Start the subsystem and try your
                    command again.<xhtml:br/></xhtml:code></xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> chsubserver -c -v ftp -p tcp "ftpd -l -u077"<xhtml:br/> refresh -s inetd<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;egrep '^ftp' /etc/inetd.conf|egrep -v - - '-l -u077'&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="command test &quot;egrep '^ftp' /etc/inetd.conf|egrep -v -- '-l -u077'&quot;" success="pass">
            <ecl:command>egrep '^ftp' /etc/inetd.conf|egrep -v -- '-l -u077'</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="set-mesg-n-as-the-default-for-all-users" role="full" selected="false" weight="1.0">
      <xccdf:title>Set "mesg n" as the default for all users</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> "mesg n" blocks attempts to use the write or talk commands to contact
                the user at their terminal, but has the side effect of slightly strengthening permissions on the user's tty device. Since
                write and talk are no longer widely used at most sites, the incremental security increase is worth the loss of
                functionality. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/>
        <xhtml:code> echo "mesg n" &gt;&gt; /etc/profile<xhtml:br/> echo "mesg n" &gt;&gt; /etc/csh.login<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^mesg[[:space:]]+n$' /etc/profile&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^mesg[[:space:]]+n$' /etc/profile&quot;" success="pass">
              <ecl:command>egrep '^mesg[[:space:]]+n$' /etc/profile</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;egrep '^mesg[[:space:]]+n$' /etc/csh.login&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;egrep '^mesg[[:space:]]+n$' /etc/csh.login&quot;" success="pass">
              <ecl:command>egrep '^mesg[[:space:]]+n$' /etc/csh.login</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="removing-unnecessary-default-user-accounts" role="full" selected="false" weight="1.0">
      <xccdf:title>Removing unnecessary default user accounts</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> Removing the users that your system does not need is a prudent security
                precaution. The AIX 5L Version 5.3 Security Guide
                (http://publib.boulder.ibm.com/infocenter/pseries/index.jsp?topic=/com.ibm.aix.doc/aixbman/security/security.htm) lists
                these accounts as candidates for removal:<xhtml:br/><xhtml:br/><xhtml:table><xhtml:tr><xhtml:td>User ID</xhtml:td><xhtml:td>Description</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>uucp, nuucp</xhtml:td><xhtml:td>Owner of hidden files used by uucp protocol. The uucp user account is used for the UNIX-to-UNIX Copy
                            Program, which is a group of commands, programs, and files, present on most AIX systems, that allows the user to
                            communicate with another AIX system over a dedicated line or a telephone line.</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>lpd</xhtml:td><xhtml:td>Owner of files used by printing subsystem</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>guest</xhtml:td><xhtml:td>Allows access to users who do not have access to accounts</xhtml:td></xhtml:tr></xhtml:table><xhtml:br/> In addition, these group ID's may be removed if your system does not need them:<xhtml:br/><xhtml:br/><xhtml:table><xhtml:tr><xhtml:td>Group ID</xhtml:td><xhtml:td>Description</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>uucp</xhtml:td><xhtml:td>Group to which uucp and nuucp users belong</xhtml:td></xhtml:tr><xhtml:tr><xhtml:td>printq</xhtml:td><xhtml:td>Group to which lpd user belongs</xhtml:td></xhtml:tr></xhtml:table><xhtml:br/> Note: You may get one or more errors stating the group or user does not exist. This is harmless and may be
                ignored. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> Note: Read discussion first!!!<xhtml:br/><xhtml:br/><xhtml:code> # Remove users LIST="uucp nuucp lpd guest printq"<xhtml:br/> for USERS in $LIST; do<xhtml:br/> rmuser -p
                    $USERS<xhtml:br/> rmgroup $USERS<xhtml:br/> done<xhtml:br/> # Remove groups<xhtml:br/> LIST="uucp printq"<xhtml:br/> for
                    USERS in $LIST; do<xhtml:br/> rmgroup $USERS<xhtml:br/> done<xhtml:br/><xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;for u in uucp nuucp lpd guest printq; do lsuser -a id $u 2>/dev/null; done&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;for u in uucp nuucp lpd guest printq; do lsuser -a id $u 2&gt;/dev/null; done&quot;">
              <ecl:command>for u in uucp nuucp lpd guest printq; do lsuser -a id $u 2&gt;/dev/null; done</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;for u in uucp printq; do lsgroup -a id $u 2>/dev/null; done&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;for u in uucp printq; do lsgroup -a id $u 2&gt;/dev/null; done&quot;">
              <ecl:command>for u in uucp printq; do lsgroup -a id $u 2&gt;/dev/null; done</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="warning-banners">
    <xccdf:title>Warning banners</xccdf:title>
    <xccdf:description> Presenting some sort of statutory warning message prior to the normal user logon may assist the prosecution of
            trespassers on the computer system. Changing some of these login banners also has the side effect of hiding OS version
            information and other detailed system information from attackers attempting to target specific attacks at a system (though there
            are other mechanisms available for acquiring this information). Guidelines published by the US Department of Defense require
            that warning messages include at least the name of the organization that owns the system, the fact that the system is subject to
            monitoring and that such monitoring is in compliance with local statutes, and that use of the system implies consent to such
            monitoring. Clearly, the organization's local legal counsel and/or site security administrator should review the content of all
            messages before any system modifications are made, as these warning messages are inherently site-specific.<xhtml:br/><xhtml:br/> More information (including citations of relevant case law) can be found at
            http://www.usdoj.gov/criminal/cybercrime/s&amp;sappendix2002.htm. </xccdf:description>
    <xccdf:Rule id="warnings" role="full" selected="false" weight="1.0">
      <xccdf:title>Create warnings for network and physical access services</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/> The contents of <xhtml:code>/etc/motd</xhtml:code> is displayed after
                all successful logins, no matter where the user is logging in from. Recall that we edited <xhtml:code>sshd_conf</xhtml:code>
                to display the <xhtml:code>/etc/motd</xhtml:code> banner, so it will appear before and after login. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/> Edit the banner currently in <xhtml:code>/etc/motd</xhtml:code> as required
                by your Enterprise. The following script is a template taken from the Bastille Linux project:<xhtml:br/><xhtml:br/> Important: You need to change "The Company" in the text below to an appropriate value for your organization.<xhtml:br/><xhtml:br/><xhtml:code> cd /etc<xhtml:br/> # Remember to enter name of your company here:<xhtml:br/> COMPANYNAME="its owner"<xhtml:br/>
                    cat &lt;&lt;EOM \<xhtml:br/> | sed -e "s/its owner/${COMPANYNAME}/g" &gt; /etc/motd<xhtml:br/>
                    ***************************************************************************<xhtml:br/> NOTICE TO USERS<xhtml:br/><xhtml:br/> This computer system is the private property of its owner, whether<xhtml:br/> individual, corporate or
                    government. It is for authorized use only. <xhtml:br/> Users (authorized or unauthorized) have no explicit or implicit
                    <xhtml:br/> expectation of privacy. <xhtml:br/><xhtml:br/> Any or all uses of this system and all files on this system may be<xhtml:br/> intercepted, monitored,
                    recorded, copied, audited, inspected, and <xhtml:br/> disclosed to your employer, to authorized site, government, and
                    law <xhtml:br/> enforcement personnel, as well as authorized officials of government <xhtml:br/> agencies, both domestic
                    and foreign. <xhtml:br/><xhtml:br/> By using this system, the user consents to such interception, monitoring,<xhtml:br/> recording, copying,
                    auditing, inspection, and disclosure at the <xhtml:br/> discretion of such personnel or officials. Unauthorized or
                    improper use <xhtml:br/> of this system may result in civil and criminal penalties and <xhtml:br/> administrative or
                    disciplinary action, as appropriate. By continuing to <xhtml:br/> use this system you indicate your awareness of and
                    consent to these terms <xhtml:br/> and conditions of use. LOG OFF IMMEDIATELY if you do not agree to the<xhtml:br/>
                    conditions stated in this warning. <xhtml:br/>
                    ****************************************************************************<xhtml:br/> EOM<xhtml:br/> chown bin:bin
                    /etc/motd<xhtml:br/> chmod 644 /etc/motd <xhtml:br/><xhtml:br/></xhtml:code></xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/motd content-->
          <xccdf:check-content>
            <ecl:shell-command check="all" comment="command test &quot;cat /etc/motd&quot;" success="pass">
              <ecl:command>cat /etc/motd</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--/etc/motd ownership and permissions-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;find /etc/motd ! \( -user bin -group bin -perm 644 \) -ls&quot;">
              <ecl:command>find /etc/motd ! \( -user bin -group bin -perm 644 \) -ls</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="create-warnings-for-gui-based-logins" role="full" selected="false" weight="1.0">
      <xccdf:title>Create warnings for GUI-based logins</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/> The standard graphical login program for AIX requires the user to enter their username in one dialog box and
                their password in a second separate dialog. The commands above set the warning message on both to be the same message, but
                the site has the option of using different messages on each screen. The Dtlogin*greeting.labelString is the message for the
                first dialog where the user is prompted for their username, and ... perslabelString is the message on the second dialog box. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/>
        <xhtml:code> for file in /usr/dt/config/*/Xresources; do<xhtml:br/> dir=`dirname $file | sed s/usr/etc/`<xhtml:br/> mkdir -p
                    $dir<xhtml:br/> if [ ! -f $dir/Xresources ]; then<xhtml:br/> cp $file $dir/Xresources<xhtml:br/> fi<xhtml:br/>
                    WARN="Authorized uses only. All activity may be monitored and reported."<xhtml:br/> echo "Dtlogin*greeting.labelString:
                    $WARN" &gt;&gt;$dir/Xresources<xhtml:br/> echo "Dtlogin*greeting.persLabelString: $WARN"
                    &gt;&gt;$dir/Xresources<xhtml:br/> done<xhtml:br/> chown root:sys /etc/dt/config/*/Xresources<xhtml:br/> chmod
                    644 /etc/dt/config/*/Xresources<xhtml:br/><xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:complex-check operator="AND">
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;ls /etc/dt/config/*/Xresources|while read $f; do egrep '^[^#!]Dtlogin\*greeting\.labelString:[[:space:]]+Authorized' $f || echo $f lacks warning; done&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;ls /etc/dt/config/*/Xresources|while read $f; do egrep '^[^#!]Dtlogin\*greeting\.labelString:[[:space:]]+Authorized' $f || echo $f lacks warning; done&quot;">
              <ecl:command>ls /etc/dt/config/*/Xresources|while read $f; do egrep
                                '^[^#!]Dtlogin\*greeting\.labelString:[[:space:]]+Authorized' $f || echo $f lacks warning; done</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
        <xccdf:check system="http://cisecurity.org/check">
          <!--command test &quot;ls /etc/dt/config/*/Xresources|while read $f; do egrep '^[^#!]Dtlogin\*greeting\.persLabelString:[[:space:]]+Authorized' $f || echo $f lacks warning; done&quot;-->
          <xccdf:check-content>
            <ecl:shell-command check="none exist" comment="command test &quot;ls /etc/dt/config/*/Xresources|while read $f; do egrep '^[^#!]Dtlogin\*greeting\.persLabelString:[[:space:]]+Authorized' $f || echo $f lacks warning; done&quot;">
              <ecl:command>ls /etc/dt/config/*/Xresources|while read $f; do egrep
                                '^[^#!]Dtlogin\*greeting\.persLabelString:[[:space:]]+Authorized' $f || echo $f lacks warning; done</ecl:command>
              <ecl:line-selection op="pm" value=".+"/>
            </ecl:shell-command>
          </xccdf:check-content>
        </xccdf:check>
      </xccdf:complex-check>
    </xccdf:Rule>
    <xccdf:Rule id="createwwarnings-for-telnet-daemon" role="full" selected="false" weight="1.0">
      <xccdf:title>Create warnings for telnet daemon</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/> This item configures <xhtml:code>telnetd</xhtml:code>'s "authorized users only" banner message. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/>
        <xhtml:code> chsec -f /etc/security/login.cfg -s default -a herald="Authorized uses only. All activity may be monitored and
                    reported\n\r\nlogin: " </xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;lssec -f /etc/security/login.cfg -s default -a herald&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="all" comment="command test &quot;lssec -f /etc/security/login.cfg -s default -a herald&quot;" success="pass">
            <ecl:command>lssec -f /etc/security/login.cfg -s default -a herald</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
    <xccdf:Rule id="create-warnings-for-ftp-daemon" role="full" selected="false" weight="1.0">
      <xccdf:title>Create warnings for FTP daemon</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/> This item configures <xhtml:code>ftpd</xhtml:code>'s "authorized users only" banner messages by replacing the
                default "FTP server ready" message. AIX 5.1 and later gives you the option of editing <xhtml:code>/etc/ftpmotd</xhtml:code>
                with the text of your choice. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/>
        <xhtml:code> dspcat -g /usr/lib/nls/msg/en_US/ftpd.cat &gt; /tmp/ftpd.tmp<xhtml:br/> sed "s/\"\%s FTP server (\%s)
                    ready.\"/\"\%s Authorized uses only. All activity may be monitored and reported\"/" \<xhtml:br/> /tmp/ftpd.tmp &gt;
                    /tmp/ftpd.msg<xhtml:br/> gencat ftpd.cat /tmp/ftpd.msg<xhtml:br/></xhtml:code>
        <xhtml:br/>
        <xhtml:strong>Additional Action (AIX 5.1 and later):</xhtml:strong>
        <xhtml:br/>
        <xhtml:code> echo "herald: /etc/ftpmotd" &gt;&gt; /etc/ftpaccess.ctl<xhtml:br/> cat &lt;&lt; EOF
                    &gt;&gt; /etc/ftpmotd<xhtml:br/> Authorized uses only. All activity may be monitored and reported<xhtml:br/>
                    EOF<xhtml:br/></xhtml:code>
      </xccdf:fixtext>
      <xccdf:check system="http://cisecurity.org/check">
        <!--command test &quot;dspcat -g /usr/lib/nls/msg/en_US/ftpd.cat|egrep 'FTP server.*ready'|egrep -v 'activity may be monitored'&quot;-->
        <xccdf:check-content>
          <ecl:shell-command check="none exist" comment="command test &quot;dspcat -g /usr/lib/nls/msg/en_US/ftpd.cat|egrep 'FTP server.*ready'|egrep -v 'activity may be monitored'&quot;" success="pass">
            <ecl:command>dspcat -g /usr/lib/nls/msg/en_US/ftpd.cat|egrep 'FTP server.*ready'|egrep -v 'activity may be
                            monitored'</ecl:command>
            <ecl:line-selection op="pm" value=".+"/>
          </ecl:shell-command>
        </xccdf:check-content>
      </xccdf:check>
    </xccdf:Rule>
  </xccdf:Group>
  <xccdf:Group id="g-reboot">
    <xccdf:title>Reboot</xccdf:title>
    <xccdf:description>
      <xhtml:p>Whenever you make substantial changes to a system, reboot.  Some System 
      Administrators believe any change to the init scripts warrant a reboot to ensure the 
      system comes up as expected.  Hours of lost productivity with extensive troubleshooting 
      (not to mention lost revenue) have occurred because a system did not start up as 
      expected.  The  root cause was an init problem that would have been detected had the 
      reboot taken place while the change was fresh in the mind of the administrator.
      </xhtml:p>
    </xccdf:description>
    <xccdf:Rule id="r-reboot" role="unscored" selected="false" weight="0.0">
      <xccdf:title>Reboot</xccdf:title>
      <xccdf:description>
        <xhtml:strong>Discussion:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/> Whenever you make substantial changes to a system, reboot. Some System Administrators believe any change to the
                init scripts warrant a reboot to ensure the system comes up as expected. Hours of lost productivity with extensive
                troubleshooting (not to mention lost revenue) have occurred because a system did not start up as expected. The root cause
                was an init problem that would have been detected had the reboot taken place while the change was fresh in the mind of the
                administrator. </xccdf:description>
      <xccdf:fixtext>
        <xhtml:strong>Action:</xhtml:strong>
        <xhtml:br/>
        <xhtml:br/>
        <xhtml:code> shutdown -Fr </xhtml:code>
      </xccdf:fixtext>
    </xccdf:Rule>
  </xccdf:Group>
<xccdf:signature><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>qQNA72WSRFdij6cE0Dw4334KBi4=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
NOpdybwY0d0DSYQ8ZYyuCyVGGJ4BDAu33PU7etsYku0ifFW4vsd1nu8Ys/lz+N65z5X5l68zceoo
qz5vDNkb+wSVfSoTL6sJiID+0EqWvdGbZMdzrDEcS0wHGIRsibHjcrbyxtqz9HZYxGFFpFA0J7Le
UGfjQYHcX3G4jYIA8TIpE1LvI3+6DtuikdvR3ittLxxn9voTiv1c1Z7mGrBKGQ6VuyRS0HXFDZi5
qqhUTmC5YbwHLaBNs2JQzDuP8aQaWMnxIiZ0G/d4u6aKV801HPxZ4oLfriZLwECqx+VAHYg1jBAl
J2d+RDDz2zJTy4oPll82po3mnumcszhvtR1jKA==
</ds:SignatureValue>
<ds:KeyInfo>
<ds:X509Data>
<ds:X509Certificate>
MIIFRzCCBC+gAwIBAgIHTwpN/4tOfDANBgkqhkiG9w0BAQsFADCBtDELMAkGA1UEBhMCVVMxEDAO
BgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxGjAYBgNVBAoTEUdvRGFkZHkuY29t
LCBJbmMuMS0wKwYDVQQLEyRodHRwOi8vY2VydHMuZ29kYWRkeS5jb20vcmVwb3NpdG9yeS8xMzAx
BgNVBAMTKkdvIERhZGR5IFNlY3VyZSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjAeFw0xNDA5
MTgxNDM0MjFaFw0xNzEwMjAxODU3NDRaMIGTMQswCQYDVQQGEwJVUzERMA8GA1UECBMITmV3IFlv
cmsxFzAVBgNVBAcTDkVhc3QgR3JlZW5idXNoMSswKQYDVQQKEyJDZW50ZXIgZm9yIEludGVybmV0
IFNlY3VyaXR5LCBJbmMuMSswKQYDVQQDEyJDZW50ZXIgZm9yIEludGVybmV0IFNlY3VyaXR5LCBJ
bmMuMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0MGnj6yX2QHklGadAfTBxssvP+2f
YegPpNGXfEmPXZXrWeME2BqIbO+hKXTuwUucRK6RvQJTjgzNgOhQx3HcclRwQB4xj/14hOoZSeQ3
haw/Xjl4WofsWizM5j/g1iWBgxi3xk/aREfKKb0ulBMtP/WYFpSRjZ/Z7m5QKii0feJPxbf+wrZ+
UvNZ8uBdO+SEmbhS/DVESsEWzXn6StbQpa2dno2aIOGZXQKcUY2d3WZ4Zk+zawFcRUYslVIrOhMb
0e3+hbJEtFwm5ekehdNimSozYyyLGZJonLlvr8PfmvQ1ceu7enWCRfZrRWAlDHFaouLdtU/OmXc+
Um7cLwz8VQIDAQABo4IBezCCAXcwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDAzAO
BgNVHQ8BAf8EBAMCB4AwNQYDVR0fBC4wLDAqoCigJoYkaHR0cDovL2NybC5nb2RhZGR5LmNvbS9n
ZGlnMnM1LTAuY3JsMFMGA1UdIARMMEowSAYLYIZIAYb9bQEHFwIwOTA3BggrBgEFBQcCARYraHR0
cDovL2NlcnRpZmljYXRlcy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5LzB2BggrBgEFBQcBAQRqMGgw
JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmdvZGFkZHkuY29tLzBABggrBgEFBQcwAoY0aHR0cDov
L2NlcnRpZmljYXRlcy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5L2dkaWcyLmNydDAfBgNVHSMEGDAW
gBRAwr0njsw0gzCiM9f7bLPwtCyAzjAdBgNVHQ4EFgQU+3zn+CEg6a2xPqlBXvn64hUyoB4wDQYJ
KoZIhvcNAQELBQADggEBAEh76h1GtJ0pj04in+RUymB7fqPh6HFILkOLlTPnveyXCoHYT2M46DET
EA/NKYkoF2KA3QiZ1b+PMViuTYG2pDs71eFVPADuBCGf9IFufCDY9mPvjQiFDlLNMknXxACD8TjC
hqz+uZT2uLPw/YxkJIsCxrTQJ//ga/fHfZDrKgQfbVzxjD/4WKDe8HktjKcn+NWGPJNMgmO+IHrK
if6TB1xTo32W9QzwoXvBdLnziAUGZZghEulq6h3RCMzKPzpx5JiLlOz6JzqXHvrua+yUbr4A29Vy
vkwWgJWjyvJd2uq9MQ9l49kkrD84m41PSwpaHO99nEHRgRykopxIt8AHsIQ=
</ds:X509Certificate>
</ds:X509Data>
<ds:KeyValue>
<ds:RSAKeyValue>
<ds:Modulus>
0MGnj6yX2QHklGadAfTBxssvP+2fYegPpNGXfEmPXZXrWeME2BqIbO+hKXTuwUucRK6RvQJTjgzN
gOhQx3HcclRwQB4xj/14hOoZSeQ3haw/Xjl4WofsWizM5j/g1iWBgxi3xk/aREfKKb0ulBMtP/WY
FpSRjZ/Z7m5QKii0feJPxbf+wrZ+UvNZ8uBdO+SEmbhS/DVESsEWzXn6StbQpa2dno2aIOGZXQKc
UY2d3WZ4Zk+zawFcRUYslVIrOhMb0e3+hbJEtFwm5ekehdNimSozYyyLGZJonLlvr8PfmvQ1ceu7
enWCRfZrRWAlDHFaouLdtU/OmXc+Um7cLwz8VQ==
</ds:Modulus>
<ds:Exponent>AQAB</ds:Exponent>
</ds:RSAKeyValue>
</ds:KeyValue>
</ds:KeyInfo>
</ds:Signature></xccdf:signature></xccdf:Benchmark>